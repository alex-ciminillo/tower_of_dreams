/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t,e,i={2532:(t,e,i)=>{var n={"./AvatarSwordRight.png":7180,"./TrainingButtonsNewMove.png":7035,"./TrainingButtonsNewMoveGreen.png":8099,"./TrainingButtonsNewMoveRed.png":7989,"./TrainingDialogue.png":4677,"./TrainingWords.png":590,"./adventure.png":9515,"./adventureReversed.png":2186,"./adventurerSingle.png":6284,"./background1.png":7725,"./background2.png":3367,"./background3.png":6163,"./buttons.png":271,"./buttonsPressed.png":7102,"./castleTitle.png":5364,"./cliffTitle.png":3603,"./cloud1.png":3587,"./cloud2.png":8448,"./cloud3.png":5012,"./cloud4.png":8547,"./cloud5.png":9618,"./cloud6.png":6605,"./cloud7.png":847,"./cloud8.png":5312,"./evilBatSpritesheet.png":1082,"./evilBatSpritesheetReversed.png":5989,"./evilBeakGuySpritesheet.png":6352,"./evilBeakGuySpritesheetReversed.png":4431,"./evilGolemSpritesheet.png":8786,"./evilPlantSpritesheet.png":7398,"./evilPlantSpritesheetReversed.png":4856,"./evilSkullSnakeSpritesheet.png":4317,"./evilSkullSnakeSpritesheetReversed.png":1298,"./evilSlugSpritesheet.png":770,"./evilSlugSpritesheetReversed.png":933,"./github_icon.png":8009,"./goldSushi.png":9715,"./home.png":2715,"./homeButton.png":5881,"./map.png":6999,"./music.png":8963,"./music_slash.png":3879,"./newCursor.png":8422,"./pixel_heart.png":4524,"./simpleYesNoHomeBox.png":4767,"./sound-mute.png":1237,"./soundImage.png":7298,"./talkingBox.png":1779,"./towerLevel1.png":7676,"./towerLevel1Bottom.png":3051,"./trainingDummySpriteTransparent.png":312,"./trainingScreen.png":6616,"./treasure chests.png":4492};function s(t){var e=r(t);return i(e)}function r(t){if(!i.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}s.keys=function(){return Object.keys(n)},s.resolve=r,t.exports=s,s.id=2532},8636:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>y});var n=i(7537),s=i.n(n),r=i(3645),h=i.n(r),a=i(1667),o=i.n(a),u=new URL(i(7974),i.b),c=new URL(i(2399),i.b),l=new URL(i(2552),i.b),d=new URL(i(428),i.b),f=new URL(i(8422),i.b),p=h()(s()),g=o()(u),m=o()(c),x=o()(l),w=o()(d),v=o()(f);p.push([t.id,"@font-face {\n  font-family: 'TitleScreen';\n  src: url("+g+") format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'PixelFont';\n  src: url("+m+") format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Ubuntu';\n  src: url("+x+") format('truetype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'PressStart2P';\n  src: url("+w+") format('truetype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n.footer {\n  width: 100%;\n  margin-top: calc(1vw + 1vh + 88.5vmin); \n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\na:hover {\n  color: #fff;\n}\n\n.git img {\n  width: 25px;\n  filter: invert(80%);\n}\n\n\n.git img:hover {\n  filter: invert(100%);\n}\n\n.git {\n  margin: 0 0 0 10px;\n}\n\n.span1 {\n  font-family: 'PressStart2P';\n  color: rgb(189, 189, 189);\n  font-size: 16px;\n}\n\n.canvas {\n  /* image-rendering: pixelated; */\n  width: calc(1vw + 1vh + 124vmin);\n  height: calc(1vw + 1vh + 79vmin); \n  background-color: rgb(0, 0, 0);\t\n  }\n\n  .canvas2 {\n    width: calc(1vw + 1vh + 30vmin);\n    height: calc(1vw + 1vh + 85vmin); \n    background-color: rgb(255, 255, 255);\t\n  }\n  .canvas3 {\n    width: 0px;\n    height: calc(1vw + 1vh + 85vmin); \n    background-color: rgb(255, 255, 255);\t\n  }\n\n.outerDiv {\n  display: flex;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}\n\nbody {\n  background-color: rgb(27, 27, 27);\n  cursor: url("+v+"), auto;\n}\n\n.title_text {\n  font-family: 'TitleScreen';\n}\n\n\n.left_adventure {\n  -moz-transform: scale(-1, 1);\n  -webkit-transform: scale(-1, 1);\n  -o-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n  filter: FlipH;\n}\n\n\n\n\n\n\n\n\n\n\n","",{version:3,sources:["webpack://./stylesheets/style.css"],names:[],mappings:"AAAA;EACE,0BAA0B;EAC1B,+DAAqE;EACrE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;EACxB,+DAA6D;EAC7D,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,+DAAmE;EACnE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;EAC3B,+DAAgE;EAChE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,sCAAsC;EACtC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;EACX,mBAAmB;AACrB;;;AAGA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;EAC3B,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,gCAAgC;EAChC,gCAAgC;EAChC,gCAAgC;EAChC,8BAA8B;EAC9B;;EAEA;IACE,+BAA+B;IAC/B,gCAAgC;IAChC,oCAAoC;EACtC;EACA;IACE,UAAU;IACV,gCAAgC;IAChC,oCAAoC;EACtC;;AAEF;EACE,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,wCAAwC;EACxC,gCAAgC;AAClC;;AAEA;EACE,iCAAiC;EACjC,qDAA8C;AAChD;;AAEA;EACE,0BAA0B;AAC5B;;;AAGA;EACE,4BAA4B;EAC5B,+BAA+B;EAC/B,0BAA0B;EAC1B,uBAAuB;EACvB,aAAa;AACf",sourcesContent:["@font-face {\n  font-family: 'TitleScreen';\n  src: url('./../fonts/titleScreen/TitleScreen.ttf') format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'PixelFont';\n  src: url('./../fonts/pixel/pixelFont.ttf') format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Ubuntu';\n  src: url('./../fonts/ubuntu/Ubuntu-Regular.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'PressStart2P';\n  src: url('./../fonts/pixel/PressStart2P.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n.footer {\n  width: 100%;\n  margin-top: calc(1vw + 1vh + 88.5vmin); \n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\na:hover {\n  color: #fff;\n}\n\n.git img {\n  width: 25px;\n  filter: invert(80%);\n}\n\n\n.git img:hover {\n  filter: invert(100%);\n}\n\n.git {\n  margin: 0 0 0 10px;\n}\n\n.span1 {\n  font-family: 'PressStart2P';\n  color: rgb(189, 189, 189);\n  font-size: 16px;\n}\n\n.canvas {\n  /* image-rendering: pixelated; */\n  width: calc(1vw + 1vh + 124vmin);\n  height: calc(1vw + 1vh + 79vmin); \n  background-color: rgb(0, 0, 0);\t\n  }\n\n  .canvas2 {\n    width: calc(1vw + 1vh + 30vmin);\n    height: calc(1vw + 1vh + 85vmin); \n    background-color: rgb(255, 255, 255);\t\n  }\n  .canvas3 {\n    width: 0px;\n    height: calc(1vw + 1vh + 85vmin); \n    background-color: rgb(255, 255, 255);\t\n  }\n\n.outerDiv {\n  display: flex;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}\n\nbody {\n  background-color: rgb(27, 27, 27);\n  cursor: url('./../images/newCursor.png'), auto;\n}\n\n.title_text {\n  font-family: 'TitleScreen';\n}\n\n\n.left_adventure {\n  -moz-transform: scale(-1, 1);\n  -webkit-transform: scale(-1, 1);\n  -o-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n  filter: FlipH;\n}\n\n\n\n\n\n\n\n\n\n\n"],sourceRoot:""}]);const y=p},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,r){"string"==typeof t&&(t=[[null,t,void 0]]);var h={};if(n)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(h[o]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);n&&h[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(s," */"),h=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(h).concat([r]).join("\n")}return[e].join("\n")}},3255:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"947a572861aff2e3ca9af5d6d258e3bf.mp3"},8991:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"c397f9cc4d633330691cbbb0bb15c574.mp3"},3039:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"9d3151074dc818a92e314fec161a9e30.mp3"},9252:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"7796bfbd8e85b34708f02556e66709d7.mp3"},9150:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"1c79f094e04021fb4754b6a66f7a18ea.mp3"},8813:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"b2067f3baba67e783e7b50f1d0fb4a17.mp3"},1550:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"881fce213e60c2a4bacc08f5950e3132.mp3"},3185:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"a019be79470e2d7f855d6e91a0d548de.mp3"},4612:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"d164062bad9cf798f5bd2b9e882ac4f7.mp3"},6062:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"20601a87d1a62086ca723a8f00ecc7a4.mp3"},4987:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"6fe37b88cef6ffe0729d6200f96f045c.mp3"},8693:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"eef399f20ff82f5974b3945cb1ce83de.mp3"},6156:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"cd04586619db73c0ca20db09641cdf06.mp3"},6219:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"6ed57fd46a4b4f86067b290eccae03dd.mp3"},2868:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"95539e40c916474cc3cffb5eafc16e85.mp3"},7165:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"8b2892d644ee1812959a587f6d4999a6.mp3"},2683:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"3dc742c8ff16dd2040c2347e06ec9a75.mp3"},287:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"3df082015dccbafd806523815c2c1663.mp3"},8148:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"05ea24406eba8507df10d557cf50f65b.mp3"},6486:function(t,e,i){var n;t=i.nmd(t),function(){var s,r="Expected a function",h="__lodash_hash_undefined__",a="__lodash_placeholder__",o=32,u=128,c=1/0,l=9007199254740991,d=NaN,f=4294967295,p=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",o],["partialRight",64],["rearg",256]],g="[object Arguments]",m="[object Array]",x="[object Boolean]",w="[object Date]",v="[object Error]",y="[object Function]",A="[object GeneratorFunction]",C="[object Map]",b="[object Number]",S="[object Object]",k="[object Promise]",T="[object RegExp]",_="[object Set]",I="[object String]",q="[object Symbol]",B="[object WeakMap]",j="[object ArrayBuffer]",E="[object DataView]",N="[object Float32Array]",z="[object Float64Array]",M="[object Int8Array]",L="[object Int16Array]",G="[object Int32Array]",R="[object Uint8Array]",H="[object Uint8ClampedArray]",P="[object Uint16Array]",W="[object Uint32Array]",D=/\b__p \+= '';/g,F=/\b(__p \+=) '' \+/g,O=/(__e\(.*?\)|\b__t\)) \+\n'';/g,U=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,X=RegExp(U.source),Q=RegExp(Y.source),K=/<%-([\s\S]+?)%>/g,$=/<%([\s\S]+?)%>/g,J=/<%=([\s\S]+?)%>/g,V=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,it=RegExp(et.source),nt=/^\s+/,st=/\s/,rt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ht=/\{\n\/\* \[wrapped with (.+)\] \*/,at=/,? & /,ot=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ut=/[()=,{}\[\]\/\s]/,ct=/\\(\\)?/g,lt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,ft=/^[-+]0x[0-9a-f]+$/i,pt=/^0b[01]+$/i,gt=/^\[object .+?Constructor\]$/,mt=/^0o[0-7]+$/i,xt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vt=/($^)/,yt=/['\n\r\u2028\u2029\\]/g,At="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ct="a-z\\xdf-\\xf6\\xf8-\\xff",bt="A-Z\\xc0-\\xd6\\xd8-\\xde",St="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",kt="["+St+"]",Tt="["+At+"]",_t="\\d+",It="["+Ct+"]",qt="[^\\ud800-\\udfff"+St+_t+"\\u2700-\\u27bf"+Ct+bt+"]",Bt="\\ud83c[\\udffb-\\udfff]",jt="[^\\ud800-\\udfff]",Et="(?:\\ud83c[\\udde6-\\uddff]){2}",Nt="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+bt+"]",Mt="(?:"+It+"|"+qt+")",Lt="(?:"+zt+"|"+qt+")",Gt="(?:['’](?:d|ll|m|re|s|t|ve))?",Rt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ht="(?:"+Tt+"|"+Bt+")?",Pt="[\\ufe0e\\ufe0f]?",Wt=Pt+Ht+"(?:\\u200d(?:"+[jt,Et,Nt].join("|")+")"+Pt+Ht+")*",Dt="(?:"+["[\\u2700-\\u27bf]",Et,Nt].join("|")+")"+Wt,Ft="(?:"+[jt+Tt+"?",Tt,Et,Nt,"[\\ud800-\\udfff]"].join("|")+")",Ot=RegExp("['’]","g"),Ut=RegExp(Tt,"g"),Yt=RegExp(Bt+"(?="+Bt+")|"+Ft+Wt,"g"),Xt=RegExp([zt+"?"+It+"+"+Gt+"(?="+[kt,zt,"$"].join("|")+")",Lt+"+"+Rt+"(?="+[kt,zt+Mt,"$"].join("|")+")",zt+"?"+Mt+"+"+Gt,zt+"+"+Rt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",_t,Dt].join("|"),"g"),Qt=RegExp("[\\u200d\\ud800-\\udfff"+At+"\\ufe0e\\ufe0f]"),Kt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,$t=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Jt=-1,Vt={};Vt[N]=Vt[z]=Vt[M]=Vt[L]=Vt[G]=Vt[R]=Vt[H]=Vt[P]=Vt[W]=!0,Vt[g]=Vt[m]=Vt[j]=Vt[x]=Vt[E]=Vt[w]=Vt[v]=Vt[y]=Vt[C]=Vt[b]=Vt[S]=Vt[T]=Vt[_]=Vt[I]=Vt[B]=!1;var Zt={};Zt[g]=Zt[m]=Zt[j]=Zt[E]=Zt[x]=Zt[w]=Zt[N]=Zt[z]=Zt[M]=Zt[L]=Zt[G]=Zt[C]=Zt[b]=Zt[S]=Zt[T]=Zt[_]=Zt[I]=Zt[q]=Zt[R]=Zt[H]=Zt[P]=Zt[W]=!0,Zt[v]=Zt[y]=Zt[B]=!1;var te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,ie=parseInt,ne="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,se="object"==typeof self&&self&&self.Object===Object&&self,re=ne||se||Function("return this")(),he=e&&!e.nodeType&&e,ae=he&&t&&!t.nodeType&&t,oe=ae&&ae.exports===he,ue=oe&&ne.process,ce=function(){try{return ae&&ae.require&&ae.require("util").types||ue&&ue.binding&&ue.binding("util")}catch(t){}}(),le=ce&&ce.isArrayBuffer,de=ce&&ce.isDate,fe=ce&&ce.isMap,pe=ce&&ce.isRegExp,ge=ce&&ce.isSet,me=ce&&ce.isTypedArray;function xe(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function we(t,e,i,n){for(var s=-1,r=null==t?0:t.length;++s<r;){var h=t[s];e(n,h,i(h),t)}return n}function ve(t,e){for(var i=-1,n=null==t?0:t.length;++i<n&&!1!==e(t[i],i,t););return t}function ye(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function Ae(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(!e(t[i],i,t))return!1;return!0}function Ce(t,e){for(var i=-1,n=null==t?0:t.length,s=0,r=[];++i<n;){var h=t[i];e(h,i,t)&&(r[s++]=h)}return r}function be(t,e){return!(null==t||!t.length)&&Ne(t,e,0)>-1}function Se(t,e,i){for(var n=-1,s=null==t?0:t.length;++n<s;)if(i(e,t[n]))return!0;return!1}function ke(t,e){for(var i=-1,n=null==t?0:t.length,s=Array(n);++i<n;)s[i]=e(t[i],i,t);return s}function Te(t,e){for(var i=-1,n=e.length,s=t.length;++i<n;)t[s+i]=e[i];return t}function _e(t,e,i,n){var s=-1,r=null==t?0:t.length;for(n&&r&&(i=t[++s]);++s<r;)i=e(i,t[s],s,t);return i}function Ie(t,e,i,n){var s=null==t?0:t.length;for(n&&s&&(i=t[--s]);s--;)i=e(i,t[s],s,t);return i}function qe(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(e(t[i],i,t))return!0;return!1}var Be=Ge("length");function je(t,e,i){var n;return i(t,(function(t,i,s){if(e(t,i,s))return n=i,!1})),n}function Ee(t,e,i,n){for(var s=t.length,r=i+(n?1:-1);n?r--:++r<s;)if(e(t[r],r,t))return r;return-1}function Ne(t,e,i){return e==e?function(t,e,i){for(var n=i-1,s=t.length;++n<s;)if(t[n]===e)return n;return-1}(t,e,i):Ee(t,Me,i)}function ze(t,e,i,n){for(var s=i-1,r=t.length;++s<r;)if(n(t[s],e))return s;return-1}function Me(t){return t!=t}function Le(t,e){var i=null==t?0:t.length;return i?Pe(t,e)/i:d}function Ge(t){return function(e){return null==e?s:e[t]}}function Re(t){return function(e){return null==t?s:t[e]}}function He(t,e,i,n,s){return s(t,(function(t,s,r){i=n?(n=!1,t):e(i,t,s,r)})),i}function Pe(t,e){for(var i,n=-1,r=t.length;++n<r;){var h=e(t[n]);h!==s&&(i=i===s?h:i+h)}return i}function We(t,e){for(var i=-1,n=Array(t);++i<t;)n[i]=e(i);return n}function De(t){return t?t.slice(0,hi(t)+1).replace(nt,""):t}function Fe(t){return function(e){return t(e)}}function Oe(t,e){return ke(e,(function(e){return t[e]}))}function Ue(t,e){return t.has(e)}function Ye(t,e){for(var i=-1,n=t.length;++i<n&&Ne(e,t[i],0)>-1;);return i}function Xe(t,e){for(var i=t.length;i--&&Ne(e,t[i],0)>-1;);return i}function Qe(t,e){for(var i=t.length,n=0;i--;)t[i]===e&&++n;return n}var Ke=Re({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),$e=Re({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Je(t){return"\\"+te[t]}function Ve(t){return Qt.test(t)}function Ze(t){var e=-1,i=Array(t.size);return t.forEach((function(t,n){i[++e]=[n,t]})),i}function ti(t,e){return function(i){return t(e(i))}}function ei(t,e){for(var i=-1,n=t.length,s=0,r=[];++i<n;){var h=t[i];h!==e&&h!==a||(t[i]=a,r[s++]=i)}return r}function ii(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function ni(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function si(t){return Ve(t)?function(t){for(var e=Yt.lastIndex=0;Yt.test(t);)++e;return e}(t):Be(t)}function ri(t){return Ve(t)?function(t){return t.match(Yt)||[]}(t):function(t){return t.split("")}(t)}function hi(t){for(var e=t.length;e--&&st.test(t.charAt(e)););return e}var ai=Re({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),oi=function t(e){var i,n=(e=null==e?re:oi.defaults(re.Object(),e,oi.pick(re,$t))).Array,st=e.Date,At=e.Error,Ct=e.Function,bt=e.Math,St=e.Object,kt=e.RegExp,Tt=e.String,_t=e.TypeError,It=n.prototype,qt=Ct.prototype,Bt=St.prototype,jt=e["__core-js_shared__"],Et=qt.toString,Nt=Bt.hasOwnProperty,zt=0,Mt=(i=/[^.]+$/.exec(jt&&jt.keys&&jt.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",Lt=Bt.toString,Gt=Et.call(St),Rt=re._,Ht=kt("^"+Et.call(Nt).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pt=oe?e.Buffer:s,Wt=e.Symbol,Dt=e.Uint8Array,Ft=Pt?Pt.allocUnsafe:s,Yt=ti(St.getPrototypeOf,St),Qt=St.create,te=Bt.propertyIsEnumerable,ne=It.splice,se=Wt?Wt.isConcatSpreadable:s,he=Wt?Wt.iterator:s,ae=Wt?Wt.toStringTag:s,ue=function(){try{var t=ur(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),ce=e.clearTimeout!==re.clearTimeout&&e.clearTimeout,Be=st&&st.now!==re.Date.now&&st.now,Re=e.setTimeout!==re.setTimeout&&e.setTimeout,ui=bt.ceil,ci=bt.floor,li=St.getOwnPropertySymbols,di=Pt?Pt.isBuffer:s,fi=e.isFinite,pi=It.join,gi=ti(St.keys,St),mi=bt.max,xi=bt.min,wi=st.now,vi=e.parseInt,yi=bt.random,Ai=It.reverse,Ci=ur(e,"DataView"),bi=ur(e,"Map"),Si=ur(e,"Promise"),ki=ur(e,"Set"),Ti=ur(e,"WeakMap"),_i=ur(St,"create"),Ii=Ti&&new Ti,qi={},Bi=Rr(Ci),ji=Rr(bi),Ei=Rr(Si),Ni=Rr(ki),zi=Rr(Ti),Mi=Wt?Wt.prototype:s,Li=Mi?Mi.valueOf:s,Gi=Mi?Mi.toString:s;function Ri(t){if(ea(t)&&!Oh(t)&&!(t instanceof Di)){if(t instanceof Wi)return t;if(Nt.call(t,"__wrapped__"))return Hr(t)}return new Wi(t)}var Hi=function(){function t(){}return function(e){if(!ta(e))return{};if(Qt)return Qt(e);t.prototype=e;var i=new t;return t.prototype=s,i}}();function Pi(){}function Wi(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=s}function Di(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=f,this.__views__=[]}function Fi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Oi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Ui(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Yi(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Ui;++e<i;)this.add(t[e])}function Xi(t){var e=this.__data__=new Oi(t);this.size=e.size}function Qi(t,e){var i=Oh(t),n=!i&&Fh(t),s=!i&&!n&&Qh(t),r=!i&&!n&&!s&&ua(t),h=i||n||s||r,a=h?We(t.length,Tt):[],o=a.length;for(var u in t)!e&&!Nt.call(t,u)||h&&("length"==u||s&&("offset"==u||"parent"==u)||r&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||mr(u,o))||a.push(u);return a}function Ki(t){var e=t.length;return e?t[Yn(0,e-1)]:s}function $i(t,e){return Nr(_s(t),hn(e,0,t.length))}function Ji(t){return Nr(_s(t))}function Vi(t,e,i){(i!==s&&!Ph(t[e],i)||i===s&&!(e in t))&&sn(t,e,i)}function Zi(t,e,i){var n=t[e];Nt.call(t,e)&&Ph(n,i)&&(i!==s||e in t)||sn(t,e,i)}function tn(t,e){for(var i=t.length;i--;)if(Ph(t[i][0],e))return i;return-1}function en(t,e,i,n){return ln(t,(function(t,s,r){e(n,t,i(t),r)})),n}function nn(t,e){return t&&Is(e,ja(e),t)}function sn(t,e,i){"__proto__"==e&&ue?ue(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function rn(t,e){for(var i=-1,r=e.length,h=n(r),a=null==t;++i<r;)h[i]=a?s:Ta(t,e[i]);return h}function hn(t,e,i){return t==t&&(i!==s&&(t=t<=i?t:i),e!==s&&(t=t>=e?t:e)),t}function an(t,e,i,n,r,h){var a,o=1&e,u=2&e,c=4&e;if(i&&(a=r?i(t,n,r,h):i(t)),a!==s)return a;if(!ta(t))return t;var l=Oh(t);if(l){if(a=function(t){var e=t.length,i=new t.constructor(e);return e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(i.index=t.index,i.input=t.input),i}(t),!o)return _s(t,a)}else{var d=dr(t),f=d==y||d==A;if(Qh(t))return As(t,o);if(d==S||d==g||f&&!r){if(a=u||f?{}:pr(t),!o)return u?function(t,e){return Is(t,lr(t),e)}(t,function(t,e){return t&&Is(e,Ea(e),t)}(a,t)):function(t,e){return Is(t,cr(t),e)}(t,nn(a,t))}else{if(!Zt[d])return r?t:{};a=function(t,e,i){var n,s=t.constructor;switch(e){case j:return Cs(t);case x:case w:return new s(+t);case E:return function(t,e){var i=e?Cs(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case N:case z:case M:case L:case G:case R:case H:case P:case W:return bs(t,i);case C:return new s;case b:case I:return new s(t);case T:return function(t){var e=new t.constructor(t.source,dt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case _:return new s;case q:return n=t,Li?St(Li.call(n)):{}}}(t,d,o)}}h||(h=new Xi);var p=h.get(t);if(p)return p;h.set(t,a),ha(t)?t.forEach((function(n){a.add(an(n,e,i,n,t,h))})):ia(t)&&t.forEach((function(n,s){a.set(s,an(n,e,i,s,t,h))}));var m=l?s:(c?u?ir:er:u?Ea:ja)(t);return ve(m||t,(function(n,s){m&&(n=t[s=n]),Zi(a,s,an(n,e,i,s,t,h))})),a}function on(t,e,i){var n=i.length;if(null==t)return!n;for(t=St(t);n--;){var r=i[n],h=e[r],a=t[r];if(a===s&&!(r in t)||!h(a))return!1}return!0}function un(t,e,i){if("function"!=typeof t)throw new _t(r);return qr((function(){t.apply(s,i)}),e)}function cn(t,e,i,n){var s=-1,r=be,h=!0,a=t.length,o=[],u=e.length;if(!a)return o;i&&(e=ke(e,Fe(i))),n?(r=Se,h=!1):e.length>=200&&(r=Ue,h=!1,e=new Yi(e));t:for(;++s<a;){var c=t[s],l=null==i?c:i(c);if(c=n||0!==c?c:0,h&&l==l){for(var d=u;d--;)if(e[d]===l)continue t;o.push(c)}else r(e,l,n)||o.push(c)}return o}Ri.templateSettings={escape:K,evaluate:$,interpolate:J,variable:"",imports:{_:Ri}},Ri.prototype=Pi.prototype,Ri.prototype.constructor=Ri,Wi.prototype=Hi(Pi.prototype),Wi.prototype.constructor=Wi,Di.prototype=Hi(Pi.prototype),Di.prototype.constructor=Di,Fi.prototype.clear=function(){this.__data__=_i?_i(null):{},this.size=0},Fi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Fi.prototype.get=function(t){var e=this.__data__;if(_i){var i=e[t];return i===h?s:i}return Nt.call(e,t)?e[t]:s},Fi.prototype.has=function(t){var e=this.__data__;return _i?e[t]!==s:Nt.call(e,t)},Fi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=_i&&e===s?h:e,this},Oi.prototype.clear=function(){this.__data__=[],this.size=0},Oi.prototype.delete=function(t){var e=this.__data__,i=tn(e,t);return!(i<0||(i==e.length-1?e.pop():ne.call(e,i,1),--this.size,0))},Oi.prototype.get=function(t){var e=this.__data__,i=tn(e,t);return i<0?s:e[i][1]},Oi.prototype.has=function(t){return tn(this.__data__,t)>-1},Oi.prototype.set=function(t,e){var i=this.__data__,n=tn(i,t);return n<0?(++this.size,i.push([t,e])):i[n][1]=e,this},Ui.prototype.clear=function(){this.size=0,this.__data__={hash:new Fi,map:new(bi||Oi),string:new Fi}},Ui.prototype.delete=function(t){var e=ar(this,t).delete(t);return this.size-=e?1:0,e},Ui.prototype.get=function(t){return ar(this,t).get(t)},Ui.prototype.has=function(t){return ar(this,t).has(t)},Ui.prototype.set=function(t,e){var i=ar(this,t),n=i.size;return i.set(t,e),this.size+=i.size==n?0:1,this},Yi.prototype.add=Yi.prototype.push=function(t){return this.__data__.set(t,h),this},Yi.prototype.has=function(t){return this.__data__.has(t)},Xi.prototype.clear=function(){this.__data__=new Oi,this.size=0},Xi.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},Xi.prototype.get=function(t){return this.__data__.get(t)},Xi.prototype.has=function(t){return this.__data__.has(t)},Xi.prototype.set=function(t,e){var i=this.__data__;if(i instanceof Oi){var n=i.__data__;if(!bi||n.length<199)return n.push([t,e]),this.size=++i.size,this;i=this.__data__=new Ui(n)}return i.set(t,e),this.size=i.size,this};var ln=js(vn),dn=js(yn,!0);function fn(t,e){var i=!0;return ln(t,(function(t,n,s){return i=!!e(t,n,s)})),i}function pn(t,e,i){for(var n=-1,r=t.length;++n<r;){var h=t[n],a=e(h);if(null!=a&&(o===s?a==a&&!oa(a):i(a,o)))var o=a,u=h}return u}function gn(t,e){var i=[];return ln(t,(function(t,n,s){e(t,n,s)&&i.push(t)})),i}function mn(t,e,i,n,s){var r=-1,h=t.length;for(i||(i=gr),s||(s=[]);++r<h;){var a=t[r];e>0&&i(a)?e>1?mn(a,e-1,i,n,s):Te(s,a):n||(s[s.length]=a)}return s}var xn=Es(),wn=Es(!0);function vn(t,e){return t&&xn(t,e,ja)}function yn(t,e){return t&&wn(t,e,ja)}function An(t,e){return Ce(e,(function(e){return Jh(t[e])}))}function Cn(t,e){for(var i=0,n=(e=xs(e,t)).length;null!=t&&i<n;)t=t[Gr(e[i++])];return i&&i==n?t:s}function bn(t,e,i){var n=e(t);return Oh(t)?n:Te(n,i(t))}function Sn(t){return null==t?t===s?"[object Undefined]":"[object Null]":ae&&ae in St(t)?function(t){var e=Nt.call(t,ae),i=t[ae];try{t[ae]=s;var n=!0}catch(t){}var r=Lt.call(t);return n&&(e?t[ae]=i:delete t[ae]),r}(t):function(t){return Lt.call(t)}(t)}function kn(t,e){return t>e}function Tn(t,e){return null!=t&&Nt.call(t,e)}function _n(t,e){return null!=t&&e in St(t)}function In(t,e,i){for(var r=i?Se:be,h=t[0].length,a=t.length,o=a,u=n(a),c=1/0,l=[];o--;){var d=t[o];o&&e&&(d=ke(d,Fe(e))),c=xi(d.length,c),u[o]=!i&&(e||h>=120&&d.length>=120)?new Yi(o&&d):s}d=t[0];var f=-1,p=u[0];t:for(;++f<h&&l.length<c;){var g=d[f],m=e?e(g):g;if(g=i||0!==g?g:0,!(p?Ue(p,m):r(l,m,i))){for(o=a;--o;){var x=u[o];if(!(x?Ue(x,m):r(t[o],m,i)))continue t}p&&p.push(m),l.push(g)}}return l}function qn(t,e,i){var n=null==(t=kr(t,e=xs(e,t)))?t:t[Gr($r(e))];return null==n?s:xe(n,t,i)}function Bn(t){return ea(t)&&Sn(t)==g}function jn(t,e,i,n,r){return t===e||(null==t||null==e||!ea(t)&&!ea(e)?t!=t&&e!=e:function(t,e,i,n,r,h){var a=Oh(t),o=Oh(e),u=a?m:dr(t),c=o?m:dr(e),l=(u=u==g?S:u)==S,d=(c=c==g?S:c)==S,f=u==c;if(f&&Qh(t)){if(!Qh(e))return!1;a=!0,l=!1}if(f&&!l)return h||(h=new Xi),a||ua(t)?Zs(t,e,i,n,r,h):function(t,e,i,n,s,r,h){switch(i){case E:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case j:return!(t.byteLength!=e.byteLength||!r(new Dt(t),new Dt(e)));case x:case w:case b:return Ph(+t,+e);case v:return t.name==e.name&&t.message==e.message;case T:case I:return t==e+"";case C:var a=Ze;case _:var o=1&n;if(a||(a=ii),t.size!=e.size&&!o)return!1;var u=h.get(t);if(u)return u==e;n|=2,h.set(t,e);var c=Zs(a(t),a(e),n,s,r,h);return h.delete(t),c;case q:if(Li)return Li.call(t)==Li.call(e)}return!1}(t,e,u,i,n,r,h);if(!(1&i)){var p=l&&Nt.call(t,"__wrapped__"),y=d&&Nt.call(e,"__wrapped__");if(p||y){var A=p?t.value():t,k=y?e.value():e;return h||(h=new Xi),r(A,k,i,n,h)}}return!!f&&(h||(h=new Xi),function(t,e,i,n,r,h){var a=1&i,o=er(t),u=o.length;if(u!=er(e).length&&!a)return!1;for(var c=u;c--;){var l=o[c];if(!(a?l in e:Nt.call(e,l)))return!1}var d=h.get(t),f=h.get(e);if(d&&f)return d==e&&f==t;var p=!0;h.set(t,e),h.set(e,t);for(var g=a;++c<u;){var m=t[l=o[c]],x=e[l];if(n)var w=a?n(x,m,l,e,t,h):n(m,x,l,t,e,h);if(!(w===s?m===x||r(m,x,i,n,h):w)){p=!1;break}g||(g="constructor"==l)}if(p&&!g){var v=t.constructor,y=e.constructor;v==y||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y||(p=!1)}return h.delete(t),h.delete(e),p}(t,e,i,n,r,h))}(t,e,i,n,jn,r))}function En(t,e,i,n){var r=i.length,h=r,a=!n;if(null==t)return!h;for(t=St(t);r--;){var o=i[r];if(a&&o[2]?o[1]!==t[o[0]]:!(o[0]in t))return!1}for(;++r<h;){var u=(o=i[r])[0],c=t[u],l=o[1];if(a&&o[2]){if(c===s&&!(u in t))return!1}else{var d=new Xi;if(n)var f=n(c,l,u,t,e,d);if(!(f===s?jn(l,c,3,n,d):f))return!1}}return!0}function Nn(t){return!(!ta(t)||(e=t,Mt&&Mt in e))&&(Jh(t)?Ht:gt).test(Rr(t));var e}function zn(t){return"function"==typeof t?t:null==t?no:"object"==typeof t?Oh(t)?Hn(t[0],t[1]):Rn(t):fo(t)}function Mn(t){if(!Ar(t))return gi(t);var e=[];for(var i in St(t))Nt.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Ln(t,e){return t<e}function Gn(t,e){var i=-1,s=Yh(t)?n(t.length):[];return ln(t,(function(t,n,r){s[++i]=e(t,n,r)})),s}function Rn(t){var e=or(t);return 1==e.length&&e[0][2]?br(e[0][0],e[0][1]):function(i){return i===t||En(i,t,e)}}function Hn(t,e){return wr(t)&&Cr(e)?br(Gr(t),e):function(i){var n=Ta(i,t);return n===s&&n===e?_a(i,t):jn(e,n,3)}}function Pn(t,e,i,n,r){t!==e&&xn(e,(function(h,a){if(r||(r=new Xi),ta(h))!function(t,e,i,n,r,h,a){var o=_r(t,i),u=_r(e,i),c=a.get(u);if(c)Vi(t,i,c);else{var l=h?h(o,u,i+"",t,e,a):s,d=l===s;if(d){var f=Oh(u),p=!f&&Qh(u),g=!f&&!p&&ua(u);l=u,f||p||g?Oh(o)?l=o:Xh(o)?l=_s(o):p?(d=!1,l=As(u,!0)):g?(d=!1,l=bs(u,!0)):l=[]:sa(u)||Fh(u)?(l=o,Fh(o)?l=xa(o):ta(o)&&!Jh(o)||(l=pr(u))):d=!1}d&&(a.set(u,l),r(l,u,n,h,a),a.delete(u)),Vi(t,i,l)}}(t,e,a,i,Pn,n,r);else{var o=n?n(_r(t,a),h,a+"",t,e,r):s;o===s&&(o=h),Vi(t,a,o)}}),Ea)}function Wn(t,e){var i=t.length;if(i)return mr(e+=e<0?i:0,i)?t[e]:s}function Dn(t,e,i){e=e.length?ke(e,(function(t){return Oh(t)?function(e){return Cn(e,1===t.length?t[0]:t)}:t})):[no];var n=-1;e=ke(e,Fe(hr()));var s=Gn(t,(function(t,i,s){var r=ke(e,(function(e){return e(t)}));return{criteria:r,index:++n,value:t}}));return function(t,e){var n=t.length;for(t.sort((function(t,e){return function(t,e,i){for(var n=-1,s=t.criteria,r=e.criteria,h=s.length,a=i.length;++n<h;){var o=Ss(s[n],r[n]);if(o)return n>=a?o:o*("desc"==i[n]?-1:1)}return t.index-e.index}(t,e,i)}));n--;)t[n]=t[n].value;return t}(s)}function Fn(t,e,i){for(var n=-1,s=e.length,r={};++n<s;){var h=e[n],a=Cn(t,h);i(a,h)&&Jn(r,xs(h,t),a)}return r}function On(t,e,i,n){var s=n?ze:Ne,r=-1,h=e.length,a=t;for(t===e&&(e=_s(e)),i&&(a=ke(t,Fe(i)));++r<h;)for(var o=0,u=e[r],c=i?i(u):u;(o=s(a,c,o,n))>-1;)a!==t&&ne.call(a,o,1),ne.call(t,o,1);return t}function Un(t,e){for(var i=t?e.length:0,n=i-1;i--;){var s=e[i];if(i==n||s!==r){var r=s;mr(s)?ne.call(t,s,1):us(t,s)}}return t}function Yn(t,e){return t+ci(yi()*(e-t+1))}function Xn(t,e){var i="";if(!t||e<1||e>l)return i;do{e%2&&(i+=t),(e=ci(e/2))&&(t+=t)}while(e);return i}function Qn(t,e){return Br(Sr(t,e,no),t+"")}function Kn(t){return Ki(Pa(t))}function $n(t,e){var i=Pa(t);return Nr(i,hn(e,0,i.length))}function Jn(t,e,i,n){if(!ta(t))return t;for(var r=-1,h=(e=xs(e,t)).length,a=h-1,o=t;null!=o&&++r<h;){var u=Gr(e[r]),c=i;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(r!=a){var l=o[u];(c=n?n(l,u,o):s)===s&&(c=ta(l)?l:mr(e[r+1])?[]:{})}Zi(o,u,c),o=o[u]}return t}var Vn=Ii?function(t,e){return Ii.set(t,e),t}:no,Zn=ue?function(t,e){return ue(t,"toString",{configurable:!0,enumerable:!1,value:to(e),writable:!0})}:no;function ts(t){return Nr(Pa(t))}function es(t,e,i){var s=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(i=i>r?r:i)<0&&(i+=r),r=e>i?0:i-e>>>0,e>>>=0;for(var h=n(r);++s<r;)h[s]=t[s+e];return h}function is(t,e){var i;return ln(t,(function(t,n,s){return!(i=e(t,n,s))})),!!i}function ns(t,e,i){var n=0,s=null==t?n:t.length;if("number"==typeof e&&e==e&&s<=2147483647){for(;n<s;){var r=n+s>>>1,h=t[r];null!==h&&!oa(h)&&(i?h<=e:h<e)?n=r+1:s=r}return s}return ss(t,e,no,i)}function ss(t,e,i,n){var r=0,h=null==t?0:t.length;if(0===h)return 0;for(var a=(e=i(e))!=e,o=null===e,u=oa(e),c=e===s;r<h;){var l=ci((r+h)/2),d=i(t[l]),f=d!==s,p=null===d,g=d==d,m=oa(d);if(a)var x=n||g;else x=c?g&&(n||f):o?g&&f&&(n||!p):u?g&&f&&!p&&(n||!m):!p&&!m&&(n?d<=e:d<e);x?r=l+1:h=l}return xi(h,4294967294)}function rs(t,e){for(var i=-1,n=t.length,s=0,r=[];++i<n;){var h=t[i],a=e?e(h):h;if(!i||!Ph(a,o)){var o=a;r[s++]=0===h?0:h}}return r}function hs(t){return"number"==typeof t?t:oa(t)?d:+t}function as(t){if("string"==typeof t)return t;if(Oh(t))return ke(t,as)+"";if(oa(t))return Gi?Gi.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function os(t,e,i){var n=-1,s=be,r=t.length,h=!0,a=[],o=a;if(i)h=!1,s=Se;else if(r>=200){var u=e?null:Xs(t);if(u)return ii(u);h=!1,s=Ue,o=new Yi}else o=e?[]:a;t:for(;++n<r;){var c=t[n],l=e?e(c):c;if(c=i||0!==c?c:0,h&&l==l){for(var d=o.length;d--;)if(o[d]===l)continue t;e&&o.push(l),a.push(c)}else s(o,l,i)||(o!==a&&o.push(l),a.push(c))}return a}function us(t,e){return null==(t=kr(t,e=xs(e,t)))||delete t[Gr($r(e))]}function cs(t,e,i,n){return Jn(t,e,i(Cn(t,e)),n)}function ls(t,e,i,n){for(var s=t.length,r=n?s:-1;(n?r--:++r<s)&&e(t[r],r,t););return i?es(t,n?0:r,n?r+1:s):es(t,n?r+1:0,n?s:r)}function ds(t,e){var i=t;return i instanceof Di&&(i=i.value()),_e(e,(function(t,e){return e.func.apply(e.thisArg,Te([t],e.args))}),i)}function fs(t,e,i){var s=t.length;if(s<2)return s?os(t[0]):[];for(var r=-1,h=n(s);++r<s;)for(var a=t[r],o=-1;++o<s;)o!=r&&(h[r]=cn(h[r]||a,t[o],e,i));return os(mn(h,1),e,i)}function ps(t,e,i){for(var n=-1,r=t.length,h=e.length,a={};++n<r;){var o=n<h?e[n]:s;i(a,t[n],o)}return a}function gs(t){return Xh(t)?t:[]}function ms(t){return"function"==typeof t?t:no}function xs(t,e){return Oh(t)?t:wr(t,e)?[t]:Lr(wa(t))}var ws=Qn;function vs(t,e,i){var n=t.length;return i=i===s?n:i,!e&&i>=n?t:es(t,e,i)}var ys=ce||function(t){return re.clearTimeout(t)};function As(t,e){if(e)return t.slice();var i=t.length,n=Ft?Ft(i):new t.constructor(i);return t.copy(n),n}function Cs(t){var e=new t.constructor(t.byteLength);return new Dt(e).set(new Dt(t)),e}function bs(t,e){var i=e?Cs(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function Ss(t,e){if(t!==e){var i=t!==s,n=null===t,r=t==t,h=oa(t),a=e!==s,o=null===e,u=e==e,c=oa(e);if(!o&&!c&&!h&&t>e||h&&a&&u&&!o&&!c||n&&a&&u||!i&&u||!r)return 1;if(!n&&!h&&!c&&t<e||c&&i&&r&&!n&&!h||o&&i&&r||!a&&r||!u)return-1}return 0}function ks(t,e,i,s){for(var r=-1,h=t.length,a=i.length,o=-1,u=e.length,c=mi(h-a,0),l=n(u+c),d=!s;++o<u;)l[o]=e[o];for(;++r<a;)(d||r<h)&&(l[i[r]]=t[r]);for(;c--;)l[o++]=t[r++];return l}function Ts(t,e,i,s){for(var r=-1,h=t.length,a=-1,o=i.length,u=-1,c=e.length,l=mi(h-o,0),d=n(l+c),f=!s;++r<l;)d[r]=t[r];for(var p=r;++u<c;)d[p+u]=e[u];for(;++a<o;)(f||r<h)&&(d[p+i[a]]=t[r++]);return d}function _s(t,e){var i=-1,s=t.length;for(e||(e=n(s));++i<s;)e[i]=t[i];return e}function Is(t,e,i,n){var r=!i;i||(i={});for(var h=-1,a=e.length;++h<a;){var o=e[h],u=n?n(i[o],t[o],o,i,t):s;u===s&&(u=t[o]),r?sn(i,o,u):Zi(i,o,u)}return i}function qs(t,e){return function(i,n){var s=Oh(i)?we:en,r=e?e():{};return s(i,t,hr(n,2),r)}}function Bs(t){return Qn((function(e,i){var n=-1,r=i.length,h=r>1?i[r-1]:s,a=r>2?i[2]:s;for(h=t.length>3&&"function"==typeof h?(r--,h):s,a&&xr(i[0],i[1],a)&&(h=r<3?s:h,r=1),e=St(e);++n<r;){var o=i[n];o&&t(e,o,n,h)}return e}))}function js(t,e){return function(i,n){if(null==i)return i;if(!Yh(i))return t(i,n);for(var s=i.length,r=e?s:-1,h=St(i);(e?r--:++r<s)&&!1!==n(h[r],r,h););return i}}function Es(t){return function(e,i,n){for(var s=-1,r=St(e),h=n(e),a=h.length;a--;){var o=h[t?a:++s];if(!1===i(r[o],o,r))break}return e}}function Ns(t){return function(e){var i=Ve(e=wa(e))?ri(e):s,n=i?i[0]:e.charAt(0),r=i?vs(i,1).join(""):e.slice(1);return n[t]()+r}}function zs(t){return function(e){return _e(Ja(Fa(e).replace(Ot,"")),t,"")}}function Ms(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Hi(t.prototype),n=t.apply(i,e);return ta(n)?n:i}}function Ls(t){return function(e,i,n){var r=St(e);if(!Yh(e)){var h=hr(i,3);e=ja(e),i=function(t){return h(r[t],t,r)}}var a=t(e,i,n);return a>-1?r[h?e[a]:a]:s}}function Gs(t){return tr((function(e){var i=e.length,n=i,h=Wi.prototype.thru;for(t&&e.reverse();n--;){var a=e[n];if("function"!=typeof a)throw new _t(r);if(h&&!o&&"wrapper"==sr(a))var o=new Wi([],!0)}for(n=o?n:i;++n<i;){var u=sr(a=e[n]),c="wrapper"==u?nr(a):s;o=c&&vr(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?o[sr(c[0])].apply(o,c[3]):1==a.length&&vr(a)?o[u]():o.thru(a)}return function(){var t=arguments,n=t[0];if(o&&1==t.length&&Oh(n))return o.plant(n).value();for(var s=0,r=i?e[s].apply(this,t):n;++s<i;)r=e[s].call(this,r);return r}}))}function Rs(t,e,i,r,h,a,o,c,l,d){var f=e&u,p=1&e,g=2&e,m=24&e,x=512&e,w=g?s:Ms(t);return function s(){for(var u=arguments.length,v=n(u),y=u;y--;)v[y]=arguments[y];if(m)var A=rr(s),C=Qe(v,A);if(r&&(v=ks(v,r,h,m)),a&&(v=Ts(v,a,o,m)),u-=C,m&&u<d){var b=ei(v,A);return Us(t,e,Rs,s.placeholder,i,v,b,c,l,d-u)}var S=p?i:this,k=g?S[t]:t;return u=v.length,c?v=Tr(v,c):x&&u>1&&v.reverse(),f&&l<u&&(v.length=l),this&&this!==re&&this instanceof s&&(k=w||Ms(k)),k.apply(S,v)}}function Hs(t,e){return function(i,n){return function(t,e,i,n){return vn(t,(function(t,s,r){e(n,i(t),s,r)})),n}(i,t,e(n),{})}}function Ps(t,e){return function(i,n){var r;if(i===s&&n===s)return e;if(i!==s&&(r=i),n!==s){if(r===s)return n;"string"==typeof i||"string"==typeof n?(i=as(i),n=as(n)):(i=hs(i),n=hs(n)),r=t(i,n)}return r}}function Ws(t){return tr((function(e){return e=ke(e,Fe(hr())),Qn((function(i){var n=this;return t(e,(function(t){return xe(t,n,i)}))}))}))}function Ds(t,e){var i=(e=e===s?" ":as(e)).length;if(i<2)return i?Xn(e,t):e;var n=Xn(e,ui(t/si(e)));return Ve(e)?vs(ri(n),0,t).join(""):n.slice(0,t)}function Fs(t){return function(e,i,r){return r&&"number"!=typeof r&&xr(e,i,r)&&(i=r=s),e=fa(e),i===s?(i=e,e=0):i=fa(i),function(t,e,i,s){for(var r=-1,h=mi(ui((e-t)/(i||1)),0),a=n(h);h--;)a[s?h:++r]=t,t+=i;return a}(e,i,r=r===s?e<i?1:-1:fa(r),t)}}function Os(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=ma(e),i=ma(i)),t(e,i)}}function Us(t,e,i,n,r,h,a,u,c,l){var d=8&e;e|=d?o:64,4&(e&=~(d?64:o))||(e&=-4);var f=[t,e,r,d?h:s,d?a:s,d?s:h,d?s:a,u,c,l],p=i.apply(s,f);return vr(t)&&Ir(p,f),p.placeholder=n,jr(p,t,e)}function Ys(t){var e=bt[t];return function(t,i){if(t=ma(t),(i=null==i?0:xi(pa(i),292))&&fi(t)){var n=(wa(t)+"e").split("e");return+((n=(wa(e(n[0]+"e"+(+n[1]+i)))+"e").split("e"))[0]+"e"+(+n[1]-i))}return e(t)}}var Xs=ki&&1/ii(new ki([,-0]))[1]==c?function(t){return new ki(t)}:oo;function Qs(t){return function(e){var i=dr(e);return i==C?Ze(e):i==_?ni(e):function(t,e){return ke(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ks(t,e,i,h,c,l,d,f){var p=2&e;if(!p&&"function"!=typeof t)throw new _t(r);var g=h?h.length:0;if(g||(e&=-97,h=c=s),d=d===s?d:mi(pa(d),0),f=f===s?f:pa(f),g-=c?c.length:0,64&e){var m=h,x=c;h=c=s}var w=p?s:nr(t),v=[t,e,i,h,c,m,x,l,d,f];if(w&&function(t,e){var i=t[1],n=e[1],s=i|n,r=s<131,h=n==u&&8==i||n==u&&256==i&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==i;if(!r&&!h)return t;1&n&&(t[2]=e[2],s|=1&i?0:4);var o=e[3];if(o){var c=t[3];t[3]=c?ks(c,o,e[4]):o,t[4]=c?ei(t[3],a):e[4]}(o=e[5])&&(c=t[5],t[5]=c?Ts(c,o,e[6]):o,t[6]=c?ei(t[5],a):e[6]),(o=e[7])&&(t[7]=o),n&u&&(t[8]=null==t[8]?e[8]:xi(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=s}(v,w),t=v[0],e=v[1],i=v[2],h=v[3],c=v[4],!(f=v[9]=v[9]===s?p?0:t.length:mi(v[9]-g,0))&&24&e&&(e&=-25),e&&1!=e)y=8==e||16==e?function(t,e,i){var r=Ms(t);return function h(){for(var a=arguments.length,o=n(a),u=a,c=rr(h);u--;)o[u]=arguments[u];var l=a<3&&o[0]!==c&&o[a-1]!==c?[]:ei(o,c);return(a-=l.length)<i?Us(t,e,Rs,h.placeholder,s,o,l,s,s,i-a):xe(this&&this!==re&&this instanceof h?r:t,this,o)}}(t,e,f):e!=o&&33!=e||c.length?Rs.apply(s,v):function(t,e,i,s){var r=1&e,h=Ms(t);return function e(){for(var a=-1,o=arguments.length,u=-1,c=s.length,l=n(c+o),d=this&&this!==re&&this instanceof e?h:t;++u<c;)l[u]=s[u];for(;o--;)l[u++]=arguments[++a];return xe(d,r?i:this,l)}}(t,e,i,h);else var y=function(t,e,i){var n=1&e,s=Ms(t);return function e(){return(this&&this!==re&&this instanceof e?s:t).apply(n?i:this,arguments)}}(t,e,i);return jr((w?Vn:Ir)(y,v),t,e)}function $s(t,e,i,n){return t===s||Ph(t,Bt[i])&&!Nt.call(n,i)?e:t}function Js(t,e,i,n,r,h){return ta(t)&&ta(e)&&(h.set(e,t),Pn(t,e,s,Js,h),h.delete(e)),t}function Vs(t){return sa(t)?s:t}function Zs(t,e,i,n,r,h){var a=1&i,o=t.length,u=e.length;if(o!=u&&!(a&&u>o))return!1;var c=h.get(t),l=h.get(e);if(c&&l)return c==e&&l==t;var d=-1,f=!0,p=2&i?new Yi:s;for(h.set(t,e),h.set(e,t);++d<o;){var g=t[d],m=e[d];if(n)var x=a?n(m,g,d,e,t,h):n(g,m,d,t,e,h);if(x!==s){if(x)continue;f=!1;break}if(p){if(!qe(e,(function(t,e){if(!Ue(p,e)&&(g===t||r(g,t,i,n,h)))return p.push(e)}))){f=!1;break}}else if(g!==m&&!r(g,m,i,n,h)){f=!1;break}}return h.delete(t),h.delete(e),f}function tr(t){return Br(Sr(t,s,Ur),t+"")}function er(t){return bn(t,ja,cr)}function ir(t){return bn(t,Ea,lr)}var nr=Ii?function(t){return Ii.get(t)}:oo;function sr(t){for(var e=t.name+"",i=qi[e],n=Nt.call(qi,e)?i.length:0;n--;){var s=i[n],r=s.func;if(null==r||r==t)return s.name}return e}function rr(t){return(Nt.call(Ri,"placeholder")?Ri:t).placeholder}function hr(){var t=Ri.iteratee||so;return t=t===so?zn:t,arguments.length?t(arguments[0],arguments[1]):t}function ar(t,e){var i,n,s=t.__data__;return("string"==(n=typeof(i=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==i:null===i)?s["string"==typeof e?"string":"hash"]:s.map}function or(t){for(var e=ja(t),i=e.length;i--;){var n=e[i],s=t[n];e[i]=[n,s,Cr(s)]}return e}function ur(t,e){var i=function(t,e){return null==t?s:t[e]}(t,e);return Nn(i)?i:s}var cr=li?function(t){return null==t?[]:(t=St(t),Ce(li(t),(function(e){return te.call(t,e)})))}:mo,lr=li?function(t){for(var e=[];t;)Te(e,cr(t)),t=Yt(t);return e}:mo,dr=Sn;function fr(t,e,i){for(var n=-1,s=(e=xs(e,t)).length,r=!1;++n<s;){var h=Gr(e[n]);if(!(r=null!=t&&i(t,h)))break;t=t[h]}return r||++n!=s?r:!!(s=null==t?0:t.length)&&Zh(s)&&mr(h,s)&&(Oh(t)||Fh(t))}function pr(t){return"function"!=typeof t.constructor||Ar(t)?{}:Hi(Yt(t))}function gr(t){return Oh(t)||Fh(t)||!!(se&&t&&t[se])}function mr(t,e){var i=typeof t;return!!(e=null==e?l:e)&&("number"==i||"symbol"!=i&&xt.test(t))&&t>-1&&t%1==0&&t<e}function xr(t,e,i){if(!ta(i))return!1;var n=typeof e;return!!("number"==n?Yh(i)&&mr(e,i.length):"string"==n&&e in i)&&Ph(i[e],t)}function wr(t,e){if(Oh(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!oa(t))||Z.test(t)||!V.test(t)||null!=e&&t in St(e)}function vr(t){var e=sr(t),i=Ri[e];if("function"!=typeof i||!(e in Di.prototype))return!1;if(t===i)return!0;var n=nr(i);return!!n&&t===n[0]}(Ci&&dr(new Ci(new ArrayBuffer(1)))!=E||bi&&dr(new bi)!=C||Si&&dr(Si.resolve())!=k||ki&&dr(new ki)!=_||Ti&&dr(new Ti)!=B)&&(dr=function(t){var e=Sn(t),i=e==S?t.constructor:s,n=i?Rr(i):"";if(n)switch(n){case Bi:return E;case ji:return C;case Ei:return k;case Ni:return _;case zi:return B}return e});var yr=jt?Jh:xo;function Ar(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Bt)}function Cr(t){return t==t&&!ta(t)}function br(t,e){return function(i){return null!=i&&i[t]===e&&(e!==s||t in St(i))}}function Sr(t,e,i){return e=mi(e===s?t.length-1:e,0),function(){for(var s=arguments,r=-1,h=mi(s.length-e,0),a=n(h);++r<h;)a[r]=s[e+r];r=-1;for(var o=n(e+1);++r<e;)o[r]=s[r];return o[e]=i(a),xe(t,this,o)}}function kr(t,e){return e.length<2?t:Cn(t,es(e,0,-1))}function Tr(t,e){for(var i=t.length,n=xi(e.length,i),r=_s(t);n--;){var h=e[n];t[n]=mr(h,i)?r[h]:s}return t}function _r(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Ir=Er(Vn),qr=Re||function(t,e){return re.setTimeout(t,e)},Br=Er(Zn);function jr(t,e,i){var n=e+"";return Br(t,function(t,e){var i=e.length;if(!i)return t;var n=i-1;return e[n]=(i>1?"& ":"")+e[n],e=e.join(i>2?", ":" "),t.replace(rt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return ve(p,(function(i){var n="_."+i[0];e&i[1]&&!be(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(ht);return e?e[1].split(at):[]}(n),i)))}function Er(t){var e=0,i=0;return function(){var n=wi(),r=16-(n-i);if(i=n,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(s,arguments)}}function Nr(t,e){var i=-1,n=t.length,r=n-1;for(e=e===s?n:e;++i<e;){var h=Yn(i,r),a=t[h];t[h]=t[i],t[i]=a}return t.length=e,t}var zr,Mr,Lr=(zr=zh((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,i,n,s){e.push(n?s.replace(ct,"$1"):i||t)})),e}),(function(t){return 500===Mr.size&&Mr.clear(),t})),Mr=zr.cache,zr);function Gr(t){if("string"==typeof t||oa(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Rr(t){if(null!=t){try{return Et.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Hr(t){if(t instanceof Di)return t.clone();var e=new Wi(t.__wrapped__,t.__chain__);return e.__actions__=_s(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Pr=Qn((function(t,e){return Xh(t)?cn(t,mn(e,1,Xh,!0)):[]})),Wr=Qn((function(t,e){var i=$r(e);return Xh(i)&&(i=s),Xh(t)?cn(t,mn(e,1,Xh,!0),hr(i,2)):[]})),Dr=Qn((function(t,e){var i=$r(e);return Xh(i)&&(i=s),Xh(t)?cn(t,mn(e,1,Xh,!0),s,i):[]}));function Fr(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var s=null==i?0:pa(i);return s<0&&(s=mi(n+s,0)),Ee(t,hr(e,3),s)}function Or(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n-1;return i!==s&&(r=pa(i),r=i<0?mi(n+r,0):xi(r,n-1)),Ee(t,hr(e,3),r,!0)}function Ur(t){return null!=t&&t.length?mn(t,1):[]}function Yr(t){return t&&t.length?t[0]:s}var Xr=Qn((function(t){var e=ke(t,gs);return e.length&&e[0]===t[0]?In(e):[]})),Qr=Qn((function(t){var e=$r(t),i=ke(t,gs);return e===$r(i)?e=s:i.pop(),i.length&&i[0]===t[0]?In(i,hr(e,2)):[]})),Kr=Qn((function(t){var e=$r(t),i=ke(t,gs);return(e="function"==typeof e?e:s)&&i.pop(),i.length&&i[0]===t[0]?In(i,s,e):[]}));function $r(t){var e=null==t?0:t.length;return e?t[e-1]:s}var Jr=Qn(Vr);function Vr(t,e){return t&&t.length&&e&&e.length?On(t,e):t}var Zr=tr((function(t,e){var i=null==t?0:t.length,n=rn(t,e);return Un(t,ke(e,(function(t){return mr(t,i)?+t:t})).sort(Ss)),n}));function th(t){return null==t?t:Ai.call(t)}var eh=Qn((function(t){return os(mn(t,1,Xh,!0))})),ih=Qn((function(t){var e=$r(t);return Xh(e)&&(e=s),os(mn(t,1,Xh,!0),hr(e,2))})),nh=Qn((function(t){var e=$r(t);return e="function"==typeof e?e:s,os(mn(t,1,Xh,!0),s,e)}));function sh(t){if(!t||!t.length)return[];var e=0;return t=Ce(t,(function(t){if(Xh(t))return e=mi(t.length,e),!0})),We(e,(function(e){return ke(t,Ge(e))}))}function rh(t,e){if(!t||!t.length)return[];var i=sh(t);return null==e?i:ke(i,(function(t){return xe(e,s,t)}))}var hh=Qn((function(t,e){return Xh(t)?cn(t,e):[]})),ah=Qn((function(t){return fs(Ce(t,Xh))})),oh=Qn((function(t){var e=$r(t);return Xh(e)&&(e=s),fs(Ce(t,Xh),hr(e,2))})),uh=Qn((function(t){var e=$r(t);return e="function"==typeof e?e:s,fs(Ce(t,Xh),s,e)})),ch=Qn(sh),lh=Qn((function(t){var e=t.length,i=e>1?t[e-1]:s;return i="function"==typeof i?(t.pop(),i):s,rh(t,i)}));function dh(t){var e=Ri(t);return e.__chain__=!0,e}function fh(t,e){return e(t)}var ph=tr((function(t){var e=t.length,i=e?t[0]:0,n=this.__wrapped__,r=function(e){return rn(e,t)};return!(e>1||this.__actions__.length)&&n instanceof Di&&mr(i)?((n=n.slice(i,+i+(e?1:0))).__actions__.push({func:fh,args:[r],thisArg:s}),new Wi(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(s),t}))):this.thru(r)})),gh=qs((function(t,e,i){Nt.call(t,i)?++t[i]:sn(t,i,1)})),mh=Ls(Fr),xh=Ls(Or);function wh(t,e){return(Oh(t)?ve:ln)(t,hr(e,3))}function vh(t,e){return(Oh(t)?ye:dn)(t,hr(e,3))}var yh=qs((function(t,e,i){Nt.call(t,i)?t[i].push(e):sn(t,i,[e])})),Ah=Qn((function(t,e,i){var s=-1,r="function"==typeof e,h=Yh(t)?n(t.length):[];return ln(t,(function(t){h[++s]=r?xe(e,t,i):qn(t,e,i)})),h})),Ch=qs((function(t,e,i){sn(t,i,e)}));function bh(t,e){return(Oh(t)?ke:Gn)(t,hr(e,3))}var Sh=qs((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]})),kh=Qn((function(t,e){if(null==t)return[];var i=e.length;return i>1&&xr(t,e[0],e[1])?e=[]:i>2&&xr(e[0],e[1],e[2])&&(e=[e[0]]),Dn(t,mn(e,1),[])})),Th=Be||function(){return re.Date.now()};function _h(t,e,i){return e=i?s:e,e=t&&null==e?t.length:e,Ks(t,u,s,s,s,s,e)}function Ih(t,e){var i;if("function"!=typeof e)throw new _t(r);return t=pa(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=s),i}}var qh=Qn((function(t,e,i){var n=1;if(i.length){var s=ei(i,rr(qh));n|=o}return Ks(t,n,e,i,s)})),Bh=Qn((function(t,e,i){var n=3;if(i.length){var s=ei(i,rr(Bh));n|=o}return Ks(e,n,t,i,s)}));function jh(t,e,i){var n,h,a,o,u,c,l=0,d=!1,f=!1,p=!0;if("function"!=typeof t)throw new _t(r);function g(e){var i=n,r=h;return n=h=s,l=e,o=t.apply(r,i)}function m(t){return l=t,u=qr(w,e),d?g(t):o}function x(t){var i=t-c;return c===s||i>=e||i<0||f&&t-l>=a}function w(){var t=Th();if(x(t))return v(t);u=qr(w,function(t){var i=e-(t-c);return f?xi(i,a-(t-l)):i}(t))}function v(t){return u=s,p&&n?g(t):(n=h=s,o)}function y(){var t=Th(),i=x(t);if(n=arguments,h=this,c=t,i){if(u===s)return m(c);if(f)return ys(u),u=qr(w,e),g(c)}return u===s&&(u=qr(w,e)),o}return e=ma(e)||0,ta(i)&&(d=!!i.leading,a=(f="maxWait"in i)?mi(ma(i.maxWait)||0,e):a,p="trailing"in i?!!i.trailing:p),y.cancel=function(){u!==s&&ys(u),l=0,n=c=h=u=s},y.flush=function(){return u===s?o:v(Th())},y}var Eh=Qn((function(t,e){return un(t,1,e)})),Nh=Qn((function(t,e,i){return un(t,ma(e)||0,i)}));function zh(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new _t(r);var i=function(){var n=arguments,s=e?e.apply(this,n):n[0],r=i.cache;if(r.has(s))return r.get(s);var h=t.apply(this,n);return i.cache=r.set(s,h)||r,h};return i.cache=new(zh.Cache||Ui),i}function Mh(t){if("function"!=typeof t)throw new _t(r);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}zh.Cache=Ui;var Lh=ws((function(t,e){var i=(e=1==e.length&&Oh(e[0])?ke(e[0],Fe(hr())):ke(mn(e,1),Fe(hr()))).length;return Qn((function(n){for(var s=-1,r=xi(n.length,i);++s<r;)n[s]=e[s].call(this,n[s]);return xe(t,this,n)}))})),Gh=Qn((function(t,e){var i=ei(e,rr(Gh));return Ks(t,o,s,e,i)})),Rh=Qn((function(t,e){var i=ei(e,rr(Rh));return Ks(t,64,s,e,i)})),Hh=tr((function(t,e){return Ks(t,256,s,s,s,e)}));function Ph(t,e){return t===e||t!=t&&e!=e}var Wh=Os(kn),Dh=Os((function(t,e){return t>=e})),Fh=Bn(function(){return arguments}())?Bn:function(t){return ea(t)&&Nt.call(t,"callee")&&!te.call(t,"callee")},Oh=n.isArray,Uh=le?Fe(le):function(t){return ea(t)&&Sn(t)==j};function Yh(t){return null!=t&&Zh(t.length)&&!Jh(t)}function Xh(t){return ea(t)&&Yh(t)}var Qh=di||xo,Kh=de?Fe(de):function(t){return ea(t)&&Sn(t)==w};function $h(t){if(!ea(t))return!1;var e=Sn(t);return e==v||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!sa(t)}function Jh(t){if(!ta(t))return!1;var e=Sn(t);return e==y||e==A||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Vh(t){return"number"==typeof t&&t==pa(t)}function Zh(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=l}function ta(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ea(t){return null!=t&&"object"==typeof t}var ia=fe?Fe(fe):function(t){return ea(t)&&dr(t)==C};function na(t){return"number"==typeof t||ea(t)&&Sn(t)==b}function sa(t){if(!ea(t)||Sn(t)!=S)return!1;var e=Yt(t);if(null===e)return!0;var i=Nt.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&Et.call(i)==Gt}var ra=pe?Fe(pe):function(t){return ea(t)&&Sn(t)==T},ha=ge?Fe(ge):function(t){return ea(t)&&dr(t)==_};function aa(t){return"string"==typeof t||!Oh(t)&&ea(t)&&Sn(t)==I}function oa(t){return"symbol"==typeof t||ea(t)&&Sn(t)==q}var ua=me?Fe(me):function(t){return ea(t)&&Zh(t.length)&&!!Vt[Sn(t)]},ca=Os(Ln),la=Os((function(t,e){return t<=e}));function da(t){if(!t)return[];if(Yh(t))return aa(t)?ri(t):_s(t);if(he&&t[he])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[he]());var e=dr(t);return(e==C?Ze:e==_?ii:Pa)(t)}function fa(t){return t?(t=ma(t))===c||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function pa(t){var e=fa(t),i=e%1;return e==e?i?e-i:e:0}function ga(t){return t?hn(pa(t),0,f):0}function ma(t){if("number"==typeof t)return t;if(oa(t))return d;if(ta(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ta(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=De(t);var i=pt.test(t);return i||mt.test(t)?ie(t.slice(2),i?2:8):ft.test(t)?d:+t}function xa(t){return Is(t,Ea(t))}function wa(t){return null==t?"":as(t)}var va=Bs((function(t,e){if(Ar(e)||Yh(e))Is(e,ja(e),t);else for(var i in e)Nt.call(e,i)&&Zi(t,i,e[i])})),ya=Bs((function(t,e){Is(e,Ea(e),t)})),Aa=Bs((function(t,e,i,n){Is(e,Ea(e),t,n)})),Ca=Bs((function(t,e,i,n){Is(e,ja(e),t,n)})),ba=tr(rn),Sa=Qn((function(t,e){t=St(t);var i=-1,n=e.length,r=n>2?e[2]:s;for(r&&xr(e[0],e[1],r)&&(n=1);++i<n;)for(var h=e[i],a=Ea(h),o=-1,u=a.length;++o<u;){var c=a[o],l=t[c];(l===s||Ph(l,Bt[c])&&!Nt.call(t,c))&&(t[c]=h[c])}return t})),ka=Qn((function(t){return t.push(s,Js),xe(za,s,t)}));function Ta(t,e,i){var n=null==t?s:Cn(t,e);return n===s?i:n}function _a(t,e){return null!=t&&fr(t,e,_n)}var Ia=Hs((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=Lt.call(e)),t[e]=i}),to(no)),qa=Hs((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=Lt.call(e)),Nt.call(t,e)?t[e].push(i):t[e]=[i]}),hr),Ba=Qn(qn);function ja(t){return Yh(t)?Qi(t):Mn(t)}function Ea(t){return Yh(t)?Qi(t,!0):function(t){if(!ta(t))return function(t){var e=[];if(null!=t)for(var i in St(t))e.push(i);return e}(t);var e=Ar(t),i=[];for(var n in t)("constructor"!=n||!e&&Nt.call(t,n))&&i.push(n);return i}(t)}var Na=Bs((function(t,e,i){Pn(t,e,i)})),za=Bs((function(t,e,i,n){Pn(t,e,i,n)})),Ma=tr((function(t,e){var i={};if(null==t)return i;var n=!1;e=ke(e,(function(e){return e=xs(e,t),n||(n=e.length>1),e})),Is(t,ir(t),i),n&&(i=an(i,7,Vs));for(var s=e.length;s--;)us(i,e[s]);return i})),La=tr((function(t,e){return null==t?{}:function(t,e){return Fn(t,e,(function(e,i){return _a(t,i)}))}(t,e)}));function Ga(t,e){if(null==t)return{};var i=ke(ir(t),(function(t){return[t]}));return e=hr(e),Fn(t,i,(function(t,i){return e(t,i[0])}))}var Ra=Qs(ja),Ha=Qs(Ea);function Pa(t){return null==t?[]:Oe(t,ja(t))}var Wa=zs((function(t,e,i){return e=e.toLowerCase(),t+(i?Da(e):e)}));function Da(t){return $a(wa(t).toLowerCase())}function Fa(t){return(t=wa(t))&&t.replace(wt,Ke).replace(Ut,"")}var Oa=zs((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Ua=zs((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Ya=Ns("toLowerCase"),Xa=zs((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()})),Qa=zs((function(t,e,i){return t+(i?" ":"")+$a(e)})),Ka=zs((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),$a=Ns("toUpperCase");function Ja(t,e,i){return t=wa(t),(e=i?s:e)===s?function(t){return Kt.test(t)}(t)?function(t){return t.match(Xt)||[]}(t):function(t){return t.match(ot)||[]}(t):t.match(e)||[]}var Va=Qn((function(t,e){try{return xe(t,s,e)}catch(t){return $h(t)?t:new At(t)}})),Za=tr((function(t,e){return ve(e,(function(e){e=Gr(e),sn(t,e,qh(t[e],t))})),t}));function to(t){return function(){return t}}var eo=Gs(),io=Gs(!0);function no(t){return t}function so(t){return zn("function"==typeof t?t:an(t,1))}var ro=Qn((function(t,e){return function(i){return qn(i,t,e)}})),ho=Qn((function(t,e){return function(i){return qn(t,i,e)}}));function ao(t,e,i){var n=ja(e),s=An(e,n);null!=i||ta(e)&&(s.length||!n.length)||(i=e,e=t,t=this,s=An(e,ja(e)));var r=!(ta(i)&&"chain"in i&&!i.chain),h=Jh(t);return ve(s,(function(i){var n=e[i];t[i]=n,h&&(t.prototype[i]=function(){var e=this.__chain__;if(r||e){var i=t(this.__wrapped__),s=i.__actions__=_s(this.__actions__);return s.push({func:n,args:arguments,thisArg:t}),i.__chain__=e,i}return n.apply(t,Te([this.value()],arguments))})})),t}function oo(){}var uo=Ws(ke),co=Ws(Ae),lo=Ws(qe);function fo(t){return wr(t)?Ge(Gr(t)):function(t){return function(e){return Cn(e,t)}}(t)}var po=Fs(),go=Fs(!0);function mo(){return[]}function xo(){return!1}var wo,vo=Ps((function(t,e){return t+e}),0),yo=Ys("ceil"),Ao=Ps((function(t,e){return t/e}),1),Co=Ys("floor"),bo=Ps((function(t,e){return t*e}),1),So=Ys("round"),ko=Ps((function(t,e){return t-e}),0);return Ri.after=function(t,e){if("function"!=typeof e)throw new _t(r);return t=pa(t),function(){if(--t<1)return e.apply(this,arguments)}},Ri.ary=_h,Ri.assign=va,Ri.assignIn=ya,Ri.assignInWith=Aa,Ri.assignWith=Ca,Ri.at=ba,Ri.before=Ih,Ri.bind=qh,Ri.bindAll=Za,Ri.bindKey=Bh,Ri.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Oh(t)?t:[t]},Ri.chain=dh,Ri.chunk=function(t,e,i){e=(i?xr(t,e,i):e===s)?1:mi(pa(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var h=0,a=0,o=n(ui(r/e));h<r;)o[a++]=es(t,h,h+=e);return o},Ri.compact=function(t){for(var e=-1,i=null==t?0:t.length,n=0,s=[];++e<i;){var r=t[e];r&&(s[n++]=r)}return s},Ri.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),i=arguments[0],s=t;s--;)e[s-1]=arguments[s];return Te(Oh(i)?_s(i):[i],mn(e,1))},Ri.cond=function(t){var e=null==t?0:t.length,i=hr();return t=e?ke(t,(function(t){if("function"!=typeof t[1])throw new _t(r);return[i(t[0]),t[1]]})):[],Qn((function(i){for(var n=-1;++n<e;){var s=t[n];if(xe(s[0],this,i))return xe(s[1],this,i)}}))},Ri.conforms=function(t){return function(t){var e=ja(t);return function(i){return on(i,t,e)}}(an(t,1))},Ri.constant=to,Ri.countBy=gh,Ri.create=function(t,e){var i=Hi(t);return null==e?i:nn(i,e)},Ri.curry=function t(e,i,n){var r=Ks(e,8,s,s,s,s,s,i=n?s:i);return r.placeholder=t.placeholder,r},Ri.curryRight=function t(e,i,n){var r=Ks(e,16,s,s,s,s,s,i=n?s:i);return r.placeholder=t.placeholder,r},Ri.debounce=jh,Ri.defaults=Sa,Ri.defaultsDeep=ka,Ri.defer=Eh,Ri.delay=Nh,Ri.difference=Pr,Ri.differenceBy=Wr,Ri.differenceWith=Dr,Ri.drop=function(t,e,i){var n=null==t?0:t.length;return n?es(t,(e=i||e===s?1:pa(e))<0?0:e,n):[]},Ri.dropRight=function(t,e,i){var n=null==t?0:t.length;return n?es(t,0,(e=n-(e=i||e===s?1:pa(e)))<0?0:e):[]},Ri.dropRightWhile=function(t,e){return t&&t.length?ls(t,hr(e,3),!0,!0):[]},Ri.dropWhile=function(t,e){return t&&t.length?ls(t,hr(e,3),!0):[]},Ri.fill=function(t,e,i,n){var r=null==t?0:t.length;return r?(i&&"number"!=typeof i&&xr(t,e,i)&&(i=0,n=r),function(t,e,i,n){var r=t.length;for((i=pa(i))<0&&(i=-i>r?0:r+i),(n=n===s||n>r?r:pa(n))<0&&(n+=r),n=i>n?0:ga(n);i<n;)t[i++]=e;return t}(t,e,i,n)):[]},Ri.filter=function(t,e){return(Oh(t)?Ce:gn)(t,hr(e,3))},Ri.flatMap=function(t,e){return mn(bh(t,e),1)},Ri.flatMapDeep=function(t,e){return mn(bh(t,e),c)},Ri.flatMapDepth=function(t,e,i){return i=i===s?1:pa(i),mn(bh(t,e),i)},Ri.flatten=Ur,Ri.flattenDeep=function(t){return null!=t&&t.length?mn(t,c):[]},Ri.flattenDepth=function(t,e){return null!=t&&t.length?mn(t,e=e===s?1:pa(e)):[]},Ri.flip=function(t){return Ks(t,512)},Ri.flow=eo,Ri.flowRight=io,Ri.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,n={};++e<i;){var s=t[e];n[s[0]]=s[1]}return n},Ri.functions=function(t){return null==t?[]:An(t,ja(t))},Ri.functionsIn=function(t){return null==t?[]:An(t,Ea(t))},Ri.groupBy=yh,Ri.initial=function(t){return null!=t&&t.length?es(t,0,-1):[]},Ri.intersection=Xr,Ri.intersectionBy=Qr,Ri.intersectionWith=Kr,Ri.invert=Ia,Ri.invertBy=qa,Ri.invokeMap=Ah,Ri.iteratee=so,Ri.keyBy=Ch,Ri.keys=ja,Ri.keysIn=Ea,Ri.map=bh,Ri.mapKeys=function(t,e){var i={};return e=hr(e,3),vn(t,(function(t,n,s){sn(i,e(t,n,s),t)})),i},Ri.mapValues=function(t,e){var i={};return e=hr(e,3),vn(t,(function(t,n,s){sn(i,n,e(t,n,s))})),i},Ri.matches=function(t){return Rn(an(t,1))},Ri.matchesProperty=function(t,e){return Hn(t,an(e,1))},Ri.memoize=zh,Ri.merge=Na,Ri.mergeWith=za,Ri.method=ro,Ri.methodOf=ho,Ri.mixin=ao,Ri.negate=Mh,Ri.nthArg=function(t){return t=pa(t),Qn((function(e){return Wn(e,t)}))},Ri.omit=Ma,Ri.omitBy=function(t,e){return Ga(t,Mh(hr(e)))},Ri.once=function(t){return Ih(2,t)},Ri.orderBy=function(t,e,i,n){return null==t?[]:(Oh(e)||(e=null==e?[]:[e]),Oh(i=n?s:i)||(i=null==i?[]:[i]),Dn(t,e,i))},Ri.over=uo,Ri.overArgs=Lh,Ri.overEvery=co,Ri.overSome=lo,Ri.partial=Gh,Ri.partialRight=Rh,Ri.partition=Sh,Ri.pick=La,Ri.pickBy=Ga,Ri.property=fo,Ri.propertyOf=function(t){return function(e){return null==t?s:Cn(t,e)}},Ri.pull=Jr,Ri.pullAll=Vr,Ri.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?On(t,e,hr(i,2)):t},Ri.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?On(t,e,s,i):t},Ri.pullAt=Zr,Ri.range=po,Ri.rangeRight=go,Ri.rearg=Hh,Ri.reject=function(t,e){return(Oh(t)?Ce:gn)(t,Mh(hr(e,3)))},Ri.remove=function(t,e){var i=[];if(!t||!t.length)return i;var n=-1,s=[],r=t.length;for(e=hr(e,3);++n<r;){var h=t[n];e(h,n,t)&&(i.push(h),s.push(n))}return Un(t,s),i},Ri.rest=function(t,e){if("function"!=typeof t)throw new _t(r);return Qn(t,e=e===s?e:pa(e))},Ri.reverse=th,Ri.sampleSize=function(t,e,i){return e=(i?xr(t,e,i):e===s)?1:pa(e),(Oh(t)?$i:$n)(t,e)},Ri.set=function(t,e,i){return null==t?t:Jn(t,e,i)},Ri.setWith=function(t,e,i,n){return n="function"==typeof n?n:s,null==t?t:Jn(t,e,i,n)},Ri.shuffle=function(t){return(Oh(t)?Ji:ts)(t)},Ri.slice=function(t,e,i){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&xr(t,e,i)?(e=0,i=n):(e=null==e?0:pa(e),i=i===s?n:pa(i)),es(t,e,i)):[]},Ri.sortBy=kh,Ri.sortedUniq=function(t){return t&&t.length?rs(t):[]},Ri.sortedUniqBy=function(t,e){return t&&t.length?rs(t,hr(e,2)):[]},Ri.split=function(t,e,i){return i&&"number"!=typeof i&&xr(t,e,i)&&(e=i=s),(i=i===s?f:i>>>0)?(t=wa(t))&&("string"==typeof e||null!=e&&!ra(e))&&!(e=as(e))&&Ve(t)?vs(ri(t),0,i):t.split(e,i):[]},Ri.spread=function(t,e){if("function"!=typeof t)throw new _t(r);return e=null==e?0:mi(pa(e),0),Qn((function(i){var n=i[e],s=vs(i,0,e);return n&&Te(s,n),xe(t,this,s)}))},Ri.tail=function(t){var e=null==t?0:t.length;return e?es(t,1,e):[]},Ri.take=function(t,e,i){return t&&t.length?es(t,0,(e=i||e===s?1:pa(e))<0?0:e):[]},Ri.takeRight=function(t,e,i){var n=null==t?0:t.length;return n?es(t,(e=n-(e=i||e===s?1:pa(e)))<0?0:e,n):[]},Ri.takeRightWhile=function(t,e){return t&&t.length?ls(t,hr(e,3),!1,!0):[]},Ri.takeWhile=function(t,e){return t&&t.length?ls(t,hr(e,3)):[]},Ri.tap=function(t,e){return e(t),t},Ri.throttle=function(t,e,i){var n=!0,s=!0;if("function"!=typeof t)throw new _t(r);return ta(i)&&(n="leading"in i?!!i.leading:n,s="trailing"in i?!!i.trailing:s),jh(t,e,{leading:n,maxWait:e,trailing:s})},Ri.thru=fh,Ri.toArray=da,Ri.toPairs=Ra,Ri.toPairsIn=Ha,Ri.toPath=function(t){return Oh(t)?ke(t,Gr):oa(t)?[t]:_s(Lr(wa(t)))},Ri.toPlainObject=xa,Ri.transform=function(t,e,i){var n=Oh(t),s=n||Qh(t)||ua(t);if(e=hr(e,4),null==i){var r=t&&t.constructor;i=s?n?new r:[]:ta(t)&&Jh(r)?Hi(Yt(t)):{}}return(s?ve:vn)(t,(function(t,n,s){return e(i,t,n,s)})),i},Ri.unary=function(t){return _h(t,1)},Ri.union=eh,Ri.unionBy=ih,Ri.unionWith=nh,Ri.uniq=function(t){return t&&t.length?os(t):[]},Ri.uniqBy=function(t,e){return t&&t.length?os(t,hr(e,2)):[]},Ri.uniqWith=function(t,e){return e="function"==typeof e?e:s,t&&t.length?os(t,s,e):[]},Ri.unset=function(t,e){return null==t||us(t,e)},Ri.unzip=sh,Ri.unzipWith=rh,Ri.update=function(t,e,i){return null==t?t:cs(t,e,ms(i))},Ri.updateWith=function(t,e,i,n){return n="function"==typeof n?n:s,null==t?t:cs(t,e,ms(i),n)},Ri.values=Pa,Ri.valuesIn=function(t){return null==t?[]:Oe(t,Ea(t))},Ri.without=hh,Ri.words=Ja,Ri.wrap=function(t,e){return Gh(ms(e),t)},Ri.xor=ah,Ri.xorBy=oh,Ri.xorWith=uh,Ri.zip=ch,Ri.zipObject=function(t,e){return ps(t||[],e||[],Zi)},Ri.zipObjectDeep=function(t,e){return ps(t||[],e||[],Jn)},Ri.zipWith=lh,Ri.entries=Ra,Ri.entriesIn=Ha,Ri.extend=ya,Ri.extendWith=Aa,ao(Ri,Ri),Ri.add=vo,Ri.attempt=Va,Ri.camelCase=Wa,Ri.capitalize=Da,Ri.ceil=yo,Ri.clamp=function(t,e,i){return i===s&&(i=e,e=s),i!==s&&(i=(i=ma(i))==i?i:0),e!==s&&(e=(e=ma(e))==e?e:0),hn(ma(t),e,i)},Ri.clone=function(t){return an(t,4)},Ri.cloneDeep=function(t){return an(t,5)},Ri.cloneDeepWith=function(t,e){return an(t,5,e="function"==typeof e?e:s)},Ri.cloneWith=function(t,e){return an(t,4,e="function"==typeof e?e:s)},Ri.conformsTo=function(t,e){return null==e||on(t,e,ja(e))},Ri.deburr=Fa,Ri.defaultTo=function(t,e){return null==t||t!=t?e:t},Ri.divide=Ao,Ri.endsWith=function(t,e,i){t=wa(t),e=as(e);var n=t.length,r=i=i===s?n:hn(pa(i),0,n);return(i-=e.length)>=0&&t.slice(i,r)==e},Ri.eq=Ph,Ri.escape=function(t){return(t=wa(t))&&Q.test(t)?t.replace(Y,$e):t},Ri.escapeRegExp=function(t){return(t=wa(t))&&it.test(t)?t.replace(et,"\\$&"):t},Ri.every=function(t,e,i){var n=Oh(t)?Ae:fn;return i&&xr(t,e,i)&&(e=s),n(t,hr(e,3))},Ri.find=mh,Ri.findIndex=Fr,Ri.findKey=function(t,e){return je(t,hr(e,3),vn)},Ri.findLast=xh,Ri.findLastIndex=Or,Ri.findLastKey=function(t,e){return je(t,hr(e,3),yn)},Ri.floor=Co,Ri.forEach=wh,Ri.forEachRight=vh,Ri.forIn=function(t,e){return null==t?t:xn(t,hr(e,3),Ea)},Ri.forInRight=function(t,e){return null==t?t:wn(t,hr(e,3),Ea)},Ri.forOwn=function(t,e){return t&&vn(t,hr(e,3))},Ri.forOwnRight=function(t,e){return t&&yn(t,hr(e,3))},Ri.get=Ta,Ri.gt=Wh,Ri.gte=Dh,Ri.has=function(t,e){return null!=t&&fr(t,e,Tn)},Ri.hasIn=_a,Ri.head=Yr,Ri.identity=no,Ri.includes=function(t,e,i,n){t=Yh(t)?t:Pa(t),i=i&&!n?pa(i):0;var s=t.length;return i<0&&(i=mi(s+i,0)),aa(t)?i<=s&&t.indexOf(e,i)>-1:!!s&&Ne(t,e,i)>-1},Ri.indexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var s=null==i?0:pa(i);return s<0&&(s=mi(n+s,0)),Ne(t,e,s)},Ri.inRange=function(t,e,i){return e=fa(e),i===s?(i=e,e=0):i=fa(i),function(t,e,i){return t>=xi(e,i)&&t<mi(e,i)}(t=ma(t),e,i)},Ri.invoke=Ba,Ri.isArguments=Fh,Ri.isArray=Oh,Ri.isArrayBuffer=Uh,Ri.isArrayLike=Yh,Ri.isArrayLikeObject=Xh,Ri.isBoolean=function(t){return!0===t||!1===t||ea(t)&&Sn(t)==x},Ri.isBuffer=Qh,Ri.isDate=Kh,Ri.isElement=function(t){return ea(t)&&1===t.nodeType&&!sa(t)},Ri.isEmpty=function(t){if(null==t)return!0;if(Yh(t)&&(Oh(t)||"string"==typeof t||"function"==typeof t.splice||Qh(t)||ua(t)||Fh(t)))return!t.length;var e=dr(t);if(e==C||e==_)return!t.size;if(Ar(t))return!Mn(t).length;for(var i in t)if(Nt.call(t,i))return!1;return!0},Ri.isEqual=function(t,e){return jn(t,e)},Ri.isEqualWith=function(t,e,i){var n=(i="function"==typeof i?i:s)?i(t,e):s;return n===s?jn(t,e,s,i):!!n},Ri.isError=$h,Ri.isFinite=function(t){return"number"==typeof t&&fi(t)},Ri.isFunction=Jh,Ri.isInteger=Vh,Ri.isLength=Zh,Ri.isMap=ia,Ri.isMatch=function(t,e){return t===e||En(t,e,or(e))},Ri.isMatchWith=function(t,e,i){return i="function"==typeof i?i:s,En(t,e,or(e),i)},Ri.isNaN=function(t){return na(t)&&t!=+t},Ri.isNative=function(t){if(yr(t))throw new At("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Nn(t)},Ri.isNil=function(t){return null==t},Ri.isNull=function(t){return null===t},Ri.isNumber=na,Ri.isObject=ta,Ri.isObjectLike=ea,Ri.isPlainObject=sa,Ri.isRegExp=ra,Ri.isSafeInteger=function(t){return Vh(t)&&t>=-9007199254740991&&t<=l},Ri.isSet=ha,Ri.isString=aa,Ri.isSymbol=oa,Ri.isTypedArray=ua,Ri.isUndefined=function(t){return t===s},Ri.isWeakMap=function(t){return ea(t)&&dr(t)==B},Ri.isWeakSet=function(t){return ea(t)&&"[object WeakSet]"==Sn(t)},Ri.join=function(t,e){return null==t?"":pi.call(t,e)},Ri.kebabCase=Oa,Ri.last=$r,Ri.lastIndexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n;return i!==s&&(r=(r=pa(i))<0?mi(n+r,0):xi(r,n-1)),e==e?function(t,e,i){for(var n=i+1;n--;)if(t[n]===e)return n;return n}(t,e,r):Ee(t,Me,r,!0)},Ri.lowerCase=Ua,Ri.lowerFirst=Ya,Ri.lt=ca,Ri.lte=la,Ri.max=function(t){return t&&t.length?pn(t,no,kn):s},Ri.maxBy=function(t,e){return t&&t.length?pn(t,hr(e,2),kn):s},Ri.mean=function(t){return Le(t,no)},Ri.meanBy=function(t,e){return Le(t,hr(e,2))},Ri.min=function(t){return t&&t.length?pn(t,no,Ln):s},Ri.minBy=function(t,e){return t&&t.length?pn(t,hr(e,2),Ln):s},Ri.stubArray=mo,Ri.stubFalse=xo,Ri.stubObject=function(){return{}},Ri.stubString=function(){return""},Ri.stubTrue=function(){return!0},Ri.multiply=bo,Ri.nth=function(t,e){return t&&t.length?Wn(t,pa(e)):s},Ri.noConflict=function(){return re._===this&&(re._=Rt),this},Ri.noop=oo,Ri.now=Th,Ri.pad=function(t,e,i){t=wa(t);var n=(e=pa(e))?si(t):0;if(!e||n>=e)return t;var s=(e-n)/2;return Ds(ci(s),i)+t+Ds(ui(s),i)},Ri.padEnd=function(t,e,i){t=wa(t);var n=(e=pa(e))?si(t):0;return e&&n<e?t+Ds(e-n,i):t},Ri.padStart=function(t,e,i){t=wa(t);var n=(e=pa(e))?si(t):0;return e&&n<e?Ds(e-n,i)+t:t},Ri.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),vi(wa(t).replace(nt,""),e||0)},Ri.random=function(t,e,i){if(i&&"boolean"!=typeof i&&xr(t,e,i)&&(e=i=s),i===s&&("boolean"==typeof e?(i=e,e=s):"boolean"==typeof t&&(i=t,t=s)),t===s&&e===s?(t=0,e=1):(t=fa(t),e===s?(e=t,t=0):e=fa(e)),t>e){var n=t;t=e,e=n}if(i||t%1||e%1){var r=yi();return xi(t+r*(e-t+ee("1e-"+((r+"").length-1))),e)}return Yn(t,e)},Ri.reduce=function(t,e,i){var n=Oh(t)?_e:He,s=arguments.length<3;return n(t,hr(e,4),i,s,ln)},Ri.reduceRight=function(t,e,i){var n=Oh(t)?Ie:He,s=arguments.length<3;return n(t,hr(e,4),i,s,dn)},Ri.repeat=function(t,e,i){return e=(i?xr(t,e,i):e===s)?1:pa(e),Xn(wa(t),e)},Ri.replace=function(){var t=arguments,e=wa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ri.result=function(t,e,i){var n=-1,r=(e=xs(e,t)).length;for(r||(r=1,t=s);++n<r;){var h=null==t?s:t[Gr(e[n])];h===s&&(n=r,h=i),t=Jh(h)?h.call(t):h}return t},Ri.round=So,Ri.runInContext=t,Ri.sample=function(t){return(Oh(t)?Ki:Kn)(t)},Ri.size=function(t){if(null==t)return 0;if(Yh(t))return aa(t)?si(t):t.length;var e=dr(t);return e==C||e==_?t.size:Mn(t).length},Ri.snakeCase=Xa,Ri.some=function(t,e,i){var n=Oh(t)?qe:is;return i&&xr(t,e,i)&&(e=s),n(t,hr(e,3))},Ri.sortedIndex=function(t,e){return ns(t,e)},Ri.sortedIndexBy=function(t,e,i){return ss(t,e,hr(i,2))},Ri.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var n=ns(t,e);if(n<i&&Ph(t[n],e))return n}return-1},Ri.sortedLastIndex=function(t,e){return ns(t,e,!0)},Ri.sortedLastIndexBy=function(t,e,i){return ss(t,e,hr(i,2),!0)},Ri.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var i=ns(t,e,!0)-1;if(Ph(t[i],e))return i}return-1},Ri.startCase=Qa,Ri.startsWith=function(t,e,i){return t=wa(t),i=null==i?0:hn(pa(i),0,t.length),e=as(e),t.slice(i,i+e.length)==e},Ri.subtract=ko,Ri.sum=function(t){return t&&t.length?Pe(t,no):0},Ri.sumBy=function(t,e){return t&&t.length?Pe(t,hr(e,2)):0},Ri.template=function(t,e,i){var n=Ri.templateSettings;i&&xr(t,e,i)&&(e=s),t=wa(t),e=Aa({},e,n,$s);var r,h,a=Aa({},e.imports,n.imports,$s),o=ja(a),u=Oe(a,o),c=0,l=e.interpolate||vt,d="__p += '",f=kt((e.escape||vt).source+"|"+l.source+"|"+(l===J?lt:vt).source+"|"+(e.evaluate||vt).source+"|$","g"),p="//# sourceURL="+(Nt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Jt+"]")+"\n";t.replace(f,(function(e,i,n,s,a,o){return n||(n=s),d+=t.slice(c,o).replace(yt,Je),i&&(r=!0,d+="' +\n__e("+i+") +\n'"),a&&(h=!0,d+="';\n"+a+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),c=o+e.length,e})),d+="';\n";var g=Nt.call(e,"variable")&&e.variable;if(g){if(ut.test(g))throw new At("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(h?d.replace(D,""):d).replace(F,"$1").replace(O,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(h?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var m=Va((function(){return Ct(o,p+"return "+d).apply(s,u)}));if(m.source=d,$h(m))throw m;return m},Ri.times=function(t,e){if((t=pa(t))<1||t>l)return[];var i=f,n=xi(t,f);e=hr(e),t-=f;for(var s=We(n,e);++i<t;)e(i);return s},Ri.toFinite=fa,Ri.toInteger=pa,Ri.toLength=ga,Ri.toLower=function(t){return wa(t).toLowerCase()},Ri.toNumber=ma,Ri.toSafeInteger=function(t){return t?hn(pa(t),-9007199254740991,l):0===t?t:0},Ri.toString=wa,Ri.toUpper=function(t){return wa(t).toUpperCase()},Ri.trim=function(t,e,i){if((t=wa(t))&&(i||e===s))return De(t);if(!t||!(e=as(e)))return t;var n=ri(t),r=ri(e);return vs(n,Ye(n,r),Xe(n,r)+1).join("")},Ri.trimEnd=function(t,e,i){if((t=wa(t))&&(i||e===s))return t.slice(0,hi(t)+1);if(!t||!(e=as(e)))return t;var n=ri(t);return vs(n,0,Xe(n,ri(e))+1).join("")},Ri.trimStart=function(t,e,i){if((t=wa(t))&&(i||e===s))return t.replace(nt,"");if(!t||!(e=as(e)))return t;var n=ri(t);return vs(n,Ye(n,ri(e))).join("")},Ri.truncate=function(t,e){var i=30,n="...";if(ta(e)){var r="separator"in e?e.separator:r;i="length"in e?pa(e.length):i,n="omission"in e?as(e.omission):n}var h=(t=wa(t)).length;if(Ve(t)){var a=ri(t);h=a.length}if(i>=h)return t;var o=i-si(n);if(o<1)return n;var u=a?vs(a,0,o).join(""):t.slice(0,o);if(r===s)return u+n;if(a&&(o+=u.length-o),ra(r)){if(t.slice(o).search(r)){var c,l=u;for(r.global||(r=kt(r.source,wa(dt.exec(r))+"g")),r.lastIndex=0;c=r.exec(l);)var d=c.index;u=u.slice(0,d===s?o:d)}}else if(t.indexOf(as(r),o)!=o){var f=u.lastIndexOf(r);f>-1&&(u=u.slice(0,f))}return u+n},Ri.unescape=function(t){return(t=wa(t))&&X.test(t)?t.replace(U,ai):t},Ri.uniqueId=function(t){var e=++zt;return wa(t)+e},Ri.upperCase=Ka,Ri.upperFirst=$a,Ri.each=wh,Ri.eachRight=vh,Ri.first=Yr,ao(Ri,(wo={},vn(Ri,(function(t,e){Nt.call(Ri.prototype,e)||(wo[e]=t)})),wo),{chain:!1}),Ri.VERSION="4.17.21",ve(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ri[t].placeholder=Ri})),ve(["drop","take"],(function(t,e){Di.prototype[t]=function(i){i=i===s?1:mi(pa(i),0);var n=this.__filtered__&&!e?new Di(this):this.clone();return n.__filtered__?n.__takeCount__=xi(i,n.__takeCount__):n.__views__.push({size:xi(i,f),type:t+(n.__dir__<0?"Right":"")}),n},Di.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ve(["filter","map","takeWhile"],(function(t,e){var i=e+1,n=1==i||3==i;Di.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:hr(t,3),type:i}),e.__filtered__=e.__filtered__||n,e}})),ve(["head","last"],(function(t,e){var i="take"+(e?"Right":"");Di.prototype[t]=function(){return this[i](1).value()[0]}})),ve(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");Di.prototype[t]=function(){return this.__filtered__?new Di(this):this[i](1)}})),Di.prototype.compact=function(){return this.filter(no)},Di.prototype.find=function(t){return this.filter(t).head()},Di.prototype.findLast=function(t){return this.reverse().find(t)},Di.prototype.invokeMap=Qn((function(t,e){return"function"==typeof t?new Di(this):this.map((function(i){return qn(i,t,e)}))})),Di.prototype.reject=function(t){return this.filter(Mh(hr(t)))},Di.prototype.slice=function(t,e){t=pa(t);var i=this;return i.__filtered__&&(t>0||e<0)?new Di(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),e!==s&&(i=(e=pa(e))<0?i.dropRight(-e):i.take(e-t)),i)},Di.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Di.prototype.toArray=function(){return this.take(f)},vn(Di.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),r=Ri[n?"take"+("last"==e?"Right":""):e],h=n||/^find/.test(e);r&&(Ri.prototype[e]=function(){var e=this.__wrapped__,a=n?[1]:arguments,o=e instanceof Di,u=a[0],c=o||Oh(e),l=function(t){var e=r.apply(Ri,Te([t],a));return n&&d?e[0]:e};c&&i&&"function"==typeof u&&1!=u.length&&(o=c=!1);var d=this.__chain__,f=!!this.__actions__.length,p=h&&!d,g=o&&!f;if(!h&&c){e=g?e:new Di(this);var m=t.apply(e,a);return m.__actions__.push({func:fh,args:[l],thisArg:s}),new Wi(m,d)}return p&&g?t.apply(this,a):(m=this.thru(l),p?n?m.value()[0]:m.value():m)})})),ve(["pop","push","shift","sort","splice","unshift"],(function(t){var e=It[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);Ri.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var s=this.value();return e.apply(Oh(s)?s:[],t)}return this[i]((function(i){return e.apply(Oh(i)?i:[],t)}))}})),vn(Di.prototype,(function(t,e){var i=Ri[e];if(i){var n=i.name+"";Nt.call(qi,n)||(qi[n]=[]),qi[n].push({name:e,func:i})}})),qi[Rs(s,2).name]=[{name:"wrapper",func:s}],Di.prototype.clone=function(){var t=new Di(this.__wrapped__);return t.__actions__=_s(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=_s(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=_s(this.__views__),t},Di.prototype.reverse=function(){if(this.__filtered__){var t=new Di(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Di.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=Oh(t),n=e<0,s=i?t.length:0,r=function(t,e,i){for(var n=-1,s=i.length;++n<s;){var r=i[n],h=r.size;switch(r.type){case"drop":t+=h;break;case"dropRight":e-=h;break;case"take":e=xi(e,t+h);break;case"takeRight":t=mi(t,e-h)}}return{start:t,end:e}}(0,s,this.__views__),h=r.start,a=r.end,o=a-h,u=n?a:h-1,c=this.__iteratees__,l=c.length,d=0,f=xi(o,this.__takeCount__);if(!i||!n&&s==o&&f==o)return ds(t,this.__actions__);var p=[];t:for(;o--&&d<f;){for(var g=-1,m=t[u+=e];++g<l;){var x=c[g],w=x.iteratee,v=x.type,y=w(m);if(2==v)m=y;else if(!y){if(1==v)continue t;break t}}p[d++]=m}return p},Ri.prototype.at=ph,Ri.prototype.chain=function(){return dh(this)},Ri.prototype.commit=function(){return new Wi(this.value(),this.__chain__)},Ri.prototype.next=function(){this.__values__===s&&(this.__values__=da(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?s:this.__values__[this.__index__++]}},Ri.prototype.plant=function(t){for(var e,i=this;i instanceof Pi;){var n=Hr(i);n.__index__=0,n.__values__=s,e?r.__wrapped__=n:e=n;var r=n;i=i.__wrapped__}return r.__wrapped__=t,e},Ri.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Di){var e=t;return this.__actions__.length&&(e=new Di(this)),(e=e.reverse()).__actions__.push({func:fh,args:[th],thisArg:s}),new Wi(e,this.__chain__)}return this.thru(th)},Ri.prototype.toJSON=Ri.prototype.valueOf=Ri.prototype.value=function(){return ds(this.__wrapped__,this.__actions__)},Ri.prototype.first=Ri.prototype.head,he&&(Ri.prototype[he]=function(){return this}),Ri}();re._=oi,(n=function(){return oi}.call(e,i,e,t))===s||(t.exports=n)}.call(this)},9433:(t,e,i)=>{"use strict";var n=i(3379),s=i.n(n),r=i(7795),h=i.n(r),a=i(569),o=i.n(a),u=i(3565),c=i.n(u),l=i(9216),d=i.n(l),f=i(4589),p=i.n(f),g=i(8636),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=h(),m.insertStyleElement=d();var x=s()(g.default,m);if(!g.default.locals||t.hot.invalidate){var w=!g.default.locals,v=w?g:g.default.locals;t.hot.accept(8636,(e=>{g=i(8636),function(t,e,i){if(!t&&e||t&&!e)return!1;var n;for(n in t)if((!i||"default"!==n)&&t[n]!==e[n])return!1;for(n in e)if(!(i&&"default"===n||t[n]))return!1;return!0}(v,w?g:g.default.locals,w)?(v=w?g:g.default.locals,x(g.default)):t.hot.invalidate()}))}t.hot.dispose((function(){x()})),g.default&&g.default.locals&&g.default.locals},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var r={},h=[],a=0;a<t.length;a++){var o=t[a],u=n.base?o[0]+n.base:o[0],c=r[u]||0,l="".concat(u," ").concat(c);r[u]=c+1;var d=i(l),f={css:o[1],media:o[2],sourceMap:o[3],supports:o[4],layer:o[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=s(f,n);n.byIndex=a,e.splice(a,0,{identifier:l,updater:p,references:1})}h.push(l)}return h}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var r=n(t=t||[],s=s||{});return function(t){t=t||[];for(var h=0;h<r.length;h++){var a=i(r[h]);e[a].references--}for(var o=n(t,s),u=0;u<r.length;u++){var c=i(r[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=o}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var r=i.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},9786:(t,e,i)=>{"use strict";i(6486),i(9433);class n{constructor(t,e,i,n,s,r,h,a,o,u,c){this.width=t,this.type=h,this.height=e,this.speedX=0,this.speedY=0,this.x=n,this.y=s,this.color=i,this.ctx=r,this.row=a,this.column=o,this.frameWidth=u,this.frameHeight=c,this.direction="right",this.moving=!1}update=t=>{"text"===this.type?(this.ctx.font=this.width+" "+this.height,this.ctx.fillStyle=this.color,this.ctx.fillText(this.text,this.x,this.y)):"image"===this.type||"background"===this.type?(this.image=new Image,this.image.src=this.color,this.ctx.drawImage(this.image,this.x,this.y,this.width,this.height),"background"===this.type&&this.ctx.drawImage(this.image,this.x+this.width,this.y,this.width,this.height)):"sprite"===this.type?(this.image=new Image,this.image.src=this.color,this.ctx.drawImage(this.image,this.column*this.frameWidth,this.row*this.frameHeight,this.frameWidth,this.frameHeight,this.x,this.y,this.width,this.height)):("invisible"===this.color?this.ctx.fillStyle="rgba(0,0,0,0)":"transparent"===this.color?this.ctx.fillStyle="rgba(255,255,255, 0.1)":"transparent2"===this.color?this.ctx.fillStyle="rgba(255,255,255, 0.4)":(this.ctx.fillStyle=this.color,this.ctx.lineWidth=5,this.ctx.strokeStyle="black",this.ctx.fill(),this.ctx.stroke()),this.ctx.fillRect(this.x,this.y,this.width,this.height))};newPos=t=>{this.x+=this.speedX,this.y+=this.speedY,"background"===this.type&&this.x===-this.width&&(this.x=0)};clicked=(t,e)=>{var i=4*this.x,n=4*this.x+4*this.width,s=4*this.y,r=!0;return(4*this.y+4*this.height<e||s>e||n<t||i>t)&&(r=!1),r};intersecting=t=>{var e=Number(this.x),i=Number(this.x)+this.width,n=Number(this.y),s=Number(this.y)+this.height,r=Number(t.x),h=Number(t.x)+t.width,a=Number(t.y),o=Number(t.y)+t.height,u=!0;return(s<a||n>o||i<r||e>h)&&(u=!1),u};dir=(t,e)=>{var i=4*this.x;return this.x,this.width,t<i+4*this.width/2?"left":"right"};checkIfStillMoving(t,e){"left"===this.directionOfClick&&this.x>t/4-this.width/2||"right"===this.directionOfClick&&this.x<t/4-this.width/2||"up"===this.directionOfClickUp&&this.y>e/4-this.height/2||"down"===this.directionOfClickUp&&this.y<e/4-this.height/2||(this.speedX=0,this.speedY=0)}startNewAnime(t,e,i,n){this.customAnimation=!1,this.frame=0,this.anime=t,this.firstAnimation=!0,this.nextAnime=e,this.playNum=i,void 0!==n&&(console.log("hello"),n())}startNewCustomAnime(t,e,i,n){this.frame=0,this.customArr=t,this.firstAnimation=!0,this.nextAnime=e,this.speed=i,this.customAnimation=!0,void 0!==n&&n()}customAnime(t){if(this.customArr=t,!0===this.firstAnimation&&(this.row=this.customArr[0][0],this.column=this.customArr[0][1],this.customArr=this.customArr.slice(1),this.firstAnimation=!1,this.lastCustomFrame=this.customArr.slice(-1)),this.frame>=this.speed){if(0===this.customArr.length){if(!0!==this.pause)return this.customAnimation=!1,this.anime=this.nextAnime,this.frame=0,void(this.firstAnimation=!0);this.row=this.lastCustomFrame[0][0],this.column=this.lastCustomFrame[0][1]}void 0!==this.customArr[0]&&(this.row=this.customArr[0][0],this.column=this.customArr[0][1],this.customArr=this.customArr.slice(1)),this.frame=0}}pauseAnime(){this.pause=!0}spriteAnimation(t,e,i,n,s){if(!0===this.firstAnimation&&(this.row=n,this.column=t,this.firstAnimation=!1),this.frame>=i){if(this.column===e-s+s&&this.row===n){if(this.playNum-=1,!0===this.pause)return void(this.stop=!0);if(0===this.playNum)return this.playNum-=1,this.anime=this.nextAnime,this.firstAnimation=!0,void(this.frame=0);this.column=t-s,this.row=n}else if(this.row>n){if(this.column===e-s-this.columnLength){if(this.playNum-=1,!0===this.pause)return void(this.stop=!0);if(0===this.playNum)return this.playNum-=1,this.anime=this.nextAnime,this.firstAnimation=!0,void(this.frame=0);this.column=t-s,this.row=n}}else this.column===this.columnLength&&(this.row+=1,this.column=-1);this.column+=s,this.frame=0}}moveToMouse=(t,e,i)=>{this.moving=!0;let n=Math.abs((this.x-(t/4-this.width/2))*i),s=Math.abs((this.y-(e/4-this.height/2))*i);i=n>s?n:s,this.x>t/4-this.width/2?(this.directionOfClick="left",this.speedX=-(this.x-(t/4-this.width/2))/i):(this.directionOfClick="right",this.speedX=-(this.x-(t/4-this.width/2))/i),this.y>e/4-this.height/2?(this.directionOfClickUp="up",this.speedY=-(this.y-(e/4-this.height/2))/i):(this.directionOfClickUp="down",this.speedY=-(this.y-(e/4-this.height/2))/i)}}class s{constructor(t,e){this.sound=document.createElement("audio"),this.sound.src=t,this.sound.setAttribute("preload","auto"),this.sound.setAttribute("controls","none"),this.sound.style.display="none",void 0!==e&&(this.sound.volume=e),document.body.appendChild(this.sound)}play=t=>{this.sound.play()};stop=t=>{this.sound.pause()}}var r=i(7725),h=i(3367),a=i(6163);const o=i.p+"42364d3ef775f3d42a0b2882a9c4c4da.mp3";var u=i(3603),c=i(5364),l=i(9515),d=i(2186),f=i(3587),p=i(8448),g=i(5012),m=i(8547),x=i(9618),w=i(6605),v=i(847),y=i(5312),A=i(7298),C=i(1237),b=i(8963),S=i(3879),k=i(271);i(7102);const T=i.p+"a5a211ff7bd905877b40ddcd1de92824.mp3";class _{constructor(t,e,i){this.currentImports=["./component","./sound","/background1.png","/background2.png","/background3.png"],this.canvas=t,this.ctx=e,this.ctx.imageSmoothingEnabled=!1,this.dimensions=i,this.mouseOnBegin=!1,this.beginSound=new s(o),this.btn=new n(80,30,k,110,110,this.ctx,"image"),this.myBackground=new n(300,150,a,0,0,this.ctx,"image"),this.myBackground1=new n(300,150,r,0,0,this.ctx,"image"),this.myBackground2=new n(300,150,h,0,0,this.ctx,"image"),this.myCliff=new n(100,100,u,0,75,this.ctx,"image"),this.myCastle=new n(65,160,c,235,0,this.ctx,"image"),this.adventureGuy=new n(95,70,l,25,60,this.ctx,"sprite",5,3,50,37),this.soundImage=new n(10,10,C,270,138,this.ctx,"image"),this.musicImage=new n(10,10,S,285,138,this.ctx,"image"),this.titleWords=new n("16px","TitleScreen","black",10,15,this.ctx,"text"),this.titleWords2=new n("16px","TitleScreen","black",10,30,this.ctx,"text"),this.titleScreen=!0,this.gx=0,this.gy=0,this.frame=0,this.anime="idleRight",this.move=!0,this.cloudArr=[],this.generateCloud(55,this.ctx),this.beginTheme=new s(T,.2),this.themeMusic=!1,this.allSounds=!1}generateCloud(t,e,i){void 0===i&&(i=0);const s=[p,g,m,x,w,v];for(let r=0;r<t;r++){let t=Math.floor(6*Math.random()+0),r=Math.floor(50*Math.random()+95),h=Math.floor(Math.random()*(400-i)+i),a=Math.floor(40*Math.random()+50),o=Math.floor(15*Math.random()+20),u=Math.floor(-14*Math.random()-1),c=new n(a,o,s[t],h,r,e,"image");c.speedX=u/100,this.cloudArr.push(c)}}initMove(t,e,i){this.adventureGuy.color="idleRight"===i?l:d,this.adventureGuy.column=t,this.adventureGuy.row=e,this.anime=i,this.frame=0,this.move=!0}idleCharacter(t,e,i,n,s){this.frame>=i&&(this.adventureGuy.column+=s,this.frame=0,this.adventureGuy.column===e+s&&(this.adventureGuy.column=t,this.adventureGuy.row=n))}createNewClouds(){for(let t=0;t<this.cloudArr.length;t++)this.cloudArr[t].x<0-this.cloudArr[t].width&&(this.cloudArr.splice(t,1),this.generateCloud(1,this.ctx,400))}titleClick(t){!1===this.themeMusic&&(this.themeMusic=!0),"mousedown"==t.type&&this.btn.clicked(this.gx,this.gy)?this.mouseState="down":"mouseup"==t.type&&this.btn.clicked(this.gx,this.gy)?(this.btn.color=k,this.mouseState="up",this.beginTheGame()):"mouseup"!=t.type||this.btn.clicked(this.gx,this.gy)||(this.mouseState="up",this.btn.color=k),"mouseup"==t.type&&this.soundImage.clicked(this.gx,this.gy)&&(this.soundImage.color===A?(this.soundImage.color=C,this.allSounds=!1):(this.soundImage.color=A,this.allSounds=!0)),"mouseup"==t.type&&this.musicImage.clicked(this.gx,this.gy)&&(this.musicImage.color===b?(this.musicImage.color=S,this.beginTheme.stop()):(this.musicImage.color=b,this.beginTheme.play()))}beginTheGame(){this.beginGame=!0,this.move=!1,this.initMove(5,1,"runLeft"),this.adventureGuy.speedX=-2,document.cookie="start=true"}titleHover(t){this.btn.clicked(this.gx,this.gy)&&"down"!==this.mouseState?!1===this.mouseOnBegin&&(!0===this.allSounds&&this.beginSound.play(),this.mouseOnBegin=!0):this.btn.clicked(this.gx,this.gy)||(this.btn.color=k,!0===this.mouseOnBegin&&(!0===this.allSounds&&this.beginSound.play(),this.mouseOnBegin=!1)),this.btn.clicked(this.gx,this.gy)&&this.mouseState}animate(){this.myBackground1.newPos(),this.myBackground1.update(),this.myBackground2.newPos(),this.myBackground2.update(),this.myBackground.newPos(),this.myBackground.update(),this.myCastle.newPos(),this.myCastle.update();for(let t=0;t<this.cloudArr.length;t++)this.cloudArr[t].newPos(),this.cloudArr[t].update();this.createNewClouds(),this.myCliff.newPos(),this.myCliff.update(),this.adventureGuy.newPos(),this.adventureGuy.update(),this.btn.newPos(),this.btn.update(),this.soundImage.newPos(),this.soundImage.update(),this.musicImage.newPos(),this.musicImage.update(),this.titleWords.text="Tower",this.titleWords.update(),this.titleWords2.text="of Dreams",this.titleWords2.update(),this.frame++,this.move&&("idleRight"===this.anime?this.idleCharacter(3,6,13,5,1):"runLeft"===this.anime&&this.idleCharacter(5,0,8,1,-1))}}class I{constructor(t,e,i){this.canvas=t,this.ctx=e,this.dimensions=i,this.myBackground=new n(300,150,"black",0,0,this.ctx,"other"),this.titleWords=new n("16px","TitleScreen","white",25,65,this.ctx,"text"),this.titleWords2=new n("16px","TitleScreen","white",25,80,this.ctx,"text")}animate(){this.myBackground.update(),this.titleWords.text='"...the one that makes it to the top',this.titleWords.update(),this.titleWords2.text='will have their greatest desire fulfilled..."',this.titleWords2.update()}}var q=i(2715),B=i(6999),j=i(4767),E=i(6284),N=(i(7180),i(9715)),z=i(4524);class M{constructor(t,e,i){this.canvas=t,this.ctx=e,this.dimensions=i,this.myBackground=new n(300,150,"black",0,0,this.ctx,"other"),this.myHouse=new n(300,150,q,0,0,this.ctx,"image"),this.adventureGuy=new n(55,30,l,85,60,this.ctx,"sprite",5,3,50,37),this.myMapImage=new n(20.7,11.4,B,138.6,59.6,this.ctx,"image"),this.myMap=new n(1,1,"invisible",147.2,64,this.ctx,"Other"),this.myTraining=new n(12,15,"invisible",75,0,this.ctx,"other"),this.move=!0,this.yesInvisibleBox=new n(38.38,11.36,"invisible",115.99,84.69,this.ctx,"other"),this.noInvisibleBox=new n(38.38,11.36,"invisible",115.99,84.69,this.ctx,"other"),this.goldSushi=new n(17.180000000000007,7.8984210526315834,N,232.71455210911583,32.76578947368421,this.ctx,"image"),this.askIfTrainingBox=!1,this.anime="idleRight",this.frame=0,this.instaElements=[],this.createInstaElements(),this.currentImports=["./home.png","./component","./adventure.png","./adventureReversed.png","./map.png","./simpleYesNoHomeBox.png"]}createInstaElements(){this.instaElements=[new n(15.15,7.15,"black",171.38,17.69,this.ctx,"other"),new n(13.320090701290027,6.001171088144297,r,172.1428108924363,18.363964847607136,this.ctx,"image"),new n(13.335414360422945,5.991820738800612,h,172.12748723330338,18.37331519695082,this.ctx,"image"),new n(13.320090701290027,5.991820738800612,a,172.1428108924363,18.37331519695082,this.ctx,"image"),new n(3.6133188235423503,4.810170340492327,c,180.4229501049092,19.11450198584417,this.ctx,"image"),new n(3.6131220930336276,4.200954356474433,c,180.42324936787026,18.43768102047705,this.ctx,"image"),new n(1.333924527520617,.4061557996163492,f,180.09731750275563,22.66621216758214,this.ctx,"image"),new n(1.2404502068098102,.4990748962192262,g,181.10529698518664,22.776842362177423,this.ctx,"image"),new n(1.2098028885439716,.4984904993852455,m,182.17521052675852,22.573959639601636,this.ctx,"image"),new n(1.2251265476768909,.5265415474163024,v,180.22144398731132,23.118617488871326,this.ctx,"image"),new n(1.3186008683876977,.47102384818816834,y,181.663400311719,23.15543448941209,this.ctx,"image"),new n(1.6442286249622313,.4984904993852455,w,182.7642230266476,22.934280238781536,this.ctx,"image"),new n(1.1473825270914242,.44357431611367293,m,183.3537121376904,23.478588819480645,this.ctx,"image"),new n(1.178389387321488,.5358918967599884,f,180.2835048067996,23.653924988797332,this.ctx,"image"),new n(1.3484820036968905,.5078408487289314,m,180.7646677035733,23.432438588718778,this.ctx,"image"),new n(1.4733698256301828,.5633585479570655,w,181.98902806829352,23.524773288487676,this.ctx,"image"),new n(.9615596105906805,.388039497762958,m,179.2601884852607,22.93376089461336,this.ctx,"image"),new n(1.2090367055873257,.5078408487289314,y,182.67173933611423,23.792662166714077,this.ctx,"image"),new n(1.1944792294110522,.4984904993852455,f,184.1443007253386,23.164784838755775,this.ctx,"image"),new n(1.3025110262981325,.4429728001571114,f,183.7257500749472,22.49087826799182,this.ctx,"image"),new n(1.085681249567326,.3325217985348239,w,184.31515952467066,23.672625687484707,this.ctx,"image"),new n(1.2404502068098102,.35122249722219534,w,179.40009585778682,23.330753539606196,this.ctx,"image"),new n(1.178389387321488,.5540081986133796,y,179.16717623896648,23.617107988256574,this.ctx,"image"),new n(1.0389440892119222,.4429728001571114,y,178.3297382673524,22.67564468871422,this.ctx,"image"),new n(1.3645718457864557,.4984904993852455,y,176.8571346246789,22.58330998894532,this.ctx,"image"),new n(1.3484820036968905,.37868914841927204,w,177.57045095731627,23.257119538524673,this.ctx,"image"),new n(1.2404502068098102,.47102384818816834,y,177.97346319251204,23.589641337059494,this.ctx,"image"),new n(1.4572799835406176,.48914015004155953,p,178.37632095064828,23.072560855469543,this.ctx,"image"),new n(1.4105428231852137,.5721245004667708,f,176.59356768759267,23.589641337059494,this.ctx,"image"),new n(1.3025110262981325,.47102384818816834,w,175.44859841783813,23.478605938603227,this.ctx,"image"),new n(1.4726036426735352,.48972454687554023,v,175.29105666129453,23.15543448941209,this.ctx,"image"),new n(1.4580461664972635,.48914015004155953,y,172.33247738290646,22.684995038057902,this.ctx,"image"),new n(1.3484820036968905,.48914015004155953,g,172.62397378920997,22.84161338956464,this.ctx,"image"),new n(1.860292218736392,.5078408487289314,p,173.02698602440574,23.257119538524673,this.ctx,"image"),new n(.046737160355403595,.009350349343685727,p,162.99458639008353,22.693760990567608,this.ctx,"image"),new n(1.6894334194043434,.4990748962192262,p,172.514881423219,23.79242703845068,this.ctx,"image"),new n(1.3186008683876977,.5908251991541418,w,172.46843864901084,23.663275338141023,this.ctx,"image"),new n(4.341192632356012,2.5573205454980474,u,172.14335747375117,21.392222491582295,this.ctx,"image"),new n(4.434993932739943,3.0744917776726446,u,172.1428108924363,21.290610496882707,this.ctx,"image"),new n(2.761798336334279,2.5339735478090826,E,173.87352759595677,20.568120553468336,this.ctx,"image"),new n(2.2196382494308304,.7865038509643902,g,176.55856311662026,23.096503192679883,this.ctx,"image")]}drawInstaElements(){for(let t=0;t<this.instaElements.length;t++)this.instaElements[t].update()}initMove(t,e,i){this.adventureGuy.color="idleRight"===i?l:"idleLeft"===i||"runLeft"===i?d:"runRight"===i?l:d,this.adventureGuy.column=t,this.adventureGuy.row=e,this.anime=i,this.frame=0,this.move=!0}idleCharacter(t,e,i,n,s){this.frame>=i&&(this.adventureGuy.column+=s,this.frame=0,this.adventureGuy.column===e+s&&(this.adventureGuy.column=t,this.adventureGuy.row=n))}hover(t){!1===this.adventureGuy.moving&&("left"===this.adventureGuy.dir(this.gx,this.gy)&&"idleLeft"!==this.anime?(this.move=!1,this.initMove(3,5,"idleLeft")):"right"===this.adventureGuy.dir(this.gx,this.gy)&&"idleRight"!==this.anime&&(this.move=!1,this.initMove(3,5,"idleRight")))}checkIfStartTrainingOrTower(t){this.myMapImage.intersecting(this.adventureGuy)&&this.myMapImage.clicked(this.clickGX,this.clickGY)?this.checkTowerYesNo=!0:this.myTraining.intersecting(this.adventureGuy)?(this.yesInvisibleBox.clicked(this.gx,this.gy)&&(this.beginTraining=!0),this.noInvisibleBox.clicked(this.gx,this.gy)):this.checkTowerYesNo=!1}checkTower(){this.yesInvisibleBox.clicked(this.gx,this.gy)&&(this.beginTower=!0)}click(t){"mouseup"===t.type&&(this.clickGX=this.gx,this.clickGY=this.gy,this.clickedSpotx=this.gx,this.clickedSpoty=this.gy,"left"===this.adventureGuy.dir(this.gx,this.gy)&&(this.move=!1,this.initMove(5,1,"runLeft")),"right"===this.adventureGuy.dir(this.gx,this.gy)&&(this.move=!1,this.initMove(1,1,"runRight")),this.adventureGuy.moveToMouse(this.gx,this.gy,.8),this.checkSpeed(),this.checkIfMovedToSpot(),!0===this.checkTowerYesNo&&this.checkTower())}checkIfMovedToSpot(){this.myTraining.intersecting(this.adventureGuy)?(this.askIfTrainingBox=!0,this.trainingBoxImage=new n(121.7680246284894,82.58208163658705,j,98.42360770334705,32.66812245488062,this.ctx,"image"),this.startTrainingText=new n("10px","PixelFont","Black",120.42,70.14,this.ctx,"text"),this.startTrainingTextShadow=new n("10px","PixelFont","Gray",120.92,70.64,this.ctx,"text"),this.startTrainingTextShadow.text="Start Training?",this.startTrainingText.text="Start Training?",this.yesText=new n("9px","PixelFont","Black",126.18,95.04,this.ctx,"text"),this.yesTextShadow=new n("9px","PixelFont","Gray",126.68,95.54,this.ctx,"text"),this.yesText.text="Yes",this.yesTextShadow.text="Yes",this.noText=new n("9px","PixelFont","Black",175.18,95.04,this.ctx,"text"),this.noTextShadow=new n("9px","PixelFont","Gray",175.68,95.54,this.ctx,"text"),this.noText.text="No",this.noTextShadow.text="No",this.noInvisibleBox=new n(39.38,11.36,"invisible",162.99,84.69,this.ctx,"other"),this.yesInvisibleBox=new n(38.38,11.36,"invisible",115.99,84.69,this.ctx,"other")):this.myMap.intersecting(this.adventureGuy)&&this.myMapImage.clicked(this.clickGX,this.clickGY)?(this.askIfTrainingBox=!0,this.trainingBoxImage=new n(165.7680246284894,82.58208163658705,j,78.42360770334705,32.66812245488062,this.ctx,"image"),this.startTrainingText=new n("10px","PixelFont","Black",105.42,70.14,this.ctx,"text"),this.startTrainingTextShadow=new n("10px","PixelFont","Gray",105.92,70.64,this.ctx,"text"),this.startTrainingTextShadow.text="Challenge the Tower?",this.startTrainingText.text="Challenge the Tower?",this.yesText=new n("9px","PixelFont","Black",120.18,95.04,this.ctx,"text"),this.yesTextShadow=new n("9px","PixelFont","Gray",120.68,95.54,this.ctx,"text"),this.yesText.text="Yes",this.yesTextShadow.text="Yes",this.noText=new n("9px","PixelFont","Black",187.18,95.04,this.ctx,"text"),this.noTextShadow=new n("9px","PixelFont","Gray",187.68,95.54,this.ctx,"text"),this.noText.text="No",this.noTextShadow.text="No",this.noInvisibleBox=new n(39.38,11.36,"invisible",162.99,84.69,this.ctx,"other"),this.yesInvisibleBox=new n(38.38,11.36,"invisible",115.99,84.69,this.ctx,"other")):this.askIfTrainingBox=!1}askIfTraining(){this.trainingBoxImage.update(),this.startTrainingTextShadow.update(),this.startTrainingText.update(),this.yesTextShadow.update(),this.yesText.update(),this.noTextShadow.update(),this.noText.update(),this.noInvisibleBox.update(),this.yesInvisibleBox.update()}checkSpeed(){this.adventureGuy.speedX>0?this.anime="runRight":this.adventureGuy.speedX<0?this.anime="runLeft":0===this.adventureGuy.speedX&&"runLeft"===this.anime?(this.move=!1,this.initMove(3,5,"idleLeft")):0===this.adventureGuy.speedX&&"runRight"===this.anime&&(this.move=!1,this.initMove(3,5,"idleRight"))}boundaries(){this.adventureGuy.x<20?(this.adventureGuy.x=20,this.adventureGuy.speedX=0,this.adventureGuy.speedY=0):this.adventureGuy.x>236?(this.adventureGuy.x=236,this.adventureGuy.speedX=0,this.adventureGuy.speedY=0):this.adventureGuy.y>92?(this.adventureGuy.y=92,this.adventureGuy.speedX=0,this.adventureGuy.speedY=0):this.adventureGuy.y<5&&(this.adventureGuy.y=5,this.adventureGuy.speedX=0,this.adventureGuy.speedY=0)}pulsingGlow(){this.alphaClone>=.2&&(this.alphaDir=-.002),this.alphaClone+=this.alphaDir,this.ctx.globalAlpha=this.alphaClone,this.flashBox.update(),this.ctx.globalAlpha=1,this.alphaClone<=.002&&(this.alphaDir=.002,this.alphaClone=.003)}startPulsingGlow(){this.flashBox=new n(22.22,14.47,"white",89.1,17.13,this.ctx,"circle"),this.trainingPulse=!0,this.alphaDir=.002,this.alphaClone=0}startPulsingGlow2(){this.flashBox=new n(24.74,10.55,"white",137.07,60.55,this.ctx,"circle"),this.trainingPulse=!0,this.alphaDir=.002,this.alphaClone=0}animate(t){this.boundaries(),this.checkSpeed(),this.checkIfMovedToSpot(),this.adventureGuy.checkIfStillMoving(this.clickedSpotx,this.clickedSpoty),this.myBackground.update(),this.myHouse.update(),this.myMapImage.update(),!0===this.trainingPulse&&this.pulsingGlow(),this.myTraining.update(),this.drawInstaElements(),!0===this.getTheItem&&this.goldSushi.update(),this.adventureGuy.newPos(),this.adventureGuy.update(),!0===this.askIfTrainingBox&&this.askIfTraining(),this.frame++,this.move&&("idleRight"===this.anime?this.idleCharacter(3,6,13,5,1):"runLeft"===this.anime?this.idleCharacter(5,0,8,1,-1):"idleLeft"===this.anime?this.idleCharacter(3,0,13,5,-1):"runRight"===this.anime&&this.idleCharacter(1,6,8,1,1)),this.checkIfStartTrainingOrTower(t)}}class L{constructor(t,e,i,s,r,h){this.game=s,this.canvas=t,this.canvas2=r,this.ctx=e,this.ctx2=h,this.dimensions=i,this.groupingImages=!1,this.mousePos=new n("7px","Consolas","white",245,5,this.ctx,"text"),this.printButton=new n("7px","Consolas","white",280,150,this.ctx,"text"),this.printButtonButton=new n(20.67,6.21,"invisible",278.51,143.57,this.ctx,"other"),this.largeSelectionBox=new n(0,0,"transparent2",0,0,this.ctx,"other"),this.firstClick=[0,0],this.secondClick=[0,0],this.clickDiff=[0,0],this.clickNum=1,this.moveImage=!1,this.drawDummy=!1,this.firstImagePos=0,this.imagesArr=this.loadAllImages(),this.tempDummyArr=[],this.dummyImageArr=[],this.mouseClicksArr=[],this.mouseClickXYArr=[],this.mouseClickPosIncrement=11,this.currentlySelectedArr=[],this.selectionCoverComponentsArr=[],this.allSelectionStaticInfoArr=[],this.largestTop=0,this.largestBottom=0,this.largestRight=0,this.largestLeft=0,this.changingAllImage=!1,this.colors=["white","blue","yellow","green","red","orange","purple","cyan"]}images(){const t=i(2532);return this.pathkeys=t.keys(),t.keys().map(t)}loadAllImages(){let t=this.images(),e=[],i=0;this.pathKeysHash={};for(let s=0;s<t.length;s++)this.pathKeysHash[t[s]]=this.pathkeys[s],e.push(new n(5,15,t[s],i,this.firstImagePos,this.ctx2,"image")),this.firstImagePos+=this.canvas2.width/7,this.firstImagePos>this.canvas2.height/4.5&&(this.firstImagePos=0,i+=5);return e}createMouseClick(){this.newClick=new n("7px","Consolas",this.colors[Math.floor(this.mouseClicksArr.length/3)],245,this.mouseClickPosIncrement+6*this.mouseClicksArr.length,this.ctx,"text"),this.mouseClicksArr.push(this.newClick)}saveClicks(t,e,i){1===this.clickNum?(!1===this.groupingImages&&(this.temp=!0),this.drawDummy=!0,this.secondClick=[0,0],this.clickDiff=[0,0],this.firstClick=[(t/4).toFixed(2),(e/4).toFixed(2)],this.createMouseClick(),this.mouseClickXYArr.push([(t/4).toFixed(2),(e/4).toFixed(2)]),this.clickNum++):(this.temp=!1,this.tempDummyArr=[],this.secondClick=[(t/4).toFixed(2),(e/4).toFixed(2)],this.createMouseClick(),this.mouseClickXYArr.push([(t/4).toFixed(2),(e/4).toFixed(2)]),this.clickNum--,this.clickDiff=[Math.abs(this.secondClick[0]-this.firstClick[0]).toFixed(2),Math.abs(this.secondClick[1]-this.firstClick[1]).toFixed(2)],this.createMouseClick(),this.mouseClickXYArr.push(this.clickDiff),this.firstClick[0]!==this.secondClick[0]&&this.firstClick[1]!==this.secondClick[1]&&!1===this.moveImage&&!1===this.groupingImages?(this.makingImage=!0,this.createDummyComponent(),this.drawDummy=!0):(this.makingImage=!1,this.imageFound=!1,this.imageSelectorWasClicked=this.imageSelectorClicked(),!1===this.moveImage&&(this.dummyImageWasClicked=this.dummyImageClicked()),!1===this.imageSelectorWasClicked&&!1===this.dummyImageWasClicked&&!1===this.moveImage&&!1===this.groupingImages&&(!0===this.changingAllImage?(this.currentlySelectedArr=[],this.selectionCoverComponentsArr=[],this.changingAllImage=!1):(this.drawDummy=!1,this.imageSelection=void 0,this.dummyImageArr=[],this.mouseClicksArr=[],this.mouseClickXYArr=[],this.mouseClickPosIncrement=11)),this.removeMouseClicksPos(this.dummyImageArr.length)),this.groupingImages=!1,this.currentlySelectedArr.length>0&&(this.changingAllImage=!0,this.settingTestSelectionVariables=!0)),this.checkIfEditingImage(i),this.checkIfGroupingImages(i),this.checkIfMovingLayer(i),this.checkIfPrintClicked(i)}checkIfPrintClicked(t){this.printButtonButton.clicked(this.gx,this.gy)&&"mouseup"===t.type&&this.printComponentsAndImports()}checkIfMovingLayer(t){if("mousedown"===t.type&&this.wasDummyImageClicked()){this.moveLayerOnMouseUp=!1;let e=t.x,i=t.y;this.el=t,setTimeout((()=>{e===this.el.x&&i===this.el.y&&(this.moveLayerOnMouseUp=!0,this.elx=e,this.ely=i)}),150)}else if(!0===this.moveLayerOnMouseUp&&"mouseup"===t.type&&this.elx===t.x&&this.ely===t.y){let t=this.getDummyImage(this.el.x,this.el.y),e=this.dummyImageArr.indexOf(t);if(0!==e){let i=this.dummyImageArr[e-1];this.dummyImageArr[e-1]=t,this.dummyImageArr[e]=i}}}redrawTopAndLeft(){this.testSelection.x=this.gx/4-Math.abs(this.gxNow/4-this.testSelectionX),this.testSelection.x<this.testSelectionX?this.testSelection.width=Number(this.testSelectionWidth)+Number(Math.abs(this.testSelectionX-this.testSelection.x)):this.testSelection.width=Math.abs(this.testSelectionWidth-Math.abs(this.testSelectionX-this.testSelection.x)),this.testSelection.y=this.gy/4-Math.abs(this.gyNow/4-this.testSelectionY),this.testSelection.y<this.testSelectionY?this.testSelection.height=Number(this.testSelectionHeight)+Number(Math.abs(this.testSelectionY-this.gy/4)):this.testSelection.height=Math.abs(this.testSelectionHeight-Math.abs(this.testSelectionY-this.testSelection.y))}redrawBottomAndRight(){if(!0===this.changingAllImage){let t=Math.abs(this.testSelection.width-this.testSelectionWidth)/this.testSelectionWidth,e=Math.abs(this.testSelection.height-this.testSelectionHeight)/this.testSelectionHeight;for(let i=0;i<this.currentlySelectedArr.length;i++)this.gxNow>=this.gx?(this.currentlySelectedArr[i].width=this.allSelectionStaticInfoArr[4*i+2]-this.allSelectionStaticInfoArr[4*i+2]*t,this.currentlySelectedArr[i].height=this.allSelectionStaticInfoArr[4*i+3]-this.allSelectionStaticInfoArr[4*i+3]*e,this.selectionCoverComponentsArr[i].width=this.currentlySelectedArr[i].width,this.selectionCoverComponentsArr[i].height=this.currentlySelectedArr[i].height,this.currentlySelectedArr[i].x>this.testSelectionX&&(this.currentlySelectedArr[i].x=this.allSelectionStaticInfoArr[4*i]-Math.abs(this.allSelectionStaticInfoArr[4*i]-this.testSelectionX)*t,this.selectionCoverComponentsArr[i].x=this.currentlySelectedArr[i].x),this.currentlySelectedArr[i].y>this.testSelectionY&&(this.currentlySelectedArr[i].y=this.allSelectionStaticInfoArr[4*i+1]-Math.abs(this.allSelectionStaticInfoArr[4*i+1]-this.testSelectionY)*e,this.selectionCoverComponentsArr[i].y=this.currentlySelectedArr[i].y)):(this.currentlySelectedArr[i].width=Number(this.allSelectionStaticInfoArr[4*i+2])+Number(this.allSelectionStaticInfoArr[4*i+2]*t),this.currentlySelectedArr[i].height=Number(this.allSelectionStaticInfoArr[4*i+3])+Number(this.allSelectionStaticInfoArr[4*i+3]*e),this.selectionCoverComponentsArr[i].width=this.currentlySelectedArr[i].width,this.selectionCoverComponentsArr[i].height=this.currentlySelectedArr[i].height,this.currentlySelectedArr[i].x>this.testSelectionX&&(this.currentlySelectedArr[i].x=Number(this.allSelectionStaticInfoArr[4*i])+Number(Math.abs(this.allSelectionStaticInfoArr[4*i]-this.testSelectionX)*t),this.selectionCoverComponentsArr[i].x=this.currentlySelectedArr[i].x),this.currentlySelectedArr[i].y>this.testSelectionY&&(this.currentlySelectedArr[i].y=Number(this.allSelectionStaticInfoArr[4*i+1])+Number(Math.abs(this.allSelectionStaticInfoArr[4*i+1]-this.testSelectionY)*e),this.selectionCoverComponentsArr[i].y=this.currentlySelectedArr[i].y))}else this.testSelection.width=Math.abs(this.testSelectionX-this.gx/4)+Math.abs(this.testSelectionX+Number(this.testSelectionWidth)-this.gxNow/4),this.testSelection.height=Math.abs(this.testSelectionY-this.gy/4)+Math.abs(this.testSelectionY+Number(this.testSelectionHeight)-this.gyNow/4)}redrawTopAndRight(){this.testSelection.width=Math.abs(this.testSelectionX-this.gx/4)+Math.abs(this.testSelectionX+Number(this.testSelectionWidth)-this.gxNow/4),this.testSelection.y=this.gy/4-Math.abs(this.gyNow/4-this.testSelectionY),this.testSelection.y<this.testSelectionY?this.testSelection.height=Number(this.testSelectionHeight)+Number(Math.abs(this.testSelectionY-this.gy/4)):this.testSelection.height=Math.abs(this.testSelectionHeight-Math.abs(this.testSelectionY-this.testSelection.y))}redrawBottomAndLeft(){this.testSelection.x=this.gx/4-Math.abs(this.gxNow/4-this.testSelectionX),this.testSelection.x<this.testSelectionX?this.testSelection.width=Number(this.testSelectionWidth)+Number(Math.abs(this.testSelectionX-this.testSelection.x)):this.testSelection.width=Math.abs(this.testSelectionWidth-Math.abs(this.testSelectionX-this.testSelection.x)),this.testSelection.height=Math.abs(this.testSelectionY-this.gy/4)+Math.abs(this.testSelectionY+Number(this.testSelectionHeight)-this.gyNow/4)}redrawTop(){this.testSelection.y=this.gy/4-Math.abs(this.gyNow/4-this.testSelectionY),this.testSelection.y<this.testSelectionY?this.testSelection.height=Number(this.testSelectionHeight)+Number(Math.abs(this.testSelectionY-this.gy/4)):this.testSelection.height=Math.abs(this.testSelectionHeight-Math.abs(this.testSelectionY-this.testSelection.y))}redrawBottom(){this.testSelection.height=Math.abs(this.testSelectionY-this.gy/4)+Math.abs(this.testSelectionY+Number(this.testSelectionHeight)-this.gyNow/4)}redrawRight(){this.testSelection.width=Math.abs(this.testSelectionX-this.gx/4)+Math.abs(this.testSelectionX+Number(this.testSelectionWidth)-this.gxNow/4)}redrawLeft(){!0===this.changingAllImage||(this.testSelection.x=this.gx/4-Math.abs(this.gxNow/4-this.testSelectionX),this.testSelection.x<this.testSelectionX?this.testSelection.width=Number(this.testSelectionWidth)+Number(Math.abs(this.testSelectionX-this.testSelection.x)):this.testSelection.width=Math.abs(this.testSelectionWidth-Math.abs(this.testSelectionX-this.testSelection.x)))}redrawWhole(){if(!0===this.changingAllImage){this.testSelection.width=0,this.testSelection.height=0;for(let t=0;t<this.currentlySelectedArr.length;t++)this.currentlySelectedArr[t].x<this.gx/4?(this.currentlySelectedArr[t].x=this.gx/4-Math.abs(this.gxNow/4-this.allSelectionStaticInfoArr[4*t]),this.selectionCoverComponentsArr[t].x=this.gx/4-Math.abs(this.gxNow/4-this.allSelectionStaticInfoArr[4*t])):(this.currentlySelectedArr[t].x=this.gx/4+Math.abs(this.gxNow/4-this.allSelectionStaticInfoArr[4*t]),this.selectionCoverComponentsArr[t].x=this.currentlySelectedArr[t].x),this.currentlySelectedArr[t].y<this.gy/4?(this.currentlySelectedArr[t].y=this.gy/4-Math.abs(this.gyNow/4-this.allSelectionStaticInfoArr[4*t+1]),this.selectionCoverComponentsArr[t].y=this.gy/4-Math.abs(this.gyNow/4-this.allSelectionStaticInfoArr[4*t+1])):(this.currentlySelectedArr[t].y=this.gy/4+Math.abs(this.gyNow/4-this.allSelectionStaticInfoArr[4*t+1]),this.selectionCoverComponentsArr[t].y=this.currentlySelectedArr[t].y)}else this.testSelection.x=this.gx/4-Math.abs(this.gxNow/4-this.testSelectionX),this.testSelection.y=this.gy/4-Math.abs(this.gyNow/4-this.testSelectionY)}drawNow(){!0===this.changingAllImage&&this.redrawTestSelection(),this.settingTestSelectionVariables=!1,!0===this.redrawTopAndLeftDir?this.redrawTopAndLeft():!0===this.redrawBottomAndRightDir?this.redrawBottomAndRight():!0===this.redrawTopAndRightDir?this.redrawTopAndRight():!0===this.redrawBottomAndLeftDir?this.redrawBottomAndLeft():!0===this.redrawRightDir?this.redrawRight():!0===this.redrawLeftDir?this.redrawLeft():!0===this.redrawTopDir?this.redrawTop():!0===this.redrawBottomDir?this.redrawBottom():!0===this.redrawWholeDir&&this.redrawWhole(),new n(this.testSelection.width,this.testSelection.height,"transparent",this.testSelection.x,this.testSelection.y,this.ctx,"other").update()}redrawTestSelection(){this.testSelection.width=Math.abs(this.testSelectionX-this.gx/4)+Math.abs(this.testSelectionX+Number(this.testSelectionWidth)-this.gxNow/4),this.testSelection.height=Math.abs(this.testSelectionY-this.gy/4)+Math.abs(this.testSelectionY+Number(this.testSelectionHeight)-this.gyNow/4)}redrawImage(){this.createStaticInfoForSelections(),this.redrawTopAndLeftDir=!1,this.redrawBottomAndRightDir=!1,this.redrawTopAndRightDir=!1,this.redrawBottomAndLeftDir=!1,this.redrawRightDir=!1,this.redrawLeftDir=!1,this.redrawTopDir=!1,this.redrawBottomDir=!1,this.redrawWholeDir=!1,this.gx/4<this.testSelection.x+.1*this.testSelection.width&&this.gy/4<this.testSelection.y+.1*this.testSelection.height?(this.redrawTopAndLeftDir=!0,this.chooseDir=!1):this.gx/4>this.testSelection.x+.9*this.testSelection.width&&this.gy/4>this.testSelection.y+.9*this.testSelection.height?(this.redrawBottomAndRightDir=!0,this.chooseDir=!1):this.gx/4>this.testSelection.x+.9*this.testSelection.width&&this.gy/4<this.testSelection.y+.1*this.testSelection.height?(this.redrawTopAndRightDir=!0,this.chooseDir=!1):this.gx/4<this.testSelection.x+.1*this.testSelection.width&&this.gy/4>this.testSelection.y+.9*this.testSelection.height?(this.redrawBottomAndLeftDir=!0,this.chooseDir=!1):this.gx/4>this.testSelection.x+.9*this.testSelection.width?(this.redrawRightDir=!0,this.chooseDir=!1):this.gx/4<this.testSelection.x+.1*this.testSelection.width?(this.redrawLeftDir=!0,this.chooseDir=!1):this.gy/4<this.testSelection.y+.1*this.testSelection.height?(this.redrawTopDir=!0,this.chooseDir=!1):this.gy/4>this.testSelection.y+.9*this.testSelection.height?(this.redrawBottomDir=!0,this.chooseDir=!1):(this.redrawWholeDir=!0,this.chooseDir=!1)}checkIfEditingImage(t){if(this.imageClicked=this.wasDummyImageClicked(),!0===this.imageClicked?this.wasDummyImage=!0:"mousedown"===t.type&&!1===this.imageClicked&&(this.wasDummyImage=!1),this.e=t,"mouseup"===t.type&&!0===this.moveImage?(this.updateMousePosForImage(),this.wasEditMode=!0):!0===this.wasDummyImage||!0===this.wasImageSelectorClicked()||!0===this.makingImage?this.wasEditMode=!0:this.wasEditMode=!1,this.moveImage=!1,!0===this.imageClicked){let t=this.gx,e=this.gy;setTimeout((()=>{t===this.gx&&e===this.gy&&"mousedown"===this.e.type&&(this.temp=!1,!0===this.changingAllImage?(this.moveImage=!0,this.chooseDir=!0):(void 0===this.testSelection&&(this.testSelection=new n(this.dummyImageArr[0].width,this.dummyImageArr[0].height,"transparent2",this.dummyImageArr[0].x,this.dummyImageArr[0].y,this.ctx,"other")),this.testSelectionX=this.testSelection.x,this.testSelectionY=this.testSelection.y,this.testSelectionWidth=this.testSelection.width,this.testSelectionHeight=this.testSelection.height,this.gxNow=this.gx,this.gyNow=this.gy,this.moveImage=!0,this.chooseDir=!0))}),150)}}createStaticInfoForSelections(){this.allSelectionStaticInfoArr=[];for(let t=0;t<this.currentlySelectedArr.length;t++)this.allSelectionStaticInfoArr.push(this.currentlySelectedArr[t].x),this.allSelectionStaticInfoArr.push(this.currentlySelectedArr[t].y),this.allSelectionStaticInfoArr.push(this.currentlySelectedArr[t].width),this.allSelectionStaticInfoArr.push(this.currentlySelectedArr[t].height);this.gxNow=this.gx,this.gyNow=this.gy}checkIfGroupingImages(t){if(!1===this.imageClicked){let t=this.gx,e=this.gy;setTimeout((()=>{t===this.gx&&e===this.gy&&"mousedown"===this.e.type&&(this.groupingImages=!0,this.temp=!1)}),150)}}checkIfImagesAreInSelection(t){for(let e=0;e<this.dummyImageArr.length;e++){if(this.intersection=this.dummyImageArr[e].intersecting(t),!0===this.intersection){let t=this.currentlySelectedArr.indexOf(this.dummyImageArr[e]);-1===t&&this.createSelectionCoverComponent(this.dummyImageArr[e]),t=this.currentlySelectedArr.indexOf(this.dummyImageArr[e]),this.drawAllSelectionsBoxes(t)}if(!1===this.intersection&&this.currentlySelectedArr.indexOf(this.dummyImageArr[e])>-1){let t=this.currentlySelectedArr.indexOf(this.dummyImageArr[e]);this.currentlySelectedArr.splice(t,1),this.selectionCoverComponentsArr.splice(t,1)}}}calculateLargestTopBottomLeftRight(t,e){t.x=Number(t.x),t.y=Number(t.y),t.width=Number(t.width),t.height=Number(t.height),0===e&&(this.largestBottom=t.y+t.height,this.largestTop=this.largestTop=t.y,this.largestRight=t.x+t.width,this.largestLeft=t.x),t.x<this.largestLeft&&(this.largestLeft=t.x),t.x+t.width>this.largestRight&&(this.largestRight=t.x+t.width),t.y<this.largestTop&&(this.largestTop=t.y),t.y+t.height>this.largestBottom&&(this.largestBottom=t.y+t.height)}drawAllSelectionsBoxes(t){if("string"==typeof t){for(let t=0;t<this.selectionCoverComponentsArr.length;t++)this.selectionCoverComponentsArr[t].update(),this.calculateLargestTopBottomLeftRight(this.selectionCoverComponentsArr[t],t);!0===this.settingTestSelectionVariables&&(this.largeSelectionBox.x=this.largestLeft,this.largeSelectionBox.width=Math.abs(this.largestRight-this.largestLeft),this.largeSelectionBox.y=this.largestTop,this.largeSelectionBox.height=Math.abs(this.largestTop-this.largestBottom),this.testSelection=this.largeSelectionBox,this.testSelectionX=this.testSelection.x,this.testSelectionY=this.testSelection.y,this.testSelectionWidth=this.testSelection.width,this.testSelectionHeight=this.testSelection.height),this.testSelection.update()}else this.selectionCoverComponentsArr[t].update()}createSelectionCoverComponent(t){let e=new n(t.width,t.height,"transparent2",t.x,t.y,this.ctx,"other");this.selectionCoverComponentsArr.push(e),this.currentlySelectedArr.push(t)}drawGroupImageSelector(t,e){let i=new n(Math.abs(this.firstClick[0]-t/4),Math.abs(this.firstClick[1]-e/4),"transparent",this.firstClick[0],this.firstClick[1],this.ctx,"other");i.update(),this.checkIfImagesAreInSelection(i)}isEditMode(){return!0===this.wasEditMode}updateMousePosForImage(){let t=this.dummyImageArr.indexOf(this.testSelection),e=Number(this.testSelection.width).toFixed(2),i=Number(this.testSelection.height).toFixed(2);this.mouseClickXYArr[3*t]=[this.testSelection.x.toFixed(2),this.testSelection.y.toFixed(2)];let n=(Number(this.testSelection.x.toFixed(2))+Number(e)).toFixed(2),s=(Number(this.testSelection.y.toFixed(2))+Number(i)).toFixed(2);this.mouseClickXYArr[3*t+1]=[n,s],this.mouseClickXYArr[3*t+2]=[e,i]}imageSelectorClicked(){for(let t=0;t<this.imagesArr.length;t++)if(this.imagesArr[t].clicked(this.gx2,this.gy2))return this.imageSelection=this.imagesArr[t],this.imageFound=!0,!0;return!1}wasImageSelectorClicked(){for(let t=0;t<this.imagesArr.length;t++)if(this.imagesArr[t].clicked(this.gx,this.gy))return!0;return!1}getDummyImage(t,e){for(let t=this.dummyImageArr.length-1;t>-1;t--)if(this.dummyImageArr[t].clicked(this.gx,this.gy))return this.dummyImageArr[t]}wasDummyImageClicked(){for(let t=this.dummyImageArr.length-1;t>-1;t--)if(this.dummyImageArr[t].clicked(this.gx,this.gy))return!1===this.changingAllImage&&(this.testSelection=this.dummyImageArr[t]),!0;return void 0!==this.testSelection&&this.testSelection.clicked(this.gx,this.gy)}dummyImageClicked(){for(let t=this.dummyImageArr.length-1;t>-1;t--)if(this.dummyImageArr[t].clicked(this.gx,this.gy)&&!1===this.groupingImages)return this.removeMouseClicksPos(t),!0===this.changingAllImage&&this.currentlySelectedArr.includes(this.dummyImageArr[t])?this.removeImageFromSelection(this.dummyImageArr[t]):this.dummyImageArr.splice(t,1),!0;return!1}removeImageFromSelection(t){let e=this.currentlySelectedArr.indexOf(t);this.currentlySelectedArr.splice(e),this.selectionCoverComponentsArr.splice(e),this.currentlySelectedArr.length<1&&(this.changingAllImage=!1)}removeMouseClicksPos(t){for(let e=t;e<this.dummyImageArr.length;e++)this.mouseClicksArr[3*e].y-=18,this.mouseClicksArr[3*e+1].y-=18,this.mouseClicksArr[3*e+2].y-=18,this.mouseClicksArr[3*e].color=this.colors[this.colors.indexOf(this.mouseClicksArr[3*e].color)-1],this.mouseClicksArr[3*e+1].color=this.colors[this.colors.indexOf(this.mouseClicksArr[3*e+1].color)-1],this.mouseClicksArr[3*e+2].color=this.colors[this.colors.indexOf(this.mouseClicksArr[3*e+2].color)-1];this.mouseClicksArr.splice(3*t,3),this.mouseClickXYArr.splice(3*t,3)}createDummyComponent(){!0===this.temp&&(this.clickDiff=[Math.abs(this.gx/4-this.firstClick[0]).toFixed(2),Math.abs(this.gy/4-this.firstClick[1]).toFixed(2)]),void 0===this.imageSelection?this.dummy=new n(this.clickDiff[0],this.clickDiff[1],"red",this.firstClick[0],this.firstClick[1],this.ctx,"other"):this.dummy=new n(this.clickDiff[0],this.clickDiff[1],this.imageSelection.color,this.firstClick[0],this.firstClick[1],this.ctx,"image"),!1===this.temp&&this.dummyImageArr.push(this.dummy)}drawTempDummy(){this.dummy.update()}drawDummyComponent(){for(let t=0;t<this.dummyImageArr.length;t++)this.dummyImageArr[t].update()}drawMouseClicksComponent(){for(let t=0;t<this.dummyImageArr.length;t++)this.mouseClicksArr[3*t].text=`${this.mouseClickXYArr[3*t][0]}, ${this.mouseClickXYArr[3*t][1]}`,this.mouseClicksArr[3*t].update(),this.mouseClicksArr[3*t+1].text=`${this.mouseClickXYArr[3*t+1][0]}, ${this.mouseClickXYArr[3*t+1][1]}`,this.mouseClicksArr[3*t+1].update(),this.mouseClicksArr[3*t+2].text=`${this.mouseClickXYArr[3*t+2][0]}, ${this.mouseClickXYArr[3*t+2][1]}`,this.mouseClicksArr[3*t+2].update()}fixImportName(t){return t.split("").slice(0,1)[0].toUpperCase()+t.split("").slice(1,-4).join("")}printComponentsAndImports(){let t="",e="",i=[];for(let n=0;n<this.dummyImageArr.length;n++){"Home"===this.game.currentScreen&&this.game.home.currentImports.indexOf(this.pathKeysHash[this.dummyImageArr[n].color])<0&&!1===t.includes(this.pathKeysHash[this.dummyImageArr[n].color].split("").slice(1).join(""))&&(t+=`import ${this.fixImportName(this.pathKeysHash[this.dummyImageArr[n].color].slice(2))} from './../images/${this.pathKeysHash[this.dummyImageArr[n].color].slice(2)}'\n`),"Title"===this.game.currentScreen&&this.game.title.currentImports.indexOf(this.pathKeysHash[this.dummyImageArr[n].color])<0&&!1===t.includes(this.pathKeysHash[this.dummyImageArr[n].color].split("").slice(1).join(""))&&(t+=`import ${this.fixImportName(this.pathKeysHash[this.dummyImageArr[n].color].slice(2))} from './../images/${this.pathKeysHash[this.dummyImageArr[n].color].slice(2)}'\n`,i.push(this.pathKeysHash[this.dummyImageArr[n].color])),"Training"===this.game.currentScreen&&this.game.training.currentImports.indexOf(this.pathKeysHash[this.dummyImageArr[n].color])<0&&!1===t.includes(this.pathKeysHash[this.dummyImageArr[n].color].split("").slice(1).join(""))&&(t+=`import ${this.fixImportName(this.pathKeysHash[this.dummyImageArr[n].color].slice(2))} from './../images/${this.pathKeysHash[this.dummyImageArr[n].color].slice(2)}'\n`,i.push(this.pathKeysHash[this.dummyImageArr[n].color]));let s=this.fixImportName(this.pathKeysHash[this.dummyImageArr[n].color].slice(2));e+=`new Component(${this.dummyImageArr[n].width}, ${this.dummyImageArr[n].height}, ${s}, ${this.dummyImageArr[n].x}, ${this.dummyImageArr[n].y}, this.ctx, "image"),\n`}"Home"===this.game.currentScreen?i=i.concat(this.game.home.currentImports):"Title"===this.game.currentScreen?i=i.concat(this.game.title.currentImports):"Training"===this.game.currentScreen&&(i=i.concat(this.game.training.currentImports)),console.log(t),console.log(e),console.log(i)}showPrintButton(){this.currentlySelectedArr.length>0&&(this.printButton.text="Print",this.printButton.update(),this.printButtonButton.update())}animate(t,e,i,n){this.gx=t,this.gy=e,this.gx2=i,this.gy2=n,this.drawDummy&&(this.drawDummyComponent(),this.drawMouseClicksComponent()),!0===this.moveImage&&(!0===this.chooseDir?this.redrawImage():this.drawNow());for(let t=0;t<this.imagesArr.length;t++)this.imagesArr[t].update();!0===this.temp&&(this.createDummyComponent(),this.drawTempDummy()),!0===this.groupingImages&&this.drawGroupImageSelector(t,e),!0===this.changingAllImage&&this.drawAllSelectionsBoxes("all"),this.mousePos.text=`${(t/4).toFixed(2)}, ${(e/4).toFixed(2)}`,this.mousePos.update(),this.showPrintButton()}}class G{constructor(t,e,i,n){this.canvas=t,this.canvas2=n,this.ctx=e,this.dimensions=i}updateGxGy(t){let e=this.canvas.getBoundingClientRect();return this.gx=(t.clientX-e.left)/(e.right-e.left)*this.canvas.width,this.gy=(t.clientY-e.top)/(e.bottom-e.top)*this.canvas.height,[this.gx,this.gy]}updateGxGy2(t){let e=this.canvas2.getBoundingClientRect();return[(t.clientX-e.left)/(e.right-e.left)*this.canvas2.width,(t.clientY-e.top)/(e.bottom-e.top)*this.canvas2.height]}}var R=i(6616),H=i(5989),P=i(933),W=i(4856),D=i(4431),F=i(1298),O=i(8786),U=i(4492),Y=i(312),X=i(4677),Q=i(590);let K=[{id:1,type:"Vocab",english:["I","am/is/are","you","cool","pretty","book","have","car","this","that"],japanese:["わたし","は~です","あなた","かっこいい","きれい","ほん","が~あります","くるま","これ","それ"],japanese_sent:["わたし は さら です","わたし は さら です","あなた は とむ です","わたし は かっこいい です","あなた は きれい です","わたし は ほん が あります","あなた は くるま が あります","これ は ほん です","それ は くるま です","ほん です"],words:[{japanese:"わたし",english:"I",romanji:"watashi",example_japanese:"わたし は さら です.",example_romanji:"watashi wa sara desu.",example_english:"I am Sara.",seen:"false"},{japanese:"は~です",english:"am/is/are",romanji:"wa~desu",example_japanese:"わたし は さら です.",example_romanji:"watashi wa sara desu.",example_english:"I am Sara.",seen:"false"},{japanese:"あなた",english:"you",romanji:"anata",example_japanese:"あなた は とむ です.",example_romanji:"anata wa tomu desu.",example_english:"You are Tom.",seen:"false"},{japanese:"かっこいい",english:"cool",romanji:"kakkoii",example_japanese:"わたし は かっこいい です.",example_romanji:"watashi wa kakkoii desu.",example_english:"I am cool.",seen:"false"},{japanese:"きれい",english:"pretty",romanji:"kirei",example_japanese:"あなた は きれい です.",example_romanji:"anata wa kirei desu.",example_english:"You are pretty.",seen:"false"},{japanese:"ほん",english:"book",romanji:"hon",example_japanese:"ほん です.",example_romanji:"hon desu.",example_english:"It is a book.",seen:"false"},{japanese:"が~あります",english:"have",romanji:"ga~arimasu",example_japanese:"わたし は ほん が あります.",example_romanji:"watashi wa hon ga arimasu.",example_english:"I have a book.",seen:"false"},{japanese:"くるま",english:"car",romanji:"kuruma",example_japanese:"あなた は くるま が あります.",example_romanji:"anata wa kuruma ga arumasu.",example_english:"You have a car.",seen:"false"},{japanese:"これ",english:"this",romanji:"kore",example_japanese:"これ は ほん です.",example_romanji:"kore wa book desu.",example_english:"This is a book.",seen:"false"},{japanese:"それ",english:"that",romanji:"sore",example_japanese:"それ は くるま です.",example_romanji:"sore wa car desu.",example_english:"That is a car.",seen:"false"}],questions:[{question:"I",answer:"わたし",seen:"false",correct:0,japanese:"false"},{question:"am/is/are",answer:"は~です",seen:"false",correct:0,japanese:"false"},{question:"You",answer:"あなた",seen:"false",correct:0,japanese:"false"},{question:"わたし",answer:"I",seen:"false",correct:0,japanese:"true"},{question:"は~です",answer:"am/is/are",seen:"false",correct:0,japanese:"true"},{question:"あなた",answer:"you",seen:"false",correct:0,japanese:"true"},{question:"Cool",answer:"かっこいい",seen:"false",correct:0,japanese:"false"},{question:"Pretty",answer:"きれい",seen:"false",correct:0,japanese:"false"},{question:"Book",answer:"ほん",seen:"false",correct:0,japanese:"false"},{question:"Have",answer:"が~あります",seen:"false",correct:0,japanese:"false"},{question:"Car",answer:"くるま",seen:"false",correct:0,japanese:"false"},{question:"This",answer:"これ",seen:"false",correct:0,japanese:"false"},{question:"かっこいい",answer:"cool",seen:"false",correct:0,japanese:"true"},{question:"きれい",answer:"pretty",seen:"false",correct:0,japanese:"true"},{question:"ほん",answer:"book",seen:"false",correct:0,japanese:"true"},{question:"が~あります",answer:"have",seen:"false",correct:0,japanese:"true"},{question:"くるま",answer:"car",seen:"false",correct:0,japanese:"true"},{question:"これ",answer:"this",seen:"false",correct:0,japanese:"true"},{question:"それ",answer:"that",seen:"false",correct:0,japanese:"true"},{question:"That",answer:"それ",seen:"false",correct:0,japanese:"false"}],tower:[{question:"That",answer:"それ",seen:"false",correct:0,japanese:"false"},{question:"Have",answer:"が~あります",seen:"false",correct:0,japanese:"false"},{question:"am/is/are",answer:"は~です",seen:"false",correct:0,japanese:"false"},{question:"I",answer:"わたし",seen:"false",correct:0,japanese:"false"},{question:"You",answer:"あなた",seen:"false",correct:0,japanese:"false"},{question:"Cool",answer:"かっこいい",seen:"false",correct:0,japanese:"false"},{question:"Pretty",answer:"きれい",seen:"false",correct:0,japanese:"false"},{question:"Book",answer:"ほん",seen:"false",correct:0,japanese:"false"},{question:"Car",answer:"くるま",seen:"false",correct:0,japanese:"false"},{question:"This",answer:"これ",seen:"false",correct:0,japanese:"false"},{question:"You have a car",answer:"あなた は くるま が あります",seen:"false",correct:0,japanese:"false"},{question:"This is a book",answer:"これ は ほん です",seen:"false",correct:0,japanese:"false"},{question:"I am Sara",answer:"わたし は さら です",seen:"false",correct:0,japanese:"false"},{question:"That is a car",answer:"それ は くるま です",seen:"false",correct:0,japanese:"false"},{question:"I have a book",answer:"わたし は ほん が あります",seen:"false",correct:0,japanese:"false"},{question:"You are pretty",answer:"あなた は きれい です",seen:"false",correct:0,japanese:"false"},{question:"It is a book",answer:"ほん です",seen:"false",correct:0,japanese:"false"},{question:"I am cool",answer:"わたし は かっこいい です",seen:"false",correct:0,japanese:"false"},{question:"You are Tom",answer:"あなた は とむ です",seen:"false",correct:0,japanese:"false"},{question:"I am Sara",answer:"わたし は さら です",seen:"false",correct:0,japanese:"false"}]},{id:2,type:"Vocab",english:["I","am/is/are","you","cool","pretty","book","have","car","this","that"],japanese:["わたし","は~です","あなた","かっこいい","きれい","ほん","が~あります","くるま","これ","それ"],japanese_sent:["わたし は さら です","わたし は さら です","あなた は とむ です","わたし は かっこいい です","あなた は きれい です","わたし は ほん が あります","あなた は くるま が あります","これ は ほん です","それ は くるま です","ほん です"],words:[{japanese:"わたし",english:"I",romanji:"watashi",example_japanese:"わたし は さら です.",example_romanji:"watashi wa sara desu.",example_english:"I am Sara.",seen:"false"},{japanese:"は~です",english:"am/is/are",romanji:"wa~desu",example_japanese:"わたし は さら です.",example_romanji:"watashi wa sara desu.",example_english:"I am Sara.",seen:"false"},{japanese:"あなた",english:"you",romanji:"anata",example_japanese:"あなた は とむ です.",example_romanji:"anata wa tomu desu.",example_english:"You are Tom.",seen:"false"},{japanese:"かっこいい",english:"cool",romanji:"kakkoii",example_japanese:"わたし は かっこいい です.",example_romanji:"watashi wa kakkoii desu.",example_english:"I am cool.",seen:"false"},{japanese:"きれい",english:"pretty",romanji:"kirei",example_japanese:"あなた は きれい です.",example_romanji:"anata wa kirei desu.",example_english:"You are pretty.",seen:"false"},{japanese:"ほん",english:"book",romanji:"hon",example_japanese:"ほん です.",example_romanji:"hon desu.",example_english:"It is a book.",seen:"false"},{japanese:"が~あります",english:"have",romanji:"ga~arimasu",example_japanese:"わたし は ほん が あります.",example_romanji:"watashi wa hon ga arimasu.",example_english:"I have a book.",seen:"false"},{japanese:"くるま",english:"car",romanji:"kuruma",example_japanese:"あなた は くるま が あります.",example_romanji:"anata wa kuruma ga arumasu.",example_english:"You have a car.",seen:"false"},{japanese:"これ",english:"this",romanji:"kore",example_japanese:"これ は ほん です.",example_romanji:"kore wa book desu.",example_english:"This is a book.",seen:"false"},{japanese:"それ",english:"that",romanji:"sore",example_japanese:"それ は くるま です.",example_romanji:"sore wa car desu.",example_english:"That is a car.",seen:"false"}],questions:[{question:"I",answer:"わたし",seen:"false",correct:0,japanese:"false"},{question:"am/is/are",answer:"は~です",seen:"false",correct:0,japanese:"false"},{question:"You",answer:"あなた",seen:"false",correct:0,japanese:"false"},{question:"わたし",answer:"I",seen:"false",correct:0,japanese:"true"},{question:"は~です",answer:"am/is/are",seen:"false",correct:0,japanese:"true"},{question:"あなた",answer:"you",seen:"false",correct:0,japanese:"true"},{question:"Cool",answer:"かっこいい",seen:"false",correct:0,japanese:"false"},{question:"Pretty",answer:"きれい",seen:"false",correct:0,japanese:"false"},{question:"Book",answer:"ほん",seen:"false",correct:0,japanese:"false"},{question:"Have",answer:"が~あります",seen:"false",correct:0,japanese:"false"},{question:"Car",answer:"くるま",seen:"false",correct:0,japanese:"false"},{question:"This",answer:"これ",seen:"false",correct:0,japanese:"false"},{question:"かっこいい",answer:"cool",seen:"false",correct:0,japanese:"true"},{question:"きれい",answer:"pretty",seen:"false",correct:0,japanese:"true"},{question:"ほん",answer:"book",seen:"false",correct:0,japanese:"true"},{question:"が~あります",answer:"have",seen:"false",correct:0,japanese:"true"},{question:"くるま",answer:"car",seen:"false",correct:0,japanese:"true"},{question:"これ",answer:"this",seen:"false",correct:0,japanese:"true"},{question:"それ",answer:"that",seen:"false",correct:0,japanese:"true"},{question:"That",answer:"それ",seen:"false",correct:0,japanese:"false"}],tower:[{question:"That",answer:"それ",seen:"false",correct:0,japanese:"false"},{question:"Have",answer:"が~あります",seen:"false",correct:0,japanese:"false"},{question:"am/is/are",answer:"は~です",seen:"false",correct:0,japanese:"false"},{question:"I",answer:"わたし",seen:"false",correct:0,japanese:"false"},{question:"You",answer:"あなた",seen:"false",correct:0,japanese:"false"},{question:"Cool",answer:"かっこいい",seen:"false",correct:0,japanese:"false"},{question:"Pretty",answer:"きれい",seen:"false",correct:0,japanese:"false"},{question:"Book",answer:"ほん",seen:"false",correct:0,japanese:"false"},{question:"Car",answer:"くるま",seen:"false",correct:0,japanese:"false"},{question:"This",answer:"これ",seen:"false",correct:0,japanese:"false"},{question:"You have a car",answer:"あなた は くるま が あります",seen:"false",correct:0,japanese:"false"},{question:"This is a book",answer:"これ は ほん です",seen:"false",correct:0,japanese:"false"},{question:"I am Sara",answer:"わたし は さら です",seen:"false",correct:0,japanese:"false"},{question:"That is a car",answer:"それ は くるま です",seen:"false",correct:0,japanese:"false"},{question:"I have a book",answer:"わたし は ほん が あります",seen:"false",correct:0,japanese:"false"},{question:"You are pretty",answer:"あなた は きれい です",seen:"false",correct:0,japanese:"false"},{question:"It is a book",answer:"ほん です",seen:"false",correct:0,japanese:"false"},{question:"I am cool",answer:"わたし は かっこいい です",seen:"false",correct:0,japanese:"false"},{question:"You are Tom",answer:"あなた は とむ です",seen:"false",correct:0,japanese:"false"},{question:"I am Sara",answer:"わたし は さら です",seen:"false",correct:0,japanese:"false"}]}];var $=i(1779),J=i(7035),V=i(8099),Z=i(7989);class tt extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),!0!==this.stop&&(!1===this.customAnimation?"idleRight"===this.anime?this.spriteAnimation(3,6,8,5,1):"idleRightSlow"===this.anime?this.spriteAnimation(3,6,12,5,1):"runLeft"===this.anime?this.spriteAnimation(5,0,8,1,-1):"idleLeft"===this.anime?this.spriteAnimation(3,0,13,5,-1):"runRight"===this.anime?this.spriteAnimation(1,6,8,1,1):"attack1Right"===this.anime?this.spriteAnimation(0,10,4,6,1):"attack2Right"===this.anime?this.spriteAnimation(4,9,6,7,1):"attack3Right"===this.anime?this.spriteAnimation(5,7,8,13,1):"attack4Right"===this.anime?this.spriteAnimation(2,4,8,14,1):"takeHitRight"===this.anime?this.spriteAnimation(3,12,10,8,1):"runRightFast"===this.anime&&this.spriteAnimation(1,6,5,1,1):this.customAnime(this.customArr),this.frame++)}}class et extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!1===this.customAnimation?"attackLeft"===this.anime?this.spriteAnimation(16,10,8,0,-1):"flyLeft"===this.anime?this.spriteAnimation(9,3,6,0,-1):"hitLeft"===this.anime&&this.spriteAnimation(2,0,8,0,-1):this.customAnime(this.customArr),this.frame++}}class it extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!1===this.customAnimation?"attackLeft"===this.anime?this.spriteAnimation(28,22,8,0,-1):"hitLeft"===this.anime?this.spriteAnimation(21,19,8,0,-1):"idleLeft"===this.anime?this.spriteAnimation(18,8,6,0,-1):"walkLeft"===this.anime&&this.spriteAnimation(7,0,8,0,-1):this.customAnime(this.customArr),this.frame++}}class nt extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!1===this.customAnimation?"attackLeft"===this.anime?this.spriteAnimation(26,21,8,0,-1):"hitLeft"===this.anime?this.spriteAnimation(20,18,8,0,-1):"idleLeft"===this.anime?this.spriteAnimation(17,11,6,0,-1):"walkLeft"===this.anime&&this.spriteAnimation(5,0,8,0,-1):this.customAnime(this.customArr),this.frame++}}class st extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!1===this.customAnimation?"attackLeft"===this.anime?this.spriteAnimation(25,19,6,0,-1):"attackRight"===this.anime?this.spriteAnimation(18,11,8,0,-1):"hitLeft"===this.anime?this.spriteAnimation(10,8,8,0,-1):"idleLeft"===this.anime&&this.spriteAnimation(7,0,10,0,-1):this.customAnime(this.customArr),this.frame++}}class rt extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!1===this.customAnimation?"attackLeft"===this.anime?this.spriteAnimation(22,18,8,0,-1):"hitLeft"===this.anime?this.spriteAnimation(17,15,8,0,-1):"idleLeft"===this.anime?this.spriteAnimation(14,6,6,0,-1):"walkLeft"===this.anime&&this.spriteAnimation(5,0,8,0,-1):this.customAnime(this.customArr),this.frame++}}class ht extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!0!==this.stop&&(!1===this.customAnimation?"attack1Left"===this.anime?this.spriteAnimation(0,7,8,0,1):"attack2Left"===this.anime?this.spriteAnimation(8,15,8,0,1):"dieLeft"===this.anime?this.spriteAnimation(23,32,8,0,1):"hitLeft"===this.anime?this.spriteAnimation(33,36,8,0,1):"idleLeft"===this.anime?this.spriteAnimation(37,42,8,0,1):"walkLeft"===this.anime&&this.spriteAnimation(50,57,8,0,1):this.customAnime(this.customArr),this.frame++)}}var at=i(5881),ot=i(7676),ut=i(3051);class ct extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),this.newPos(),!0!==this.stop&&(!1===this.customAnimation?"closed"===this.anime&&this.spriteAnimation(1,2,8,0,1):this.customAnime(this.customArr),this.frame++)}}class lt{constructor(t,e,i,n){this.ctx=t,this.canvas=n,this.currentImports=["./homeButton.png","./soundImage.png","./talkingBox.png","./TrainingWords.png","./TrainingDialogue.png","./trainingScreen.png","./component.js","./adventure.png","./trainingDummySpriteTransparent.png","./TrainingButtonsNewMove.png"],this.wordCounter=i,this.levelCounter=e,this.quizCounter=0,this.goHome=!1,this.towerTime=!1,this.bossBattle=!1,this.quiz1=!0,this.quiz2=!1,this.quiz3=!1,this.complete=!1,this.playedSound=!1,this.playedQuizSound=!1,this.towerTime=!1,this.shakeScreen=!1,this.hasGrown=!1,this.canAttack=!0,this.check=0,this.questionsArr=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],this.attackOrder=[],this.hitCounter=0,this.createInitialComponents(),this.heartArr=[this.pixelHeart1,this.pixelHeart2,this.pixelHeart3]}createInitialComponents(){this.level1=K,this.loadAllSounds(),this.createSounds(),this.createSprites(),this.createImages(),this.createTexts(),this.changeNewCardText(),this.changeQuizCardText()}createTexts(){this.newWordJapanese=new n("9px","Ubuntu","Black",49.18,90.71,this.ctx,"text"),this.newWordRomanji=new n("9px","Ubuntu","Black",49.18,105.63,this.ctx,"text"),this.newWordEnglish=new n("9px","Ubuntu","Black",49.18,121.6,this.ctx,"text"),this.newWordJapaneseSent=new n("9px","Ubuntu","Black",136.32,90.71,this.ctx,"text"),this.newWordRomanjiSent=new n("9px","Ubuntu","Black",136.32,105.94,this.ctx,"text"),this.newWordEnglishSent=new n("9px","Ubuntu","Black",136.32,121.6,this.ctx,"text"),this.nextWordText=new n("11px","PixelFont","Black",246.22,138.4,this.ctx,"text"),this.nextWordText.text="Next",this.testAllText=new n("11px","PixelFont","Black",228.22,138.4,this.ctx,"text"),this.testAllText.text="Test All",this.toTheTowerText=new n("11px","PixelFont","Black",189.22,138.4,this.ctx,"text"),this.toTheTowerText.text="To the Tower!",this.previousWordText=new n("11px","PixelFont","Black",26.62,138.4,this.ctx,"text"),this.previousWordText.text="Previous",this.questionText=new n("17px","Ubuntu","Black",125.18,100.21,this.ctx,"text"),this.answer1Text=new n("14px","Ubuntu","Black",53.18,121.2,this.ctx,"text"),this.answer2Text=new n("14px","Ubuntu","Black",207.18,121.2,this.ctx,"text"),this.answer3Text=new n("14px","Ubuntu","Black",53.18,143.71,this.ctx,"text"),this.answer4Text=new n("14px","Ubuntu","Black",207.18,143.71,this.ctx,"text"),this.answer1TextHeightStatic=this.answer1Text.y,this.answer2TextHeightStatic=this.answer2Text.y,this.answer3TextHeightStatic=this.answer3Text.y,this.answer4TextHeightStatic=this.answer4Text.y}createImages(){this.initialComponentArr=[],this.background=new n(1200,135,ot,0,-25,this.ctx,"background"),this.background.speedX=-2,this.backgroundBottom=new n(this.background.width,this.background.height,ut,this.background.x,this.background.y+this.background.height,this.ctx,"background"),this.answer4=new n(130.34688990750146,20.939999999999998,J,150.59149672000663,127.50781894412596,this.ctx,"image"),this.answer2=new n(130.34688990750146,20.939999999999998,J,150.59149672000663,105.32717036022932,this.ctx,"image"),this.answer1=new n(130.34688990750146,20.939999999999998,J,17.8670996074987,105.32717036022932,this.ctx,"image"),this.answer3=new n(130.34688990750146,20.939999999999998,J,17.8670996074987,127.92282963977067,this.ctx,"image"),this.question=new n(211.25367496500422,20.950000000000003,Q,45.40342464249443,82.74,this.ctx,"image"),this.nextWord=new n(43.13,13.54,J,238.59000833680702,125.15168263494704,this.ctx,"image"),this.previousWord=new n(62.91,13.54,J,18.939999999999998,125.15168263494704,this.ctx,"image"),this.wordSound=new n(11.11,9.72,A,34.50685146588856,82.23874760475795,this.ctx,"image"),this.sentSound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer1Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer2Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer3Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer4Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.questionSound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.testAll=new n(62.91,13.54,J,218.59000833680702,125.15168263494704,this.ctx,"image"),this.toTheTower=new n(101.91,13.54,J,179.59000833680702,125.15168263494704,this.ctx,"image"),this.correctAnswer=new n(130.34688990750146,20.939999999999998,V,17.8670996074987,95.32717036022932,this.ctx,"image"),this.incorrectAnswer=new n(130.34688990750146,20.939999999999998,Z,17.8670996074987,95.32717036022932,this.ctx,"image"),this.homeButton=new n(18.03,14.3,at,5.366953700419387,3.8307801877630308,this.ctx,"image"),this.pixelHeart1=new n(19.87,16.17,z,28.07,3.369393439240767,this.ctx,"image"),this.pixelHeart2=new n(21.14,17.16,z,49.205089728063406,3.36909015886115,this.ctx,"image"),this.pixelHeart3=new n(21.14,17.16,z,70.35125068809865,3.3691912523210235,this.ctx,"image"),this.goldSushi=new n(14.66,9.47,N,131.6,46.58,this.ctx,"image")}createSounds(){this.soundWord=new s(this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].japanese],1),this.soundSent=new s(this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].example_japanese.slice(0,-1)],1),this.soundAnswer1=new s(this.pathKeysHash["わたし"],1),this.soundAnswer2=new s(this.pathKeysHash["わたし"],1),this.soundAnswer3=new s(this.pathKeysHash["わたし"],1),this.soundAnswer4=new s(this.pathKeysHash["わたし"],1),this.soundQuestion=new s(this.pathKeysHash["わたし"],1)}createSprites(){this.adventureGuy=new tt(48,28,l,81,44,this.ctx,"sprite",5,3,50,37,"idleRight",6),this.adventureGuy.startNewAnime("runRightFast","idleRight",-9),this.evilSlug=new it(30,30,P,350,this.adventureGuy.y-3,this.ctx,"sprite",0,18,32,32,"idleLeft",29),this.evilPlant=new st(40,40,W,350,this.adventureGuy.y-13,this.ctx,"sprite",0,7,64,64,"idleLeft",26),this.evilBat=new et(20,20,H,350,this.adventureGuy.y+5,this.ctx,"sprite",0,9,32,32,"flyLeft",19),this.evilBeakGuy=new nt(40,40,D,350,this.adventureGuy.y-13,this.ctx,"sprite",0,17,64,64,"idleLeft",27),this.evilSkullSnake=new rt(45,45,F,350,this.adventureGuy.y-18,this.ctx,"sprite",0,14,64,64,"idleLeft",23),this.evilGolem=new ht(45,85,O,36,-400,this.ctx,"sprite",0,37,160,160,"idleLeft",57),this.treasureChest=new ct(24,15,U,350,this.adventureGuy.y+14,this.ctx,"sprite",0,1,32,32,"closed",4),this.treasureChest.startNewCustomAnime([[4,2],[4,2]],"open",60,this.treasureChest.pauseAnime.bind(this.treasureChest))}importSounds(){const t=i(863);return this.pathkeys=t.keys(),t.keys().map(t)}loadAllSounds(){let t=this.importSounds();this.pathKeysHash={};for(let e=0;e<t.length;e++)this.pathKeysHash[`${this.pathkeys[e].slice(2,-4)}`]=t[e].default}changeNewCardText(){this.newWordJapanese.text=this.level1[this.levelCounter].words[this.wordCounter].japanese,this.newWordRomanji.text=this.level1[this.levelCounter].words[this.wordCounter].romanji,this.newWordEnglish.text=this.level1[this.levelCounter].words[this.wordCounter].english,this.newWordJapaneseSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_japanese,this.newWordRomanjiSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_romanji,this.newWordEnglishSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_english}changeSound(){let t=this.level1[this.levelCounter].words[this.wordCounter].japanese;t.includes("~")&&(t=t.split("~").join("_")),this.soundWord.sound.src=this.pathKeysHash[t],this.soundSent.sound.src=this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].example_japanese.slice(0,-1)],this.playedSound=!1}updateInitialComponents(){for(let t=0;t<this.initialComponentArr.length;t++)this.initialComponentArr[t].update();this.homeButton.update();for(let t=0;t<this.heartArr.length;t++)void 0!==this.heartArr[t]&&this.heartArr[t].update()}reset(){this.goHome=!1,this.quizCounter=0,this.bossBattle=!1,this.createInitialComponents(),this.evilGolem.y=-400,this.askIfTrainingBox=!1,this.canAttack=!0,this.getTheItem=!1,this.gx=-900,this.gy=-900}updateNewCardComponents(){this.newWordBox.update(),this.level1[this.levelCounter].tower.length-1===this.quizCounter?(this.imReadyTalkingBox.update(),this.imReadyText.update()):(this.newMoveTalkingBox.update(),this.newMoveText.update()),this.newWordEnglish.update(),this.newWordJapanese.update(),this.newWordRomanji.update(),this.newWordEnglishSent.update(),this.newWordJapaneseSent.update(),this.newWordRomanjiSent.update(),this.wordSound.update(),this.sentSound.update(),this.wordCounter<this.level1[this.levelCounter].words.length-1?(this.nextWord.update(),this.nextWordText.update()):this.level1[this.levelCounter].tower.length-1===this.quizCounter?(this.toTheTower.update(),this.toTheTowerText.update()):(this.testAll.update(),this.testAllText.update()),this.wordCounter>0&&(this.previousWord.update(),this.previousWordText.update()),!1===this.playedSound&&(this.soundWord.play(),this.playedSound=!0)}click(t){"mouseup"===t.type&&this.handleMouseUpClicks()}checkQuizStatus(){3===this.wordCounter&&"false"===this.level1[this.levelCounter].words[this.wordCounter].seen?(this.quiz1=!0,this.level1[this.levelCounter].words[this.wordCounter].seen="true"):6===this.wordCounter&&"false"===this.level1[this.levelCounter].words[this.wordCounter].seen?(this.quiz2=!0,this.level1[this.levelCounter].words[this.wordCounter].seen="true"):10===this.wordCounter&&(this.quiz3=!0)}changeToNewCard(t){if(t>0){let t=["attack1Right","attack2Right","attack3Right","attack4Right"];this.adventureGuy.startNewAnime(t[Math.floor(Math.random()*t.length)],"idleRight",1),this.trainingDummy.startNewAnime("takeHitLeft","idleLeft",2)}this.wordCounter+=t,this.checkQuizStatus(),this.changeNewCardText(),this.changeSound()}handleNextAndPreviousButtonClicks(){let t=!1;(this.quiz1||this.quiz2||this.quiz3)&&(t=!0),this.nextWord.clicked(this.gx,this.gy)&&this.wordCounter<this.level1[this.levelCounter].words.length-1&&!1===t&&this.level1[this.levelCounter].tower.length-1!==this.quizCounter?this.changeToNewCard(1):this.previousWord.clicked(this.gx,this.gy)&&this.wordCounter>0&&!1===t?this.changeToNewCard(-1):this.testAll.clicked(this.gx,this.gy)&&!1===t&&this.level1[this.levelCounter].tower.length-1!==this.quizCounter?this.changeToNewCard(1):this.toTheTower.clicked(this.gx,this.gy)&&this.level1[this.levelCounter].tower.length-1===this.quizCounter&&this.wordCounter===this.level1[this.levelCounter].words.length-1?this.towerTime=!0:this.nextWord.clicked(this.gx,this.gy)&&this.wordCounter<this.level1[this.levelCounter].words.length-1&&this.changeToNewCard(1)}handleMouseUpClicks(){this.skipToBoss(this.gx,this.gy),!0===this.askIfTrainingBox&&!1===this.yesInvisibleBox.clicked(this.gx,this.gy)?(this.askIfTrainingBox=!1,this.canAttack=!0):!0===this.askIfTrainingBox&&!0===this.yesInvisibleBox.clicked(this.gx,this.gy)&&(this.goHome=!0);let t=!0;this.quiz1||this.quiz2||this.quiz3||(t=!1),this.wordSound.clicked(this.gx,this.gy)&&!t?this.soundWord.play():this.sentSound.clicked(this.gx,this.gy)&&!t?this.soundSent.play():this.questionSound.clicked(this.gx,this.gy)&&t?this.soundQuestion.play():this.nextWord.clicked(this.gx,this.gy)&&!t||this.previousWord.clicked(this.gx,this.gy)&&!t||this.testAll.clicked(this.gx,this.gy)&&!t?this.handleNextAndPreviousButtonClicks():!0===this.canAttack&&(this.answer1.clicked(this.gx,this.gy)&&t||this.answer2.clicked(this.gx,this.gy)&&t||this.answer3.clicked(this.gx,this.gy)&&t||this.answer4.clicked(this.gx,this.gy)&&t)&&this.handleAnswerClicks(),this.homeButton.clicked(this.gx,this.gy)&&this.warningBeforeLeaving()}skipToBoss(t,e){setTimeout((()=>{if(t-this.gx<-1e3&&e-this.gy<-400){let t=this.gx,e=this.gy;setTimeout((()=>{this.gx-t<-1e3&&this.gy-e<-400&&(this.bossBattle=!0,this.quizCounter=18,this.startBossBattle())}),5e3)}}),1e3)}warningBeforeLeaving(){this.canAttack=!1,this.askIfTrainingBox=!0,this.trainingBoxImage=new n(121.7680246284894,82.58208163658705,j,98.42360770334705,32.66812245488062,this.ctx,"image"),this.startTrainingText=new n("10px","PixelFont","Black",124.42,70.14,this.ctx,"text"),this.startTrainingTextShadow=new n("10px","PixelFont","Gray",124.92,70.64,this.ctx,"text"),this.startTrainingTextShadow.text="Return Home?",this.startTrainingText.text="Return Home?",this.warningText=new n("4px","PixelFont","Black",119.42,75.14,this.ctx,"text"),this.warningText.text="WARNING: All Progress Will Be Lost!",this.warningTextShadow=new n("4px","PixelFont","Gray",119.92,75.64,this.ctx,"text"),this.warningTextShadow.text="WARNING: All Progress Will Be Lost!",this.yesText=new n("9px","PixelFont","Black",126.18,95.04,this.ctx,"text"),this.yesTextShadow=new n("9px","PixelFont","Gray",126.68,95.54,this.ctx,"text"),this.yesText.text="Yes",this.yesTextShadow.text="Yes",this.noText=new n("9px","PixelFont","Black",175.18,95.04,this.ctx,"text"),this.noTextShadow=new n("9px","PixelFont","Gray",175.68,95.54,this.ctx,"text"),this.noText.text="No",this.noTextShadow.text="No",this.noInvisibleBox=new n(39.38,11.36,"invisible",162.99,84.69,this.ctx,"other"),this.yesInvisibleBox=new n(38.38,11.36,"invisible",115.99,84.69,this.ctx,"other")}handleAnswerClicks(){let t=!0;this.quiz1||this.quiz2||this.quiz3||(t=!1),this.questionSound.clicked(this.gx,this.gy)&&t?this.soundQuestion.play():this.answer1Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer1.play():this.answer2Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer2.play():this.answer3Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer3.play():this.answer4Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer4.play():this.answer1.clicked(this.gx,this.gy)&&this.answer1Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",1):this.answer1.clicked(this.gx,this.gy)&&this.answer1Text.text!==this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",1):this.answer2.clicked(this.gx,this.gy)&&this.answer2Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",2):this.answer2.clicked(this.gx,this.gy)&&this.answer2Text.text!==this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",2):this.answer3.clicked(this.gx,this.gy)&&this.answer3Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",3):this.answer3.clicked(this.gx,this.gy)&&this.answer3Text.text!==this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",3):this.answer4.clicked(this.gx,this.gy)&&this.answer4Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",4):this.answer4.clicked(this.gx,this.gy)&&this.answer4Text.text!==this.level1[this.levelCounter].tower[this.quizCounter].answer&&t&&this.handleNextQuizCard("incorrect",4)}getChoice(t){return 1===t?this.answer1:2===t?this.answer2:3===t?this.answer3:this.answer4}playAnswerSound(t){t===this.answer1?(this.soundPlaying=this.soundAnswer1,this.soundAnswer1.play()):t===this.answer2?(this.soundPlaying=this.soundAnswer2,this.soundAnswer2.play()):t===this.answer3?(this.soundPlaying=this.soundAnswer3,this.soundAnswer3.play()):t===this.answer4&&(this.soundPlaying=this.soundAnswer4,this.soundAnswer4.play())}sendEnemy(){let t=[this.evilBat,this.evilSlug,this.evilSkullSnake,this.evilBeakGuy,this.evilPlant],e=t[Math.floor(Math.random()*t.length)];for(;this.lastEnemy===e;)e=t[Math.floor(Math.random()*t.length)];this.lastEnemy=e,e.x=300,e.speedX=-2}handleBossBattleAttacks(t){if("correct"===t){let t=this.adventureGuy.x;this.adventureGuy.x=-this.evilGolem.y-this.evilGolem.width-this.adventureGuy.width;let e=this.shuffleArr(["attack1Right","attack2Right","attack3Right","attack4Right"]);this.attackTheBoss(0,e,t)}else{let t=this.evilGolem.y;this.evilGolem.y=-this.adventureGuy.x-this.adventureGuy.width-this.evilGolem.width,this.loseAHeart(this.heartArr.slice(-1)[0]),this.hitCounter+=1,this.hitCounter<3?this.attackTheAdventurer(0,t):this.gameOver()}}attackTheAdventurer(t,e){setTimeout((()=>{"idleLeft"===this.evilGolem.anime?t<1?(this.startFlash("red"),this.evilGolem.startNewAnime("attack1Left","idleLeft",1),setTimeout((()=>{this.adventureGuy.startNewCustomAnime([[6,9],[9,3],[6,9],[9,4],[6,9],[9,5],[6,9],[9,4],[6,9],[9,5],[9,4],[6,9],[9,5]],"idleRight",8),this.startFlash("red")}),500),t+=1,this.attackTheAdventurer(t,e)):1===t?(this.startFlash("red"),this.evilGolem.y=e):this.attackTheAdventurer(t,e):this.attackTheAdventurer(t,e)}),10)}attackTheBoss(t,e,i){setTimeout((()=>{"idleRight"===this.adventureGuy.anime?t<=3?(this.startFlash("white"),this.adventureGuy.startNewAnime(e[t],"idleRight",1),this.evilGolem.startNewAnime("hitLeft","idleLeft",1),t+=1,this.attackTheBoss(t,e,i)):t>3&&"idleRight"===this.adventureGuy.anime?(this.startFlash("white"),this.adventureGuy.x=i,this.quizCounter>this.level1[this.levelCounter].tower.length-5&&!1===this.hasGrown?this.growTheBoss():this.level1[this.levelCounter].tower.length-1===this.quizCounter&&this.defeatTheBoss()):this.attackTheBoss(t,e,i):this.attackTheBoss(t,e,i)}),10)}defeatTheBoss(){this.canAttack=!1,this.evilGolem.startNewAnime("dieLeft","dieLeft",1,this.evilGolem.pauseAnime.bind(this.evilGolem)),this.checkForAnimeOver()}checkForAnimeOver(){setTimeout((()=>{!0===this.evilGolem.stop?this.walkToChest():this.checkForAnimeOver()}),100)}walkToChest(){this.background.speedX=-1,this.evilGolem.speedY=1,this.adventureGuy.startNewAnime("runRight","runRight",1),this.treasureChest.speedX=-1,this.checkForAtChest()}checkForAtChest(){setTimeout((()=>{this.adventureGuy.x+this.adventureGuy.width>this.treasureChest.x?(this.adventureGuy.startNewAnime("idleRight","idleRight",1),this.background.speedX=0,this.treasureChest.speedX=0,this.evilGolem.speedY=0,this.treasureChest.startNewCustomAnime([[4,2],[5,2]],"open",60,this.treasureChest.pauseAnime.bind(this.treasureChest)),setTimeout((()=>{document.cookie="reward=yes",this.getTheItem=!0,setTimeout((()=>{this.goHome=!0}),1500)}),1500)):this.checkForAtChest()}),100)}handleNextQuizCard(t,e){!1===this.bossBattle&&this.sendEnemy(),"true"===this.level1[this.levelCounter].tower[this.quizCounter].japanese&&this.soundQuestion.play(),e=this.getChoice(e),this.showAnswer=!0;let i=1e3;if("correct"===t)this.playAnswerSound(e),this.setCorrectIncorrectAnswerPos(e,e),i=50,this.level1[this.levelCounter].tower[this.quizCounter].correct+=1,this.level1[this.levelCounter].tower[this.quizCounter].correct,!0===this.bossBattle?this.handleBossBattleAttacks("correct"):this.attackOrder.push("correct");else{let t=this.findCorrectAnswer();this.playAnswerSound(t),this.setCorrectIncorrectAnswerPos(t,e),i=2e3,this.level1[this.levelCounter].tower[this.quizCounter].correct=-1,!0===this.bossBattle?(this.level1[this.levelCounter].tower.push(this.level1[this.levelCounter].tower[this.quizCounter]),this.handleBossBattleAttacks("incorrect")):this.attackOrder.push("incorrect")}this.pauseQuiz(i)}pauseQuiz(t){setTimeout((()=>{this.soundQuestion.sound.paused&&this.soundPlaying.sound.paused?(this.showAnswer=!1,this.level1[this.levelCounter].tower.length-1===this.quizCounter?this.quiz3=!1:this.quizCounter+=1,!0===this.quiz1&&this.quizCounter>9&&!1===this.bossBattle?setTimeout((()=>{this.startBossBattle()}),3e3):this.changeQuizCardText(),this.playedQuizSound=!1):this.pauseQuiz(t)}),t)}startBossBattle(){this.canAttack=!1,this.bossBattle=!0,this.adventureGuy.startNewAnime("idleRight","idleRight",1),this.background.speedX=0,this.bossSteps=0,this.bossEntering()}bossEntering(){this.bossSteps+=1,this.shakeList=[this.adventureGuy,this.background,this.backgroundBottom],this.shakeScreen=!0,setTimeout((()=>{this.shakeScreen=!1,this.dx=void 0,this.dy=void 0,setTimeout((()=>{this.bossSteps<3?this.bossEntering():(this.evilGolem.startNewAnime("walkLeft","walkLeft",1),this.enterTheBoss())}),500)}),500)}enterTheBoss(){this.evilGolem.y+=.5,setTimeout((()=>{this.evilGolem.y<-250?this.enterTheBoss():(this.evilGolem.startNewAnime("idleLeft","idleLeft",1),this.canAttack=!0,this.changeQuizCardText())}),10)}growTheBoss(){this.hasGrown=!0,this.evilGolem.height+=.5,this.evilGolem.width+=.5,this.evilGolem.x+=-.4,this.evilGolem.y-=.35,setTimeout((()=>{this.evilGolem.width<100?(this.growTheBoss(),this.shakeScreen=!0,this.shakeList=[this.adventureGuy,this.background,this.backgroundBottom],"idleLeft"===this.evilGolem.anime&&this.evilGolem.startNewAnime("hitLeft","idleLeft",1)):this.shakeScreen=!1}),10)}setCorrectIncorrectAnswerPos(t,e){this.correctAnswer.x=t.x,this.correctAnswer.y=t.y,this.correctAnswer.width=t.width,this.correctAnswer.height=t.height,this.incorrectAnswer.x=e.x,this.incorrectAnswer.y=e.y,this.incorrectAnswer.width=e.width,this.incorrectAnswer.height=e.height}findCorrectAnswer(){return this.answer1Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer?this.answer1:this.answer2Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer?this.answer2:this.answer3Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer?this.answer3:this.answer4Text.text===this.level1[this.levelCounter].tower[this.quizCounter].answer?this.answer4:void 0}hover(t){}rotateGolem(){this.ctx.rotate(90*Math.PI/180),this.evilGolem.animate(),this.ctx.rotate(-90*Math.PI/180)}spriteAnimation(){this.rotateGolem(),this.evilPlant.animate(),this.evilSlug.animate(),this.evilBat.animate(),this.evilBeakGuy.animate(),this.evilSkullSnake.animate(),this.treasureChest.animate(),this.adventureGuy.animate()}shuffleArr(t){let e,i=t.length;for(;0!=i;)e=Math.floor(Math.random()*i),i--,[t[i],t[e]]=[t[e],t[i]];return t}getAnswerArr(){let t=[this.level1[this.levelCounter].tower[this.quizCounter].answer];if("true"===this.level1[this.levelCounter].tower[this.quizCounter].japanese){let e=this.level1[this.levelCounter].english;for(;t.length<4;){let i=e[Math.floor(Math.random()*e.length)];t.includes(i)||t.push(i)}}else{let e=[];for(e=this.quizCounter>9?this.level1[this.levelCounter].japanese_sent:this.level1[this.levelCounter].japanese;t.length<4;){let i=e[Math.floor(Math.random()*e.length)];t.includes(i)||t.push(i)}}return this.shuffleArr(t)}changeQuizCardText(){this.questionText.text=this.level1[this.levelCounter].tower[this.quizCounter].question;let t=this.getAnswerArr();this.answer1Text.text=t[0],this.answer2Text.text=t[1],this.answer3Text.text=t[2],this.answer4Text.text=t[3];for(let e=0;e<t.length;e++)t[e].includes("~")&&(t[e]=t[e].split("~").join("_"));this.soundAnswer1.sound.src=this.pathKeysHash[t[0]],this.soundAnswer2.sound.src=this.pathKeysHash[t[1]],this.soundAnswer3.sound.src=this.pathKeysHash[t[2]],this.soundAnswer4.sound.src=this.pathKeysHash[t[3]],this.level1[this.levelCounter].tower[this.quizCounter].question.includes("~")?this.soundQuestion.sound.src=this.pathKeysHash[this.level1[this.levelCounter].tower[this.quizCounter].question.split("~").join("_")]:this.soundQuestion.sound.src=this.pathKeysHash[this.level1[this.levelCounter].tower[this.quizCounter].question]}updateQuizCardFontSize(){this.questionText.width=Math.round(this.getFontSizeToFit(this.questionText.text,this.question.width-20)),this.questionText.width>17?this.questionText.width="17px":this.questionText.width=this.questionText.width+"px",this.answer1Text.width=Math.round(this.getFontSizeToFit(this.answer1Text.text,this.answer1.width-40)),this.answer1Text.width>14?this.answer1Text.width="14px":this.answer1Text.width=this.answer1Text.width+"px",this.answer2Text.width=Math.round(this.getFontSizeToFit(this.answer2Text.text,this.answer2.width-40)),this.answer2Text.width>14?this.answer2Text.width="14px":this.answer2Text.width=this.answer2Text.width+"px",this.answer3Text.width=Math.round(this.getFontSizeToFit(this.answer3Text.text,this.answer3.width-40)),this.answer3Text.width>14?this.answer3Text.width="14px":this.answer3Text.width=this.answer3Text.width+"px",this.answer4Text.width=Math.round(this.getFontSizeToFit(this.answer4Text.text,this.answer4.width-40)),this.answer4Text.width>14?this.answer4Text.width="14px":this.answer4Text.width=this.answer4Text.width+"px",this.ctx.font="14px Ubuntu"}updateQuizCardTextX(){let t=[this.answer1Text,this.answer3Text],e=[this.answer2Text,this.answer4Text];Number(this.questionText.width.split("").slice(0,2).join(""))<17.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>16.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/1.65:Number(this.questionText.width.split("").slice(0,2).join(""))<16.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>15.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/1.85:Number(this.questionText.width.split("").slice(0,2).join(""))<15.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>14.5||Number(this.questionText.width.split("").slice(0,2).join(""))<14.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>13.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2:Number(this.questionText.width.split("").slice(0,2).join(""))<13.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>12.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.1:Number(this.questionText.width.split("").slice(0,2).join(""))<12.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>11.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.3:Number(this.questionText.width.split("").slice(0,2).join(""))<11.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>10.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.5:Number(this.questionText.width.split("").slice(0,2).join(""))<10.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>9.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.8:Number(this.questionText.width.split("").slice(0,2).join(""))<9.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>8.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/3:Number(this.questionText.width.split("").slice(0,2).join(""))<8.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>7.5&&(this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/3.3);for(let t=0;t<e.length;t++)"14px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2:"13px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.1:"12px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.3:"11px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.5:"10px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.8:"9px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/3.4:"8px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/3.8:"7px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/4.4:"6px"===e[t].width&&(e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/4.6);for(let e=0;e<t.length;e++)"14px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2:"13px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.1:"12px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.3:"11px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.5:"10px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.8:"9px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/3.4:"8px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/3.8:"7px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/4.4:"6px"===t[e].width&&(t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/4.6)}getFontSizeToFit(t,e){return this.ctx.font="1px Ubuntu",e/this.questionText.ctx.measureText(t).width}updateSoundIconsX(){this.questionSound.x=this.question.x+8,this.questionSound.y=this.question.y+6,this.answer1Sound.x=this.answer1.x+5,this.answer1Sound.y=this.answer1.y+6,this.answer2Sound.x=this.answer2.x+5,this.answer2Sound.y=this.answer2.y+6,this.answer3Sound.x=this.answer3.x+5,this.answer3Sound.y=this.answer3.y+6,this.answer4Sound.x=this.answer4.x+5,this.answer4Sound.y=this.answer4.y+6}updateQuizCardTextHeight(){let t=[this.answer1Text,this.answer2Text,this.answer3Text,this.answer4Text],e=[this.answer1TextHeightStatic,this.answer2TextHeightStatic,this.answer3TextHeightStatic,this.answer4TextHeightStatic];for(let i=0;i<t.length;i++)"14px"===t[i].width||"13px"===t[i].width||("12px"===t[i].width||"11px"===t[i].width||"10px"===t[i].width||"9px"===t[i].width?t[i].y=e[i]-1:"8px"===t[i].width?t[i].y=e[i]-2:"7px"===t[i].width?t[i].y=e[i]-2.5:"6px"===t[i].width&&(t[i].y=e[i]-8))}updateQuizCardComponents(){!1===this.playedQuizSound&&"true"===this.level1[this.levelCounter].tower[this.quizCounter].japanese&&(this.soundQuestion.play(),this.playedQuizSound=!0),this.updateQuizCardFontSize(),this.updateQuizCardTextX(),this.updateQuizCardTextHeight(),this.updateSoundIconsX(),this.question.update(),this.answer1.update(),this.answer2.update(),this.answer3.update(),this.answer4.update(),!0===this.showAnswer&&(this.incorrectAnswer.update(),this.correctAnswer.update()),this.questionText.update(),this.answer1Text.update(),this.answer2Text.update(),this.answer3Text.update(),this.answer4Text.update(),"true"===this.level1[this.levelCounter].tower[this.quizCounter].japanese?this.questionSound.update():(this.answer1Sound.update(),this.answer2Sound.update(),this.answer3Sound.update(),this.answer4Sound.update())}screenFlashEffect(){this.alphaClone>=.2&&(this.alphaDir=-.15),this.alphaClone+=this.alphaDir,this.ctx.globalAlpha=this.alphaClone,this.alphaClone<=0?this.screenFlash=!1:this.flashBox.update(),this.ctx.globalAlpha=1}startFlash(t){this.flashBox=new n(300,150,t,0,0,this.ctx,"other"),this.screenFlash=!0,this.alphaDir=.1,this.alphaClone=0}resetEnemy(t){setTimeout((()=>{t.x<=50?(t.speedX=0,t.x=350,this.shakeScreen=!1,this.dx=void 0,this.dy=void 0):this.resetEnemy(t)}),100)}loseAHeart(t){this.heartArr=this.heartArr.slice(0,-1),setTimeout((()=>{this.heartArr.push(t),setTimeout((()=>{this.heartArr=this.heartArr.slice(0,-1),setTimeout((()=>{this.heartArr.push(t),setTimeout((()=>{this.heartArr=this.heartArr.slice(0,-1),setTimeout((()=>{this.heartArr.push(t),setTimeout((()=>{this.heartArr=this.heartArr.slice(0,-1),0===this.heartArr.length&&(this.fadeTheScreen=!0,setTimeout((()=>{this.fadeTheScreen=!1}),100))}),100)}),100)}),250)}),250)}),500)}),500)}gainItem(){this.goldSushi.update()}gameOver(){this.adventureGuy.startNewCustomAnime([[6,9],[9,3],[6,9],[9,4],[6,9],[9,5],[6,9],[9,4],[6,9],[9,5],[9,4],[6,9],[9,5]],"die",8,this.adventureGuy.pauseAnime.bind(this.adventureGuy)),this.background.speedX=0,setTimeout((()=>{this.canAttack=!1}),2e3)}checkIfAttacking(){let t=[this.evilBat,this.evilSlug,this.evilSkullSnake,this.evilBeakGuy,this.evilPlant],e=["attack1Right","attack2Right","attack3Right","attack4Right"];for(let i=0;i<t.length;i++)this.adventureGuy.intersecting(t[i])&&!1===this.shakeScreen?this.check>200&&(this.check=0,"correct"===this.attackOrder[0]?(this.startFlash("white"),this.attackOrder=this.attackOrder.slice(1),this.adventureGuy.startNewAnime(e[Math.floor(Math.random()*e.length)],"runRightFast",1),this.shakeList=[t[i]],this.shakeScreen=!0,t[i].startNewAnime("hitLeft","idleLeft",10),this.resetEnemy(t[i])):(this.loseAHeart(this.heartArr.slice(-1)[0]),this.hitCounter+=1,this.attackOrder=this.attackOrder.slice(1),this.hitCounter<3?this.adventureGuy.startNewCustomAnime([[6,9],[9,3],[6,9],[9,4],[6,9],[9,5],[6,9],[9,4],[6,9],[9,5],[9,4],[6,9],[9,5]],"runRightFast",8):this.gameOver(),t[i].startNewAnime("attackLeft","idleLeft",1))):this.check+=1}preShake(){this.dx=5*Math.random(),this.dy=5*Math.random();for(let t=0;t<this.shakeList.length;t++)this.shakeList[t].x+=this.dx,this.shakeList[t].y+=this.dy}postShake(){if(void 0!==this.dx||void 0!==this.dy)for(let t=0;t<this.shakeList.length;t++)this.shakeList[t].x-=this.dx,this.shakeList[t].y-=this.dy}askIfTraining(){this.trainingBoxImage.update(),this.startTrainingTextShadow.update(),this.startTrainingText.update(),this.yesTextShadow.update(),this.yesText.update(),this.noTextShadow.update(),this.noText.update(),this.noInvisibleBox.update(),this.yesInvisibleBox.update(),this.warningText.update()}animate(t,e){this.gx=t,this.gy=e,!0===this.shakeScreen&&this.preShake(),this.background.newPos(),this.background.update(),this.backgroundBottom.speedX=this.background.speedX,this.backgroundBottom.newPos(),this.backgroundBottom.update(),this.spriteAnimation(),!0===this.screenFlash&&this.screenFlashEffect(),this.updateInitialComponents(),!0===this.quiz1||this.quiz2||this.quiz3?!0===this.canAttack&&this.updateQuizCardComponents():!0===this.canAttack&&this.updateNewCardComponents(),this.checkIfAttacking(),!0===this.getTheItem&&this.gainItem(),!0===this.shakeScreen&&this.postShake(),!0===this.askIfTrainingBox&&this.askIfTraining()}}class dt extends n{constructor(t,e,i,n,s,r,h,a,o,u,c,l,d){super(t,e,i,n,s,r,h,a,o,u,c),this.anime=l,this.frame=0,this.columnLength=d,this.customAnimation=!1}animate(){this.update(),"idleLeft"===this.anime?this.spriteAnimation(0,1,99999999,0,1):"takeHitLeft"===this.anime&&this.spriteAnimation(1,2,11,0,1),this.frame++}}class ft{constructor(t,e,i,n){this.ctx=t,this.canvas=n,this.currentImports=["./homeButton.png","./soundImage.png","./talkingBox.png","./TrainingWords.png","./TrainingDialogue.png","./trainingScreen.png","./component.js","./adventure.png","./trainingDummySpriteTransparent.png","./TrainingButtonsNewMove.png"],this.wordCounter=i,this.levelCounter=e,this.quizCounter=0,this.goHome=!1,this.towerTime=!1,this.quiz1=!1,this.quiz2=!1,this.quiz3=!1,this.complete=!1,this.playedSound=!1,this.playedQuizSound=!1,this.towerTime=!1,this.questionsArr=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],this.createInitialComponents()}createInitialComponents(){this.level1=K,this.loadAllSounds(),this.createSounds(),this.createSprites(),this.createImages(),this.createTexts(),this.changeNewCardText(),this.changeQuizCardText()}createTexts(){this.newMoveText=new n("9px","PixelFont","Black",152.68,16.54,this.ctx,"text"),this.newMoveText.text="New Move!",this.letsPracticeText=new n("9px","PixelFont","Black",152.68,16.54,this.ctx,"text"),this.letsPracticeText.text="Let's Practice!",this.imReadyText=new n("9px","PixelFont","Black",152.68,16.54,this.ctx,"text"),this.imReadyText.text="I'm Ready!",this.newWordJapanese=new n("9px","Ubuntu","Black",49.18,90.71,this.ctx,"text"),this.newWordRomanji=new n("9px","Ubuntu","Black",49.18,105.63,this.ctx,"text"),this.newWordEnglish=new n("9px","Ubuntu","Black",49.18,121.6,this.ctx,"text"),this.newWordJapaneseSent=new n("9px","Ubuntu","Black",136.32,90.71,this.ctx,"text"),this.newWordRomanjiSent=new n("9px","Ubuntu","Black",136.32,105.94,this.ctx,"text"),this.newWordEnglishSent=new n("9px","Ubuntu","Black",136.32,121.6,this.ctx,"text"),this.nextWordText=new n("11px","PixelFont","Black",246.22,138.4,this.ctx,"text"),this.nextWordText.text="Next",this.testAllText=new n("11px","PixelFont","Black",228.22,138.4,this.ctx,"text"),this.testAllText.text="Test All",this.toTheTowerText=new n("11px","PixelFont","Black",189.22,138.4,this.ctx,"text"),this.toTheTowerText.text="To the Tower!",this.previousWordText=new n("11px","PixelFont","Black",26.62,138.4,this.ctx,"text"),this.previousWordText.text="Previous",this.questionText=new n("17px","Ubuntu","Black",125.18,90.21,this.ctx,"text"),this.answer1Text=new n("14px","Ubuntu","Black",53.18,111.2,this.ctx,"text"),this.answer2Text=new n("14px","Ubuntu","Black",207.18,111.2,this.ctx,"text"),this.answer3Text=new n("14px","Ubuntu","Black",53.18,133.71,this.ctx,"text"),this.answer4Text=new n("14px","Ubuntu","Black",207.18,133.71,this.ctx,"text")}createImages(){this.initialComponentArr=[],this.answer4=new n(130.34688990750146,20.939999999999998,J,150.59149672000663,117.50781894412596,this.ctx,"image"),this.answer2=new n(130.34688990750146,20.939999999999998,J,150.59149672000663,95.32717036022932,this.ctx,"image"),this.answer1=new n(130.34688990750146,20.939999999999998,J,17.8670996074987,95.32717036022932,this.ctx,"image"),this.answer3=new n(130.34688990750146,20.939999999999998,J,17.8670996074987,117.92282963977067,this.ctx,"image"),this.question=new n(211.25367496500422,20.950000000000003,Q,45.40342464249443,72.74,this.ctx,"image"),this.background=new n(300,150,R,0,0,this.ctx,"image"),this.dialogueBox=new n(295.52722245267773,87.06392648914046,X,2.431964063489289,61.252678918476605,this.ctx,"image"),this.newWordBox=new n(259.9,68.04785297828089,Q,21.710000000000008,71.74678918476592,this.ctx,"image"),this.newMoveTalkingBox=new n(64.97,16.37464216304681,$,145.69837303233416,3.3146421630468135,this.ctx,"image"),this.letsPracticeTalkingBox=new n(78.97,16.37464216304681,$,145.69837303233416,3.3146421630468135,this.ctx,"image"),this.imReadyTalkingBox=new n(59.97,16.37464216304681,$,145.69837303233416,3.3146421630468135,this.ctx,"image"),this.nextWord=new n(43.13,13.54,J,238.59000833680702,125.15168263494704,this.ctx,"image"),this.previousWord=new n(62.91,13.54,J,18.939999999999998,125.15168263494704,this.ctx,"image"),this.wordSound=new n(11.11,9.72,A,34.50685146588856,82.23874760475795,this.ctx,"image"),this.sentSound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer1Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer2Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer3Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.answer4Sound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.questionSound=new n(11.11,9.72,A,122.09685146588856,82.23874760475795,this.ctx,"image"),this.testAll=new n(62.91,13.54,J,218.59000833680702,125.15168263494704,this.ctx,"image"),this.toTheTower=new n(101.91,13.54,J,179.59000833680702,125.15168263494704,this.ctx,"image"),this.correctAnswer=new n(130.34688990750146,20.939999999999998,V,17.8670996074987,95.32717036022932,this.ctx,"image"),this.incorrectAnswer=new n(130.34688990750146,20.939999999999998,Z,17.8670996074987,95.32717036022932,this.ctx,"image"),this.homeButton=new n(18.03,14.3,at,5.366953700419387,3.8307801877630308,this.ctx,"image")}createSounds(){this.soundWord=new s(this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].japanese],1),this.soundSent=new s(this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].example_japanese.slice(0,-1)],1),this.soundAnswer1=new s(this.pathKeysHash["わたし"],1),this.soundAnswer2=new s(this.pathKeysHash["わたし"],1),this.soundAnswer3=new s(this.pathKeysHash["わたし"],1),this.soundAnswer4=new s(this.pathKeysHash["わたし"],1),this.soundQuestion=new s(this.pathKeysHash["わたし"],1)}createSprites(){this.adventureGuy=new tt(115,70,l,81,5,this.ctx,"sprite",5,3,50,37,"idleRight",6),this.trainingDummy=new dt(36.15,47.3,Y,174.23,24.01,this.ctx,"sprite",0,0,185,235,"idleLeft",2)}reset(){this.gx=0,this.gy=0}importSounds(){const t=i(863);return this.pathkeys=t.keys(),t.keys().map(t)}loadAllSounds(){let t=this.importSounds();this.pathKeysHash={};for(let e=0;e<t.length;e++)this.pathKeysHash[`${this.pathkeys[e].slice(2,-4)}`]=t[e].default}changeNewCardText(){this.newWordJapanese.text=this.level1[this.levelCounter].words[this.wordCounter].japanese,this.newWordRomanji.text=this.level1[this.levelCounter].words[this.wordCounter].romanji,this.newWordEnglish.text=this.level1[this.levelCounter].words[this.wordCounter].english,this.newWordJapaneseSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_japanese,this.newWordRomanjiSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_romanji,this.newWordEnglishSent.text=this.level1[this.levelCounter].words[this.wordCounter].example_english}changeSound(){let t=this.level1[this.levelCounter].words[this.wordCounter].japanese;t.includes("~")&&(t=t.split("~").join("_")),this.soundWord.sound.src=this.pathKeysHash[t],this.soundSent.sound.src=this.pathKeysHash[this.level1[this.levelCounter].words[this.wordCounter].example_japanese.slice(0,-1)],this.playedSound=!1}updateInitialComponents(){for(let t=0;t<this.initialComponentArr.length;t++)this.initialComponentArr[t].update();this.dialogueBox.update(),this.homeButton.update()}updateNewCardComponents(){this.newWordBox.update(),this.level1[this.levelCounter].questions.length-1===this.quizCounter?(this.imReadyTalkingBox.update(),this.imReadyText.update()):(this.newMoveTalkingBox.update(),this.newMoveText.update()),this.newWordEnglish.update(),this.newWordJapanese.update(),this.newWordRomanji.update(),this.newWordEnglishSent.update(),this.newWordJapaneseSent.update(),this.newWordRomanjiSent.update(),this.wordSound.update(),this.sentSound.update(),this.wordCounter<this.level1[this.levelCounter].words.length-1?(this.nextWord.update(),this.nextWordText.update()):this.level1[this.levelCounter].questions.length-1===this.quizCounter?(this.toTheTower.update(),this.toTheTowerText.update()):(this.testAll.update(),this.testAllText.update()),this.wordCounter>0&&(this.previousWord.update(),this.previousWordText.update()),!1===this.playedSound&&(this.soundWord.play(),this.playedSound=!0)}click(t){this.clickGX=this.gx,this.clickGY=this.gy,"mouseup"===t.type&&this.handleMouseUpClicks()}checkQuizStatus(){3===this.wordCounter&&"false"===this.level1[this.levelCounter].words[this.wordCounter].seen?(this.quiz1=!0,this.level1[this.levelCounter].words[this.wordCounter].seen="true"):6===this.wordCounter&&"false"===this.level1[this.levelCounter].words[this.wordCounter].seen?(this.quiz2=!0,this.level1[this.levelCounter].words[this.wordCounter].seen="true"):10===this.wordCounter&&(this.quiz3=!0)}changeToNewCard(t){if(t>0){let t=["attack1Right","attack2Right","attack3Right","attack4Right"];this.adventureGuy.startNewAnime(t[Math.floor(Math.random()*t.length)],"idleRight",1),this.trainingDummy.startNewAnime("takeHitLeft","idleLeft",2)}this.wordCounter+=t,this.checkQuizStatus(),this.changeNewCardText(),this.changeSound()}handleNextAndPreviousButtonClicks(){let t=!1;(this.quiz1||this.quiz2||this.quiz3)&&(t=!0),this.nextWord.clicked(this.gx,this.gy)&&this.wordCounter<this.level1[this.levelCounter].words.length-1&&!1===t&&this.level1[this.levelCounter].questions.length-1!==this.quizCounter?this.changeToNewCard(1):this.previousWord.clicked(this.gx,this.gy)&&this.wordCounter>0&&!1===t?this.changeToNewCard(-1):this.testAll.clicked(this.gx,this.gy)&&!1===t&&this.level1[this.levelCounter].questions.length-1!==this.quizCounter?this.changeToNewCard(1):this.toTheTower.clicked(this.gx,this.gy)&&this.level1[this.levelCounter].questions.length-1===this.quizCounter&&this.wordCounter===this.level1[this.levelCounter].words.length-1?(this.gx=0,this.gy=0,this.towerTime=!0):this.nextWord.clicked(this.gx,this.gy)&&this.wordCounter<this.level1[this.levelCounter].words.length-1&&this.changeToNewCard(1)}handleMouseUpClicks(){let t=!0;this.quiz1||this.quiz2||this.quiz3||(t=!1),this.wordSound.clicked(this.gx,this.gy)&&!t?this.soundWord.play():this.sentSound.clicked(this.gx,this.gy)&&!t?this.soundSent.play():this.questionSound.clicked(this.gx,this.gy)&&t?this.soundQuestion.play():this.nextWord.clicked(this.gx,this.gy)&&!t||this.previousWord.clicked(this.gx,this.gy)&&!t||this.testAll.clicked(this.gx,this.gy)&&!t?this.handleNextAndPreviousButtonClicks():this.answer1.clicked(this.gx,this.gy)&&t||this.answer2.clicked(this.gx,this.gy)&&t||this.answer3.clicked(this.gx,this.gy)&&t||this.answer4.clicked(this.gx,this.gy)&&t?this.handleAnswerClicks():this.homeButton.clicked(this.gx,this.gy)&&(this.gx=0,this.gy=0,this.goHome=!0)}handleAnswerClicks(){let t=!0;this.quiz1||this.quiz2||this.quiz3||(t=!1),this.questionSound.clicked(this.gx,this.gy)&&t?this.soundQuestion.play():this.answer1Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer1.play():this.answer2Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer2.play():this.answer3Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer3.play():this.answer4Sound.clicked(this.gx,this.gy)&&t?this.soundAnswer4.play():this.answer1.clicked(this.gx,this.gy)&&this.answer1Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",1):this.answer1.clicked(this.gx,this.gy)&&this.answer1Text.text!==this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",1):this.answer2.clicked(this.gx,this.gy)&&this.answer2Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",2):this.answer2.clicked(this.gx,this.gy)&&this.answer2Text.text!==this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",2):this.answer3.clicked(this.gx,this.gy)&&this.answer3Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",3):this.answer3.clicked(this.gx,this.gy)&&this.answer3Text.text!==this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("incorrect",3):this.answer4.clicked(this.gx,this.gy)&&this.answer4Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer&&t?this.handleNextQuizCard("correct",4):this.answer4.clicked(this.gx,this.gy)&&this.answer4Text.text!==this.level1[this.levelCounter].questions[this.quizCounter].answer&&t&&this.handleNextQuizCard("incorrect",4)}getChoice(t){return 1===t?this.answer1:2===t?this.answer2:3===t?this.answer3:this.answer4}playAnswerSound(t){t===this.answer1?(this.soundPlaying=this.soundAnswer1,this.soundAnswer1.play()):t===this.answer2?(this.soundPlaying=this.soundAnswer2,this.soundAnswer2.play()):t===this.answer3?(this.soundPlaying=this.soundAnswer3,this.soundAnswer3.play()):t===this.answer4&&(this.soundPlaying=this.soundAnswer4,this.soundAnswer4.play())}handleNextQuizCard(t,e){"true"===this.level1[this.levelCounter].questions[this.quizCounter].japanese&&this.soundQuestion.play(),e=this.getChoice(e),this.showAnswer=!0;let i=1e3;if("correct"===t){this.playAnswerSound(e),this.setCorrectIncorrectAnswerPos(e,e),i=50,this.level1[this.levelCounter].questions[this.quizCounter].correct+=1,this.level1[this.levelCounter].questions[this.quizCounter].correct;let t=["attack1Right","attack2Right","attack3Right","attack4Right"];this.adventureGuy.startNewAnime(t[Math.floor(Math.random()*t.length)],"idleRight",1),this.trainingDummy.startNewAnime("takeHitLeft","idleLeft",2)}else{let t=this.findCorrectAnswer();this.playAnswerSound(t),this.setCorrectIncorrectAnswerPos(t,e),i=2e3,this.level1[this.levelCounter].questions[this.quizCounter].correct=-1,this.adventureGuy.startNewCustomAnime([[7,1],[6,9],[6,2],[6,3],[6,4],[6,9],[9,3],[6,9],[9,4],[6,9],[9,5],[6,9],[9,4],[6,9],[9,5]],"idleRight",8)}this.pauseQuiz(i)}pauseQuiz(t){setTimeout((()=>{this.soundQuestion.sound.paused&&this.soundPlaying.sound.paused?(this.showAnswer=!1,this.level1[this.levelCounter].questions.length-1===this.quizCounter?this.quiz3=!1:this.quizCounter+=1,!0===this.quiz1&&this.quizCounter>2?this.quiz1=!1:!0===this.quiz2&&this.quizCounter>8&&(this.quiz2=!1),this.changeQuizCardText(),this.playedQuizSound=!1):this.pauseQuiz(t)}),t)}setCorrectIncorrectAnswerPos(t,e){this.correctAnswer.x=t.x,this.correctAnswer.y=t.y,this.correctAnswer.width=t.width,this.correctAnswer.height=t.height,this.incorrectAnswer.x=e.x,this.incorrectAnswer.y=e.y,this.incorrectAnswer.width=e.width,this.incorrectAnswer.height=e.height}findCorrectAnswer(){return this.answer1Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer?this.answer1:this.answer2Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer?this.answer2:this.answer3Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer?this.answer3:this.answer4Text.text===this.level1[this.levelCounter].questions[this.quizCounter].answer?this.answer4:void 0}hover(t){}spriteAnimation(){this.trainingDummy.animate(),this.adventureGuy.animate()}shuffleArr(t){let e,i=t.length;for(;0!=i;)e=Math.floor(Math.random()*i),i--,[t[i],t[e]]=[t[e],t[i]];return t}getAnswerArr(){let t=[this.level1[this.levelCounter].questions[this.quizCounter].answer];if("true"===this.level1[this.levelCounter].questions[this.quizCounter].japanese){let e=this.level1[this.levelCounter].english;for(;t.length<4;){let i=e[Math.floor(Math.random()*e.length)];t.includes(i)||t.push(i)}}else{let e=this.level1[this.levelCounter].japanese;for(;t.length<4;){let i=e[Math.floor(Math.random()*e.length)];t.includes(i)||t.push(i)}}return this.shuffleArr(t)}changeQuizCardText(){this.questionText.text=this.level1[this.levelCounter].questions[this.quizCounter].question;let t=this.getAnswerArr();this.answer1Text.text=t[0],this.answer2Text.text=t[1],this.answer3Text.text=t[2],this.answer4Text.text=t[3];for(let e=0;e<t.length;e++)t[e].includes("~")&&(t[e]=t[e].split("~").join("_"));this.soundAnswer1.sound.src=this.pathKeysHash[t[0]],this.soundAnswer2.sound.src=this.pathKeysHash[t[1]],this.soundAnswer3.sound.src=this.pathKeysHash[t[2]],this.soundAnswer4.sound.src=this.pathKeysHash[t[3]],this.level1[this.levelCounter].questions[this.quizCounter].question.includes("~")?this.soundQuestion.sound.src=this.pathKeysHash[this.level1[this.levelCounter].questions[this.quizCounter].question.split("~").join("_")]:this.soundQuestion.sound.src=this.pathKeysHash[this.level1[this.levelCounter].questions[this.quizCounter].question]}updateQuizCardFontSize(){this.questionText.width=Math.round(this.getFontSizeToFit(this.questionText.text,this.question.width-20)),this.questionText.width>17?this.questionText.width="17px":this.questionText.width=this.questionText.width+"px",this.answer1Text.width=Math.round(this.getFontSizeToFit(this.answer1Text.text,this.answer1.width-20)),this.answer1Text.width>14?this.answer1Text.width="14px":this.answer1Text.width=this.answer1Text.width+"px",this.answer2Text.width=Math.round(this.getFontSizeToFit(this.answer2Text.text,this.answer2.width-20)),this.answer2Text.width>14?this.answer2Text.width="14px":this.answer2Text.width=this.answer2Text.width+"px",this.answer3Text.width=Math.round(this.getFontSizeToFit(this.answer3Text.text,this.answer3.width-20)),this.answer3Text.width>14?this.answer3Text.width="14px":this.answer3Text.width=this.answer3Text.width+"px",this.answer4Text.width=Math.round(this.getFontSizeToFit(this.answer4Text.text,this.answer4.width-20)),this.answer4Text.width>14?this.answer4Text.width="14px":this.answer4Text.width=this.answer4Text.width+"px",this.ctx.font="14px Ubuntu"}updateQuizCardTextX(){let t=[this.answer1Text,this.answer3Text],e=[this.answer2Text,this.answer4Text];Number(this.questionText.width.split("").slice(0,2).join(""))<17.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>16.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/1.65:Number(this.questionText.width.split("").slice(0,2).join(""))<16.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>15.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/1.85:Number(this.questionText.width.split("").slice(0,2).join(""))<15.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>14.5||Number(this.questionText.width.split("").slice(0,2).join(""))<14.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>13.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2:Number(this.questionText.width.split("").slice(0,2).join(""))<13.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>12.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.1:Number(this.questionText.width.split("").slice(0,2).join(""))<12.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>11.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.3:Number(this.questionText.width.split("").slice(0,2).join(""))<11.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>10.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.5:Number(this.questionText.width.split("").slice(0,2).join(""))<10.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>9.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/2.8:Number(this.questionText.width.split("").slice(0,2).join(""))<9.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>8.5?this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/3:Number(this.questionText.width.split("").slice(0,2).join(""))<8.5&&Number(this.questionText.width.split("").slice(0,2).join(""))>7.5&&(this.questionText.x=150-this.ctx.measureText(this.questionText.text).width/3.3);for(let t=0;t<e.length;t++)"14px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2:"13px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.1:"12px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.3:"11px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.5:"10px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/2.8:"9px"===e[t].width?e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/3:"8px"===e[t].width&&(e[t].x=300/1.4-this.ctx.measureText(e[t].text).width/3.3);for(let e=0;e<t.length;e++)"14px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2:"13px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.1:"12px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.3:"11px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.5:"10px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/2.8:"9px"===t[e].width?t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/3:"8px"===t[e].width&&(t[e].x=300/3.5-this.ctx.measureText(t[e].text).width/3.3)}getFontSizeToFit(t,e){return this.ctx.font="1px Ubuntu",e/this.questionText.ctx.measureText(t).width}updateSoundIconsX(){this.questionSound.x=this.question.x+8,this.questionSound.y=this.question.y+6,this.answer1Sound.x=this.answer1.x+5,this.answer1Sound.y=this.answer1.y+6,this.answer2Sound.x=this.answer2.x+5,this.answer2Sound.y=this.answer2.y+6,this.answer3Sound.x=this.answer3.x+5,this.answer3Sound.y=this.answer3.y+6,this.answer4Sound.x=this.answer4.x+5,this.answer4Sound.y=this.answer4.y+6}updateQuizCardComponents(){!1===this.playedQuizSound&&"true"===this.level1[this.levelCounter].questions[this.quizCounter].japanese&&(this.soundQuestion.play(),this.playedQuizSound=!0),this.updateQuizCardFontSize(),this.updateQuizCardTextX(),this.updateSoundIconsX(),this.question.update(),this.answer1.update(),this.answer2.update(),this.answer3.update(),this.answer4.update(),!0===this.showAnswer&&(this.incorrectAnswer.update(),this.correctAnswer.update()),this.questionText.update(),this.answer1Text.update(),this.answer2Text.update(),this.answer3Text.update(),this.answer4Text.update(),"true"===this.level1[this.levelCounter].questions[this.quizCounter].japanese?this.questionSound.update():(this.answer1Sound.update(),this.answer2Sound.update(),this.answer3Sound.update(),this.answer4Sound.update()),this.letsPracticeTalkingBox.update(),this.letsPracticeText.update()}animate(t,e){this.gx=t,this.gy=e,this.background.update(),this.spriteAnimation(),this.updateInitialComponents(),!0===this.quiz1||this.quiz2||this.quiz3?this.updateQuizCardComponents():this.updateNewCardComponents()}}var pt=i(8009),gt=i(1047);console.warn=()=>{};let mt=function(){const t=document.createElement("div"),e=document.createElement("canvas"),i=document.createElement("canvas");e.width=1200,e.height=600,i.height=600,i.width=100,t.classList.add("outerDiv"),e.classList.add("canvas"),i.classList.add("canvas3"),t.appendChild(i),t.appendChild(e);const n=document.getElementsByTagName("head")[0],s=document.createElement("link");return s.setAttribute("rel","icon"),s.setAttribute("type","image/x-icon"),s.setAttribute("href",gt),n.appendChild(s),[t,e,i]}(),xt=function(){const t=document.createElement("footer");t.classList.add("footer");const e=document.createElement("span");e.classList.add("span1"),e.innerText="Alex Ciminillo © 2022",t.appendChild(e);const i=document.createElement("span");i.classList.add("git");const n=document.createElement("a");n.setAttribute("target","_blank"),n.setAttribute("href","https://github.com/alex-ciminillo/tower_of_dreams");const s=document.createElement("img");return s.setAttribute("src",pt),n.appendChild(s),i.appendChild(n),t.appendChild(i),t}();document.body.appendChild(mt[0]),document.body.appendChild(xt),new class{constructor(t,e){this.alpha=.99,this.delta=.01,this.canvas=t,this.canvas2=e,this.ctx=t.getContext("2d"),this.ctx.scale(4,4),this.ctx2=e.getContext("2d"),this.ctx2.scale(4,4),this.tower=new lt(this.ctx,0,0,this.canvas),this.dimensions={width:t.width,height:t.height},this.title=new _(this.canvas,this.ctx,this.dimensions),this.blackScreen=new I(this.canvas,this.ctx,this.dimensions),this.home=new M(this.canvas,this.ctx,this.dimensions),this.editScreen=new L(this.canvas,this.ctx,this.dimensions,this,this.canvas2,this.ctx2),this.eventListener=new G(this.canvas,this.ctx,this.dimensions,this.canvas2),this.editButton=new n(20.67,6.21,"invisible",278.51,143.57,this.ctx,"other"),this.gy=0,this.gx=0,this.editMode=!1,this.showEditButton=!1,this.training=new ft(this.ctx,0,0,this.canvas),this.fadeBoxArr=[],this.fadeBoxArr2=[],this.registerEvents(),this.animate(),this.currentScreen="Title",this.fadeScreen=!1,"yes"===this.checkCookie("reward")&&(this.home.getTheItem=!0),"true"===this.checkCookie("start")?this.currentScreen="Home":this.home.startPulsingGlow()}deleteCookie(t){document.cookie=t+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"}restartGame(){this.deleteCookie("reward"),this.deleteCookie("start")}checkResetGame(){void 0!==this.reset&&clearTimeout(this.reset),void 0===this.resetCounter&&(this.resetCounter=0),this.resetCounter+=1,this.resetCounter>140&&this.restartGame(),this.reset=setTimeout((()=>{this.resetCounter=0}),500)}registerEvents(){this.boundClickHandler=this.click.bind(this),this.boundHoverHandler=this.hover.bind(this),this.ctx.canvas.addEventListener("mousemove",this.boundHoverHandler),this.ctx.canvas.addEventListener("mousedown",this.boundClickHandler),this.ctx.canvas.addEventListener("mouseup",this.boundClickHandler),this.ctx.canvas.addEventListener("mousemove",this.boundHoverHandler),this.ctx2.canvas.addEventListener("mouseup",this.boundClickHandler),this.ctx2.canvas.addEventListener("mousedown",this.boundClickHandler),this.ctx2.canvas.addEventListener("mousemove",this.boundHoverHandler)}updateGxGy(t){this.gxgyArr=this.eventListener.updateGxGy(t),this.gx=this.gxgyArr[0],this.gy=this.gxgyArr[1]}updateGxGy2(t){this.gxgyArr2=this.eventListener.updateGxGy2(t),this.gx2=this.gxgyArr2[0],this.gy2=this.gxgyArr2[1]}hover(t){this.e=t,this.updateGxGy(t),this.updateGxGy2(t),"Title"===this.currentScreen?this.titleHover(t):"Home"===this.currentScreen?this.homeHover(t):"Training"===this.currentScreen?this.trainingHover(t):"Tower"===this.currentScreen&&this.towerHover(t)}click(t){this.checkResetGame(),this.checkForEditModeEnabling(t),!0===this.showEditButton&&this.enableEditMode(t),!0===this.editMode?this.editScreen.saveClicks(this.gx,this.gy,t):"Title"===this.currentScreen?this.titleClick(t):"Home"===this.currentScreen?this.homeClick(t):"Training"===this.currentScreen?this.trainingClick(t):"Tower"===this.currentScreen&&this.towerClick(t)}towerClick(t){this.tower.click(t),!0===this.tower.goHome&&(this.currentScreen="Home",this.tower.reset())}towerHover(t){this.tower.hover(t)}trainingClick(t){this.training.click(t),!0===this.training.goHome?(this.currentScreen="Home",this.training.goHome=!1,this.home.adventureGuy.y+=25,"true"!==this.checkCookie("triedTower")&&this.home.startPulsingGlow2()):!0===this.training.towerTime&&(this.currentScreen="Tower",this.towerTime=!1)}trainingHover(t){this.training.hover(t)}titleHover(t){this.title.gx=this.gx,this.title.gy=this.gy,this.title.titleHover(t)}titleClick(t){this.title.titleClick(t),!0===this.title.beginGame&&this.beginGame()}homeHover(t){this.home.gx=this.gx,this.home.gy=this.gy,this.home.hover(t)}homeClick(t){this.home.click(t),!0===this.home.beginTraining?this.beginTraining():!0===this.home.beginTower&&(this.currentScreen="Tower",this.home.beginTower=!1,document.cookie="triedTower=true",this.home.trainingPulse=!1)}beginTraining(){this.currentScreen="Training",this.home.beginTraining=!1,this.home.gx=0,this.home.gy=0}beginGame(){this.fadeScreen=!0,this.fadeUp=!1,this.nextScreen="Black Screen",setTimeout((()=>{this.currentScreen="Home"}),7e3)}fadeOut(){this.fadeUp?this.alpha+=this.delta:this.alpha-=this.delta,this.alpha<=0?(this.fadeUp=!0,this.currentScreen=this.nextScreen):this.alpha>=1&&(this.fadeUp=!1,this.fadeScreen=!1)}checkForEditModeEnabling(t){if(this.mousePos=t.type,"mousedown"===t.type){let t=this.gx,e=this.gy;setTimeout((()=>{t===this.gx&&e===this.gy&&"mousedown"===this.mousePos&&(this.showEditButton=!0)}),1e3)}else setTimeout((()=>{this.showEditButton=!1}),1e3)}enableEditMode(t){this.editButton.clicked(this.gx,this.gy)&&"mousedown"===t.type&&(!0===this.editMode?(this.editMode=!1,this.canvas2.classList.add("canvas3"),this.canvas2.classList.remove("canvas2")):(this.editMode=!0,this.canvas2.classList.add("canvas2"),this.canvas2.classList.remove("canvas3")))}fadeScreenToBlack(){this.alphaClone>=1&&(this.startFade2("white",.05,0),this.alphaClone=.99,this.alphaDir=0),this.alphaClone+=this.alphaDir,this.ctx.globalAlpha=this.alphaClone,this.alphaClone<=0||(this.fadeBoxArr[0].update(),this.fadeBoxArr[1].update()),this.ctx.globalAlpha=1}checkCookie(t){let e=t+"=",i=decodeURIComponent(document.cookie).split(";");for(let t=0;t<i.length;t++){let n=i[t];for(;" "==n.charAt(0);)n=n.substring(1);if(0==n.indexOf(e))return n.substring(e.length,n.length)}}fadeScreenToWhite(){this.alphaClone2>=.8&&(!0===this.getTheItem&&(this.home.getTheItem=!0),this.fadeBoxArr=[],this.screenFade=!1,this.alphaDir2=-.01,this.currentScreen="Home","yes"===this.checkCookie("reward")&&(this.home.getTheItem=!0),this.tower.reset()),this.alphaClone2+=this.alphaDir2,this.ctx.globalAlpha=this.alphaClone2,this.alphaClone2<=0?this.screenFade2=!1:(this.fadeBoxArr2[0].update(),this.fadeBoxArr2[1].update()),this.ctx.globalAlpha=1}startFade2(t,e,i){this.fadeBoxArr2.push(new n(300,150,t,0,0,this.ctx,"other")),this.fadeBoxArr2.push(new n(300,150,t,0,0,this.ctx,"other")),this.screenFade2=!0,this.alphaDir2=e,this.alphaClone2=i,this.tower.goHome=!1}startFade(t,e,i){this.fadeBoxArr.push(new n(300,150,t,0,0,this.ctx,"other")),this.fadeBoxArr.push(new n(300,150,t,0,0,this.ctx,"other")),this.screenFade=!0,this.alphaDir=e,this.alphaClone=i}animate(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.fadeScreen&&this.fadeOut(),"Title"===this.currentScreen?this.title.animate():"Black Screen"===this.currentScreen?this.blackScreen.animate():"Home"===this.currentScreen?this.home.animate(this.e):"Training"===this.currentScreen?this.training.animate(this.gx,this.gy):"Tower"===this.currentScreen&&this.tower.animate(this.gx,this.gy),!0===this.screenFade&&this.fadeScreenToBlack(),!0===this.screenFade2&&this.fadeScreenToWhite(),this.ctx.globalAlpha=this.alpha,!0===this.showEditButton&&this.editButton.update(),!0===this.editMode&&this.editScreen.animate(this.gx,this.gy,this.gx2,this.gy2),!0===this.tower.fadeTheScreen&&this.startFade("black",.005,0),!0===this.tower.goHome&&this.startFade2("white",.05,0),requestAnimationFrame(this.animate.bind(this))}}(mt[1],mt[2])},863:(t,e,i)=>{var n={"./あなた は きれい です.mp3":3255,"./あなた は くるま が あります.mp3":8991,"./あなた は とむ です.mp3":3039,"./あなた.mp3":9252,"./かっこいい.mp3":9150,"./が_あります.mp3":8813,"./きれい.mp3":1550,"./くるま.mp3":3185,"./これ は ほん です.mp3":4612,"./これ.mp3":6062,"./それ は くるま です.mp3":4987,"./それ.mp3":8693,"./は_です.mp3":6156,"./ほん です.mp3":6219,"./ほん.mp3":2868,"./わたし は かっこいい です.mp3":7165,"./わたし は さら です.mp3":2683,"./わたし は ほん が あります.mp3":287,"./わたし.mp3":8148};function s(t){var e=r(t);return i(e)}function r(t){if(!i.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}s.keys=function(){return Object.keys(n)},s.resolve=r,t.exports=s,s.id=863},428:(t,e,i)=>{"use strict";t.exports=i.p+"5f45b52192a301cb8ccd.ttf"},2399:(t,e,i)=>{"use strict";t.exports=i.p+"0ec575e7f2b29053e4ba.ttf"},7974:(t,e,i)=>{"use strict";t.exports=i.p+"4324153cbca06df9cfc1.ttf"},2552:(t,e,i)=>{"use strict";t.exports=i.p+"fbdecfce69a96dc73e2a.ttf"},7180:(t,e,i)=>{"use strict";t.exports=i.p+"deea9bfeb80926a17836.png"},7035:(t,e,i)=>{"use strict";t.exports=i.p+"ae40136e27422547e9b5.png"},8099:(t,e,i)=>{"use strict";t.exports=i.p+"c27f88aff5de0841b9a0.png"},7989:(t,e,i)=>{"use strict";t.exports=i.p+"3231fa9c0e7049f7507c.png"},4677:(t,e,i)=>{"use strict";t.exports=i.p+"c55e995bab1f6dd3f24b.png"},590:(t,e,i)=>{"use strict";t.exports=i.p+"9806eed9ee8a50c46a52.png"},9515:(t,e,i)=>{"use strict";t.exports=i.p+"ec62c4751b3102633f18.png"},2186:(t,e,i)=>{"use strict";t.exports=i.p+"84d2927dea30cec991e7.png"},6284:(t,e,i)=>{"use strict";t.exports=i.p+"1d9b1a7b114d5a285daf.png"},7725:(t,e,i)=>{"use strict";t.exports=i.p+"ef44b0990f593926bd3d.png"},3367:(t,e,i)=>{"use strict";t.exports=i.p+"f7b5b7b747d679d07d9b.png"},6163:(t,e,i)=>{"use strict";t.exports=i.p+"eb6a28e2a3916560d1b9.png"},271:(t,e,i)=>{"use strict";t.exports=i.p+"56ed08144a6b33474c32.png"},7102:(t,e,i)=>{"use strict";t.exports=i.p+"2115931fe6d45c2c684f.png"},5364:(t,e,i)=>{"use strict";t.exports=i.p+"a52d255abf6a39ecdcab.png"},3603:(t,e,i)=>{"use strict";t.exports=i.p+"94c8836a26d76cc1462e.png"},3587:(t,e,i)=>{"use strict";t.exports=i.p+"187d7b40c9e59c87bffe.png"},8448:(t,e,i)=>{"use strict";t.exports=i.p+"c68e67f4d8089b41f415.png"},5012:(t,e,i)=>{"use strict";t.exports=i.p+"6ea802d7d3c49423fdae.png"},8547:(t,e,i)=>{"use strict";t.exports=i.p+"0ba7d7c8ee08f7be8c13.png"},9618:(t,e,i)=>{"use strict";t.exports=i.p+"ad7c0c83afb4a84a4f43.png"},6605:(t,e,i)=>{"use strict";t.exports=i.p+"ca723deab12be00bee14.png"},847:(t,e,i)=>{"use strict";t.exports=i.p+"56932d649017aed08a80.png"},5312:(t,e,i)=>{"use strict";t.exports=i.p+"8bf66fa338e7a32fb911.png"},1082:(t,e,i)=>{"use strict";t.exports=i.p+"51594403a8d9705b62ba.png"},5989:(t,e,i)=>{"use strict";t.exports=i.p+"de5be2fd72a29967c51f.png"},6352:(t,e,i)=>{"use strict";t.exports=i.p+"6375c1bb8d4c71d58987.png"},4431:(t,e,i)=>{"use strict";t.exports=i.p+"e700f6c7361fa152218d.png"},8786:(t,e,i)=>{"use strict";t.exports=i.p+"7dc30841f214941809d8.png"},7398:(t,e,i)=>{"use strict";t.exports=i.p+"c73206927a6fa04168a0.png"},4856:(t,e,i)=>{"use strict";t.exports=i.p+"79a0e8cb16fa1f99a407.png"},4317:(t,e,i)=>{"use strict";t.exports=i.p+"8069b81df6096f84e9b8.png"},1298:(t,e,i)=>{"use strict";t.exports=i.p+"ac8cbb704a9be925b5bc.png"},770:(t,e,i)=>{"use strict";t.exports=i.p+"07989393cd2c7a8f13ab.png"},933:(t,e,i)=>{"use strict";t.exports=i.p+"1f91113a111ecbc3705f.png"},1047:(t,e,i)=>{"use strict";t.exports=i.p+"4516a8515319b8406901.ico"},8009:(t,e,i)=>{"use strict";t.exports=i.p+"7615be16eed41f806def.png"},9715:(t,e,i)=>{"use strict";t.exports=i.p+"b42d65e4e1aa166c8c34.png"},2715:(t,e,i)=>{"use strict";t.exports=i.p+"c5de57df6660939bc095.png"},5881:(t,e,i)=>{"use strict";t.exports=i.p+"90fabee885646a07ff65.png"},6999:(t,e,i)=>{"use strict";t.exports=i.p+"33b8dbaada51d5675072.png"},8963:(t,e,i)=>{"use strict";t.exports=i.p+"833a55cf4bdab98eae96.png"},3879:(t,e,i)=>{"use strict";t.exports=i.p+"9bedbd11d2a3eac2f142.png"},8422:(t,e,i)=>{"use strict";t.exports=i.p+"e0c549324a3d7c8f92ff.png"},4524:(t,e,i)=>{"use strict";t.exports=i.p+"781a6ebcb664dd81b6b2.png"},4767:(t,e,i)=>{"use strict";t.exports=i.p+"6fcb8a04a69db16f5d5b.png"},1237:(t,e,i)=>{"use strict";t.exports=i.p+"d6e520bd91992bbeec1e.png"},7298:(t,e,i)=>{"use strict";t.exports=i.p+"806486ab47589660640e.png"},1779:(t,e,i)=>{"use strict";t.exports=i.p+"6de9e76b89ca1da1644d.png"},7676:(t,e,i)=>{"use strict";t.exports=i.p+"0ffbf8b0772991b05ebd.png"},3051:(t,e,i)=>{"use strict";t.exports=i.p+"5c97e818d194a5d6509d.png"},312:(t,e,i)=>{"use strict";t.exports=i.p+"ee7f9be2cdbb86cfdb51.png"},6616:(t,e,i)=>{"use strict";t.exports=i.p+"c482a84ed2168a64f0cb.png"},4492:(t,e,i)=>{"use strict";t.exports=i.p+"aeec2cbc03f9bebd2370.png"}},n={};function s(t){var e=n[t];if(void 0!==e){if(void 0!==e.error)throw e.error;return e.exports}var r=n[t]={id:t,loaded:!1,exports:{}};try{var h={id:t,module:r,factory:i[t],require:s};s.i.forEach((function(t){t(h)})),r=h.module,h.factory.call(r.exports,r,r.exports,h.require)}catch(t){throw r.error=t,t}return r.loaded=!0,r.exports}s.m=i,s.c=n,s.i=[],s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.hu=t=>t+"."+s.h()+".hot-update.js",s.hmrF=()=>"index."+s.h()+".hot-update.json",s.h=()=>"4429684b37f8ae7dd769",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="tower_of_dreams:",s.l=(i,n,r,h)=>{if(t[i])t[i].push(n);else{var a,o;if(void 0!==r)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var l=u[c];if(l.getAttribute("src")==i||l.getAttribute("data-webpack")==e+r){a=l;break}}a||(o=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",e+r),a.src=i),t[i]=[n];var d=(e,n)=>{a.onerror=a.onload=null,clearTimeout(f);var s=t[i];if(delete t[i],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((t=>t(n))),e)return e(n)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),o&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t,e,i,n,r={},h=s.c,a=[],o=[],u="idle";function c(t){u=t;for(var e=[],i=0;i<o.length;i++)e[i]=o[i].call(null,t);return Promise.all(e)}function l(t){if(0===e.length)return t();var i=e;return e=[],Promise.all(i).then((function(){return l(t)}))}function d(t){if("idle"!==u)throw new Error("check() is only allowed in idle status");return c("check").then(s.hmrM).then((function(n){return n?c("prepare").then((function(){var r=[];return e=[],i=[],Promise.all(Object.keys(s.hmrC).reduce((function(t,e){return s.hmrC[e](n.c,n.r,n.m,t,i,r),t}),[])).then((function(){return l((function(){return t?p(t):c("ready").then((function(){return r}))}))}))})):c(g()?"ready":"idle").then((function(){return null}))}))}function f(t){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(t)}function p(t){t=t||{},g();var e=i.map((function(e){return e(t)}));i=void 0;var s=e.map((function(t){return t.error})).filter(Boolean);if(s.length>0)return c("abort").then((function(){throw s[0]}));var r=c("dispose");e.forEach((function(t){t.dispose&&t.dispose()}));var h,a=c("apply"),o=function(t){h||(h=t)},u=[];return e.forEach((function(t){if(t.apply){var e=t.apply(o);if(e)for(var i=0;i<e.length;i++)u.push(e[i])}})),Promise.all([r,a]).then((function(){return h?c("fail").then((function(){throw h})):n?p(t).then((function(t){return u.forEach((function(e){t.indexOf(e)<0&&t.push(e)})),t})):c("idle").then((function(){return u}))}))}function g(){if(n)return i||(i=[]),Object.keys(s.hmrI).forEach((function(t){n.forEach((function(e){s.hmrI[t](e,i)}))})),n=void 0,!0}s.hmrD=r,s.i.push((function(p){var g,m,x,w,v=p.module,y=function(i,n){var s=h[n];if(!s)return i;var r=function(e){if(s.hot.active){if(h[e]){var r=h[e].parents;-1===r.indexOf(n)&&r.push(n)}else a=[n],t=e;-1===s.children.indexOf(e)&&s.children.push(e)}else console.warn("[HMR] unexpected require("+e+") from disposed module "+n),a=[];return i(e)},o=function(t){return{configurable:!0,enumerable:!0,get:function(){return i[t]},set:function(e){i[t]=e}}};for(var d in i)Object.prototype.hasOwnProperty.call(i,d)&&"e"!==d&&Object.defineProperty(r,d,o(d));return r.e=function(t){return function(t){switch(u){case"ready":return c("prepare"),e.push(t),l((function(){return c("ready")})),t;case"prepare":return e.push(t),t;default:return t}}(i.e(t))},r}(p.require,p.id);v.hot=(g=p.id,m=v,w={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:x=t!==g,_requireSelf:function(){a=m.parents.slice(),t=x?void 0:g,s(g)},active:!0,accept:function(t,e,i){if(void 0===t)w._selfAccepted=!0;else if("function"==typeof t)w._selfAccepted=t;else if("object"==typeof t&&null!==t)for(var n=0;n<t.length;n++)w._acceptedDependencies[t[n]]=e||function(){},w._acceptedErrorHandlers[t[n]]=i;else w._acceptedDependencies[t]=e||function(){},w._acceptedErrorHandlers[t]=i},decline:function(t){if(void 0===t)w._selfDeclined=!0;else if("object"==typeof t&&null!==t)for(var e=0;e<t.length;e++)w._declinedDependencies[t[e]]=!0;else w._declinedDependencies[t]=!0},dispose:function(t){w._disposeHandlers.push(t)},addDisposeHandler:function(t){w._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=w._disposeHandlers.indexOf(t);e>=0&&w._disposeHandlers.splice(e,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":i=[],Object.keys(s.hmrI).forEach((function(t){s.hmrI[t](g,i)})),c("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(t){s.hmrI[t](g,i)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(g)}},check:d,apply:f,status:function(t){if(!t)return u;o.push(t)},addStatusHandler:function(t){o.push(t)},removeStatusHandler:function(t){var e=o.indexOf(t);e>=0&&o.splice(e,1)},data:r[g]},t=void 0,w),v.parents=a,v.children=[],a=[],p.require=y})),s.hmrC={},s.hmrI={}})(),s.p="/tower_of_dreams/",(()=>{s.b=document.baseURI||self.location.href;var t,e,i,n,r=s.hmrS_jsonp=s.hmrS_jsonp||{826:0},h={};function a(t){return new Promise(((e,i)=>{h[t]=e;var n=s.p+s.hu(t),r=new Error;s.l(n,(e=>{if(h[t]){h[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;r.message="Loading hot update chunk "+t+" failed.\n("+n+": "+s+")",r.name="ChunkLoadError",r.type=n,r.request=s,i(r)}}))}))}function o(h){function a(t){for(var e=[t],i={},n=e.map((function(t){return{chain:[t],id:t}}));n.length>0;){var r=n.pop(),h=r.id,a=r.chain,u=s.c[h];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:h};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:h};for(var c=0;c<u.parents.length;c++){var l=u.parents[c],d=s.c[l];if(d){if(d.hot._declinedDependencies[h])return{type:"declined",chain:a.concat([l]),moduleId:h,parentId:l};-1===e.indexOf(l)&&(d.hot._acceptedDependencies[h]?(i[l]||(i[l]=[]),o(i[l],[h])):(delete i[l],e.push(l),n.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:i}}function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];-1===t.indexOf(n)&&t.push(n)}}s.f&&delete s.f.jsonpHmr,t=void 0;var u={},c=[],l={},d=function(t){console.warn("[HMR] unexpected require("+t.id+") to disposed module")};for(var f in e)if(s.o(e,f)){var p,g=e[f],m=!1,x=!1,w=!1,v="";switch((p=g?a(f):{type:"disposed",moduleId:f}).chain&&(v="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":h.onDeclined&&h.onDeclined(p),h.ignoreDeclined||(m=new Error("Aborted because of self decline: "+p.moduleId+v));break;case"declined":h.onDeclined&&h.onDeclined(p),h.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+v));break;case"unaccepted":h.onUnaccepted&&h.onUnaccepted(p),h.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+v));break;case"accepted":h.onAccepted&&h.onAccepted(p),x=!0;break;case"disposed":h.onDisposed&&h.onDisposed(p),w=!0;break;default:throw new Error("Unexception type "+p.type)}if(m)return{error:m};if(x)for(f in l[f]=g,o(c,p.outdatedModules),p.outdatedDependencies)s.o(p.outdatedDependencies,f)&&(u[f]||(u[f]=[]),o(u[f],p.outdatedDependencies[f]));w&&(o(c,[p.moduleId]),l[f]=d)}e=void 0;for(var y,A=[],C=0;C<c.length;C++){var b=c[C],S=s.c[b];S&&(S.hot._selfAccepted||S.hot._main)&&l[b]!==d&&!S.hot._selfInvalidated&&A.push({module:b,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var t;i.forEach((function(t){delete r[t]})),i=void 0;for(var e,n=c.slice();n.length>0;){var h=n.pop(),a=s.c[h];if(a){var o={},l=a.hot._disposeHandlers;for(C=0;C<l.length;C++)l[C].call(null,o);for(s.hmrD[h]=o,a.hot.active=!1,delete s.c[h],delete u[h],C=0;C<a.children.length;C++){var d=s.c[a.children[C]];d&&(t=d.parents.indexOf(h))>=0&&d.parents.splice(t,1)}}}for(var f in u)if(s.o(u,f)&&(a=s.c[f]))for(y=u[f],C=0;C<y.length;C++)e=y[C],(t=a.children.indexOf(e))>=0&&a.children.splice(t,1)},apply:function(t){for(var e in l)s.o(l,e)&&(s.m[e]=l[e]);for(var i=0;i<n.length;i++)n[i](s);for(var r in u)if(s.o(u,r)){var a=s.c[r];if(a){y=u[r];for(var o=[],d=[],f=[],p=0;p<y.length;p++){var g=y[p],m=a.hot._acceptedDependencies[g],x=a.hot._acceptedErrorHandlers[g];if(m){if(-1!==o.indexOf(m))continue;o.push(m),d.push(x),f.push(g)}}for(var w=0;w<o.length;w++)try{o[w].call(null,y)}catch(e){if("function"==typeof d[w])try{d[w](e,{moduleId:r,dependencyId:f[w]})}catch(i){h.onErrored&&h.onErrored({type:"accept-error-handler-errored",moduleId:r,dependencyId:f[w],error:i,originalError:e}),h.ignoreErrored||(t(i),t(e))}else h.onErrored&&h.onErrored({type:"accept-errored",moduleId:r,dependencyId:f[w],error:e}),h.ignoreErrored||t(e)}}}for(var v=0;v<A.length;v++){var C=A[v],b=C.module;try{C.require(b)}catch(e){if("function"==typeof C.errorHandler)try{C.errorHandler(e,{moduleId:b,module:s.c[b]})}catch(i){h.onErrored&&h.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:i,originalError:e}),h.ignoreErrored||(t(i),t(e))}else h.onErrored&&h.onErrored({type:"self-accept-errored",moduleId:b,error:e}),h.ignoreErrored||t(e)}}return c}}}self.webpackHotUpdatetower_of_dreams=(t,i,r)=>{for(var a in i)s.o(i,a)&&(e[a]=i[a]);r&&n.push(r),h[t]&&(h[t](),h[t]=void 0)},s.hmrI.jsonp=function(t,r){e||(e={},n=[],i=[],r.push(o)),s.o(e,t)||(e[t]=s.m[t])},s.hmrC.jsonp=function(h,u,c,l,d,f){d.push(o),t={},i=u,e=c.reduce((function(t,e){return t[e]=!1,t}),{}),n=[],h.forEach((function(e){s.o(r,e)&&void 0!==r[e]&&(l.push(a(e)),t[e]=!0)})),s.f&&(s.f.jsonpHmr=function(e,i){t&&!s.o(t,e)&&s.o(r,e)&&void 0!==r[e]&&(i.push(a(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((t=>{if(404!==t.status){if(!t.ok)throw new Error("Failed to fetch update manifest "+t.statusText);return t.json()}}))}})(),s(9786)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,