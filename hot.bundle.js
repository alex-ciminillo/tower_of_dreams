(()=>{var e,n,r={7187:e=>{"use strict";var n,r="object"==typeof Reflect?Reflect:null,t=r&&"function"==typeof r.apply?r.apply:function(e,n,r){return Function.prototype.apply.call(e,n,r)};n=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,n){return new Promise((function(r,t){function o(r){e.removeListener(n,i),t(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}v(e,n,i,{once:!0}),"error"!==n&&function(e,n,r){"function"==typeof e.on&&v(e,"error",n,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,n,r,t){var o,i,s,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",n,r.listener?r.listener:r),i=e._events),s=i[n]),void 0===s)s=i[n]=r,++e._eventsCount;else if("function"==typeof s?s=i[n]=t?[r,s]:[s,r]:t?s.unshift(r):s.push(r),(o=c(e))>0&&s.length>o&&!s.warned){s.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(n)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=n,d.count=s.length,u=d,console&&console.warn&&console.warn(u)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,n,r){var t={fired:!1,wrapFn:void 0,target:e,type:n,listener:r},o=d.bind(t);return o.listener=r,t.wrapFn=o,o}function l(e,n,r){var t=e._events;if(void 0===t)return[];var o=t[n];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var n=new Array(e.length),r=0;r<n.length;++r)n[r]=e[r].listener||e[r];return n}(o):h(o,o.length)}function p(e){var n=this._events;if(void 0!==n){var r=n[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function h(e,n){for(var r=new Array(n),t=0;t<n;++t)r[t]=e[t];return r}function v(e,n,r,t){if("function"==typeof e.on)t.once?e.once(n,r):e.on(n,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(n,(function o(i){t.once&&e.removeEventListener(n,o),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var n=[],r=1;r<arguments.length;r++)n.push(arguments[r]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var s;if(n.length>0&&(s=n[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)t(c,this,n);else{var u=c.length,d=h(c,u);for(r=0;r<u;++r)t(d[r],this,n)}return!0},i.prototype.addListener=function(e,n){return u(this,e,n,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,n){return u(this,e,n,!0)},i.prototype.once=function(e,n){return a(n),this.on(e,f(this,e,n)),this},i.prototype.prependOnceListener=function(e,n){return a(n),this.prependListener(e,f(this,e,n)),this},i.prototype.removeListener=function(e,n){var r,t,o,i,s;if(a(n),void 0===(t=this._events))return this;if(void 0===(r=t[e]))return this;if(r===n||r.listener===n)0==--this._eventsCount?this._events=Object.create(null):(delete t[e],t.removeListener&&this.emit("removeListener",e,r.listener||n));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===n||r[i].listener===n){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,n){for(;n+1<e.length;n++)e[n]=e[n+1];e.pop()}(r,o),1===r.length&&(t[e]=r[0]),void 0!==t.removeListener&&this.emit("removeListener",e,s||n)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var n,r,t;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(t=0;t<i.length;++t)"removeListener"!==(o=i[t])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(n=r[e]))this.removeListener(e,n);else if(void 0!==n)for(t=n.length-1;t>=0;t--)this.removeListener(e,n[t]);return this},i.prototype.listeners=function(e){return l(this,e,!0)},i.prototype.rawListeners=function(e){return l(this,e,!1)},i.listenerCount=function(e,n){return"function"==typeof e.listenerCount?e.listenerCount(n):p.call(e,n)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},6952:(e,n,r)=>{var t,o=function(){return t.indexOf(r.h())>=0},i=r(1919),s=function n(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. Need to do a full reload!"),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();o()||n(),r(5374)(e,e),o()&&i("info","[HMR] App is up to date.")})).catch((function(n){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. Need to do a full reload!"),i("warning","[HMR] "+i.formatError(n)),window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(n))}))};r(5208).on("webpackHotUpdate",(function(n){t=n,o()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),s())})),i("info","[HMR] Waiting for update signal from WDS...")},5208:(e,n,r)=>{var t=r(7187);e.exports=new t},5374:(e,n,r)=>{e.exports=function(e,n){var t=e.filter((function(e){return n&&n.indexOf(e)<0})),o=r(1919);t.length>0&&(o("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),t.forEach((function(e){o("warning","[HMR]  - "+e)}))),n&&0!==n.length?(o("info","[HMR] Updated modules:"),n.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var n=e.split("!");o.groupCollapsed("info","[HMR]  - "+n.pop()),o("info","[HMR]  - "+e),o.groupEnd("info")}else o("info","[HMR]  - "+e)})),n.every((function(e){return"number"==typeof e}))&&o("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):o("info","[HMR] Nothing hot updated.")}},1919:e=>{var n="info";function r(){}function t(e){return"info"===n&&"info"===e||["info","warning"].indexOf(n)>=0&&"warning"===e||["info","warning","error"].indexOf(n)>=0&&"error"===e}function o(e){return function(n,r){t(n)&&e(r)}}e.exports=function(e,n){t(e)&&("info"===e?console.log(n):"warning"===e?console.warn(n):"error"===e&&console.error(n))};var i=console.group||r,s=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=o(i),e.exports.groupCollapsed=o(s),e.exports.groupEnd=o(a),e.exports.setLogLevel=function(e){n=e},e.exports.formatError=function(e){var n=e.message,r=e.stack;return r?r.indexOf(n)<0?n+"\n"+r:r:n}}},t={};function o(e){var n=t[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var i=t[e]={exports:{}};try{var s={id:e,module:i,factory:r[e],require:o};o.i.forEach((function(e){e(s)})),i=s.module,s.factory.call(i.exports,i,i.exports,s.require)}catch(e){throw i.error=e,e}return i.exports}o.m=r,o.c=t,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"hot."+o.h()+".hot-update.json",o.h=()=>"4429684b37f8ae7dd769",o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="tower_of_dreams:",o.l=(r,t,i,s)=>{if(e[r])e[r].push(t);else{var a,c;if(void 0!==i)for(var u=document.getElementsByTagName("script"),d=0;d<u.length;d++){var f=u[d];if(f.getAttribute("src")==r||f.getAttribute("data-webpack")==n+i){a=f;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",n+i),a.src=r),e[r]=[t];var l=(n,t)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(t))),n)return n(t)},p=setTimeout(l.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=l.bind(null,a.onerror),a.onload=l.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,n,r,t,i={},s=o.c,a=[],c=[],u="idle";function d(e){u=e;for(var n=[],r=0;r<c.length;r++)n[r]=c[r].call(null,e);return Promise.all(n)}function f(e){if(0===n.length)return e();var r=n;return n=[],Promise.all(r).then((function(){return f(e)}))}function l(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return d("check").then(o.hmrM).then((function(t){return t?d("prepare").then((function(){var i=[];return n=[],r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,n){return o.hmrC[n](t.c,t.r,t.m,e,r,i),e}),[])).then((function(){return f((function(){return e?h(e):d("ready").then((function(){return i}))}))}))})):d(v()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var n=r.map((function(n){return n(e)}));r=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return d("abort").then((function(){throw o[0]}));var i=d("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var s,a=d("apply"),c=function(e){s||(s=e)},u=[];return n.forEach((function(e){if(e.apply){var n=e.apply(c);if(n)for(var r=0;r<n.length;r++)u.push(n[r])}})),Promise.all([i,a]).then((function(){return s?d("fail").then((function(){throw s})):t?h(e).then((function(e){return u.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):d("idle").then((function(){return u}))}))}function v(){if(t)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){t.forEach((function(n){o.hmrI[e](n,r)}))})),t=void 0,!0}o.hmrD=i,o.i.push((function(h){var v,m,y,g,w=h.module,_=function(r,t){var o=s[t];if(!o)return r;var i=function(n){if(o.hot.active){if(s[n]){var i=s[n].parents;-1===i.indexOf(t)&&i.push(t)}else a=[t],e=n;-1===o.children.indexOf(n)&&o.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+t),a=[];return r(n)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(i,l,c(l));return i.e=function(e){return function(e){switch(u){case"ready":return d("prepare"),n.push(e),f((function(){return d("ready")})),e;case"prepare":return n.push(e),e;default:return e}}(r.e(e))},i}(h.require,h.id);w.hot=(v=h.id,m=w,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){a=m.parents.slice(),e=y?void 0:v,o(v)},active:!0,accept:function(e,n,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=n||function(){},g._acceptedErrorHandlers[e[t]]=r;else g._acceptedDependencies[e]=n||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._declinedDependencies[e[n]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=g._disposeHandlers.indexOf(e);n>=0&&g._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,r)})),d("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(v)}},check:l,apply:p,status:function(e){if(!e)return u;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:i[v]},e=void 0,g),w.parents=a,w.children=[],a=[],h.require=_})),o.hmrC={},o.hmrI={}})(),o.p="/tower_of_dreams/",(()=>{var e,n,r,t,i=o.hmrS_jsonp=o.hmrS_jsonp||{730:0},s={};function a(e){return new Promise(((n,r)=>{s[e]=n;var t=o.p+o.hu(e),i=new Error;o.l(t,(n=>{if(s[e]){s[e]=void 0;var t=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+t+": "+o+")",i.name="ChunkLoadError",i.type=t,i.request=o,r(i)}}))}))}function c(s){function a(e){for(var n=[e],r={},t=n.map((function(e){return{chain:[e],id:e}}));t.length>0;){var i=t.pop(),s=i.id,a=i.chain,u=o.c[s];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:s};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:s};for(var d=0;d<u.parents.length;d++){var f=u.parents[d],l=o.c[f];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:a.concat([f]),moduleId:s,parentId:f};-1===n.indexOf(f)&&(l.hot._acceptedDependencies[s]?(r[f]||(r[f]=[]),c(r[f],[s])):(delete r[f],n.push(f),t.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function c(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,e=void 0;var u={},d=[],f={},l=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(o.o(n,p)){var h,v=n[p],m=!1,y=!1,g=!1,w="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(w="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":s.onDeclined&&s.onDeclined(h),s.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+w));break;case"declined":s.onDeclined&&s.onDeclined(h),s.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+w));break;case"unaccepted":s.onUnaccepted&&s.onUnaccepted(h),s.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+w));break;case"accepted":s.onAccepted&&s.onAccepted(h),y=!0;break;case"disposed":s.onDisposed&&s.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in f[p]=v,c(d,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),c(u[p],h.outdatedDependencies[p]));g&&(c(d,[h.moduleId]),f[p]=l)}n=void 0;for(var _,b=[],E=0;E<d.length;E++){var x=d[E],L=o.c[x];L&&(L.hot._selfAccepted||L.hot._main)&&f[x]!==l&&!L.hot._selfInvalidated&&b.push({module:x,require:L.hot._requireSelf,errorHandler:L.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var n,t=d.slice();t.length>0;){var s=t.pop(),a=o.c[s];if(a){var c={},f=a.hot._disposeHandlers;for(E=0;E<f.length;E++)f[E].call(null,c);for(o.hmrD[s]=c,a.hot.active=!1,delete o.c[s],delete u[s],E=0;E<a.children.length;E++){var l=o.c[a.children[E]];l&&(e=l.parents.indexOf(s))>=0&&l.parents.splice(e,1)}}}for(var p in u)if(o.o(u,p)&&(a=o.c[p]))for(_=u[p],E=0;E<_.length;E++)n=_[E],(e=a.children.indexOf(n))>=0&&a.children.splice(e,1)},apply:function(e){for(var n in f)o.o(f,n)&&(o.m[n]=f[n]);for(var r=0;r<t.length;r++)t[r](o);for(var i in u)if(o.o(u,i)){var a=o.c[i];if(a){_=u[i];for(var c=[],l=[],p=[],h=0;h<_.length;h++){var v=_[h],m=a.hot._acceptedDependencies[v],y=a.hot._acceptedErrorHandlers[v];if(m){if(-1!==c.indexOf(m))continue;c.push(m),l.push(y),p.push(v)}}for(var g=0;g<c.length;g++)try{c[g].call(null,_)}catch(n){if("function"==typeof l[g])try{l[g](n,{moduleId:i,dependencyId:p[g]})}catch(r){s.onErrored&&s.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:r,originalError:n}),s.ignoreErrored||(e(r),e(n))}else s.onErrored&&s.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:n}),s.ignoreErrored||e(n)}}}for(var w=0;w<b.length;w++){var E=b[w],x=E.module;try{E.require(x)}catch(n){if("function"==typeof E.errorHandler)try{E.errorHandler(n,{moduleId:x,module:o.c[x]})}catch(r){s.onErrored&&s.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:r,originalError:n}),s.ignoreErrored||(e(r),e(n))}else s.onErrored&&s.onErrored({type:"self-accept-errored",moduleId:x,error:n}),s.ignoreErrored||e(n)}}return d}}}self.webpackHotUpdatetower_of_dreams=(e,r,i)=>{for(var a in r)o.o(r,a)&&(n[a]=r[a]);i&&t.push(i),s[e]&&(s[e](),s[e]=void 0)},o.hmrI.jsonp=function(e,i){n||(n={},t=[],r=[],i.push(c)),o.o(n,e)||(n[e]=o.m[e])},o.hmrC.jsonp=function(s,u,d,f,l,p){l.push(c),e={},r=u,n=d.reduce((function(e,n){return e[n]=!1,e}),{}),t=[],s.forEach((function(n){o.o(i,n)&&void 0!==i[n]&&(f.push(a(n)),e[n]=!0)})),o.f&&(o.f.jsonpHmr=function(n,r){e&&!o.o(e,n)&&o.o(i,n)&&void 0!==i[n]&&(r.push(a(n)),e[n]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(6952)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,